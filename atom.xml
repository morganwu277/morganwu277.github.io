<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alice &amp;&amp; Bob</title>
  
  <subtitle>Alice &amp;&amp; Bob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://morganwu277.github.io/"/>
  <updated>2021-05-23T23:49:09.588Z</updated>
  <id>https://morganwu277.github.io/</id>
  
  <author>
    <name>Morgan Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Limit macOS Network Speed</title>
    <link href="https://morganwu277.github.io/2021/05/23/Limit-macOS-Network-Speed/"/>
    <id>https://morganwu277.github.io/2021/05/23/Limit-macOS-Network-Speed/</id>
    <published>2021-05-23T23:37:28.000Z</published>
    <updated>2021-05-23T23:49:09.588Z</updated>
    
    <content type="html"><![CDATA[<p>Again, starting writing something … Let’s begin with some easy stuff.</p><p>Days ago, I would like to limit my macOS network speed. In Linux, we can use <code>tc</code> command to do that, but in macOS we will use <code>dnctl</code>+<code>pfctl</code>. For <code>tc</code> usage, checkout with this <a href="/2017/07/16/Django-Redis-Scan-Too-Long/">post</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reset dummynet to default config</span></span><br><span class="line">dnctl -f flush</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compose an addendum to the default config: creates a new anchor</span></span><br><span class="line">(cat /etc/pf.conf &amp;&amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'dummynet-anchor "my_anchor"'</span> &amp;&amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'anchor "my_anchor"'</span>) | pfctl -q -f -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure the new anchor</span></span><br><span class="line">cat &lt;&lt;EOF | pfctl -q -a my_anchor -f -</span><br><span class="line">no dummynet quick on lo0 all</span><br><span class="line">dummynet out proto tcp from any to any pipe 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the dummynet queue, we can tune this number, say, make as 409600000 ~ 400MB</span></span><br><span class="line"><span class="comment"># which could means, unlimited for network speed</span></span><br><span class="line">dnctl pipe 1 config bw 4096byte/s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Activate PF</span></span><br><span class="line">pfctl -E</span><br><span class="line"></span><br><span class="line"><span class="comment"># to check that dnctl is properly configured: </span></span><br><span class="line">sudo dnctl list</span><br></pre></td></tr></table></figure><p>Also remeber to reset this network speed control:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnctl -f flush</span><br><span class="line">sudo pfctl -f /etc/pf.conf</span><br><span class="line">sudo dnctl list</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Again, starting writing something … Let’s begin with some easy stuff.&lt;/p&gt;
&lt;p&gt;Days ago, I would like to limit my macOS network speed. In L
      
    
    </summary>
    
      <category term="Tools" scheme="https://morganwu277.github.io/categories/Tools/"/>
    
      <category term="macOS" scheme="https://morganwu277.github.io/categories/Tools/macOS/"/>
    
    
      <category term="Network" scheme="https://morganwu277.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Terraform and Infrastructure as Code</title>
    <link href="https://morganwu277.github.io/2018/06/27/Terraform-and-Infrastructure-as-Code/"/>
    <id>https://morganwu277.github.io/2018/06/27/Terraform-and-Infrastructure-as-Code/</id>
    <published>2018-06-28T03:49:00.000Z</published>
    <updated>2019-09-12T02:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a start on Terraform operations against AWS to fulfill the thought of <a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code" target="_blank" rel="noopener">Infrastructure as Code</a></p><p>The best thing is, you can provision your server using command in parallel, quick, elegant and happily. And beyond that, if you make this one in a predictable way, think for a while, how much money you can save… Oh, my gosh!</p><p>So it has most of the features I desired for a tool to provision a server:</p><ul><li>Infrastructure as Code </li><li>Execution Plans </li><li>Resource Graph </li><li>Change Automation </li></ul><p>So, basically I want a tool to provision a server in a reliable and simple way. Better with <a href="https://en.wikipedia.org/wiki/Dependency_graph" target="_blank" rel="noopener">Dependency graph</a> feature, which is essentially the <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph" target="_blank" rel="noopener">DAG</a>. </p><p>So here is Terraform. Let’s start. </p><center><img src="/2018/06/27/Terraform-and-Infrastructure-as-Code/terrform_aws.png" title="Terraform and AWS"></center><a id="more"></a><h1 id="Basic-Introduction">1. Basic Introduction</h1><p>One sentence to describe Terraform: provision your infrastructure in a desired sequence of components dependencies. </p><h2 id="Basic-Concept">1.1. Basic Concept</h2><ul><li><code>Provider</code>: <a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener">Providers</a> generally are an IaaS (e.g. AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Enterprise, DNSimple, CloudFlare). A provider is responsible for creating and managing resources. </li><li><code>Resource</code>: A resource might be a physical component such as an EC2 instance, or it can be a logical resource such as a Heroku application, which is inside a infrastructure, comes from a <code>provider</code>. </li></ul><h2 id="Basic-Commands">1.2. Basic Commands</h2><ul><li><code>terraform init</code>: init the local settings for next commands, eg. install the provider plugins</li><li><code>terraform apply</code>: shows the <code>execution plan</code> in a Git-like format with <code>+</code> or <code>-</code>, and wait for approval for execution</li><li><code>terraform show</code>: inspect the current state in <code>terraform.tfstate</code> file</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a start on Terraform operations against AWS to fulfill the thought of &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_Code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Infrastructure as Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The best thing is, you can provision your server using command in parallel, quick, elegant and happily. And beyond that, if you make this one in a predictable way, think for a while, how much money you can save… Oh, my gosh!&lt;/p&gt;
&lt;p&gt;So it has most of the features I desired for a tool to provision a server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as Code &lt;/li&gt;
&lt;li&gt;Execution Plans &lt;/li&gt;
&lt;li&gt;Resource Graph &lt;/li&gt;
&lt;li&gt;Change Automation &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, basically I want a tool to provision a server in a reliable and simple way. Better with &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_graph&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dependency graph&lt;/a&gt; feature, which is essentially the &lt;a href=&quot;https://en.wikipedia.org/wiki/Directed_acyclic_graph&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DAG&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So here is Terraform. Let’s start. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/06/27/Terraform-and-Infrastructure-as-Code/terrform_aws.png&quot; title=&quot;Terraform and AWS&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Terraform" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Terraform/"/>
    
    
      <category term="Terraform" scheme="https://morganwu277.github.io/tags/Terraform/"/>
    
      <category term="Infrastructure as Code" scheme="https://morganwu277.github.io/tags/Infrastructure-as-Code/"/>
    
  </entry>
  
  <entry>
    <title>AWS Go Through</title>
    <link href="https://morganwu277.github.io/2018/06/25/AWS-Go-Through/"/>
    <id>https://morganwu277.github.io/2018/06/25/AWS-Go-Through/</id>
    <published>2018-06-25T21:35:40.000Z</published>
    <updated>2019-09-12T02:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been used for AWS for a while, but always there are someone who want to touch this however don’t know how to start or what to follow. </p><p>Recently I read this link, and I was doing it all through and it was a good one to start. <a href="https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/" target="_blank" rel="noopener">So, you want to learn AWS? AKA, “How do I learn to be a Cloud Engineer?”</a></p><p>I won’t paste and tell you everything how to do it, but will point the ones that might block you or you might need to Google it. </p><center><img src="/2018/06/25/AWS-Go-Through/aws-arch.jpg" title="AWS Products"></center><a id="more"></a><p>Most of the words comes from the above link, I will add my own where necessary. </p><h1 id="Introduction">1. Introduction</h1><blockquote><p>So many people struggle with where to get started with AWS and cloud technologies in general. There is popular “How do I learn to be a Linux admin?” post that inspired me to write an equivalent for cloud technologies. This post serves as a guide of goals to grow from basic AWS knowledge to understanding and deploying complex architectures in an automated way. Feel free to pick up where you feel relevant based on prior experience.</p></blockquote><h2 id="Assumptions">1.1. Assumptions:</h2><blockquote><ul><li>You have basic-to-moderate Linux systems administration skills</li><li>You are at least familiar with programming/scripting. You don’t need to be a whiz but you should have some decent hands-on experience automating and programming.</li><li>You are willing to dedicate the time to overcome complex issues.</li><li>You have an AWS Account and a marginal amount of money to spend improving your skills.</li></ul></blockquote><h2 id="How-to-use-this-guide">1.2. How to use this guide:</h2><blockquote><ol><li>This is not a step by step how-to guide.</li><li>You should take each goal and “figure it out”. I have hints to guide you in the right direction.</li><li>Google is your friend. AWS Documentation is your friend. Stack Overflow is your friend.</li><li>Find out and implement the “right way”, not the quick way. Ok, maybe do the quick way first then refactor to the right way before moving on.</li><li>Shut down or de-provision as much as you can between learning sessions. You should be able to do everything in this guide for literally less than $50 using the AWS Free Tier. Rebuilding often will reinforce concepts anyway.</li><li>Skip ahead and read the Cost Analysis and Automation sections and have them in the back of your mind as you work through the goals.</li><li>Lastly, just get hands on, no better time to start then NOW.</li></ol></blockquote><h2 id="Project-Overview">1.3. Project Overview</h2><blockquote><p>This is NOT a guide on how to develop websites on AWS. This uses a website as an excuse to use all the technologies AWS puts at your fingertips. The concepts you will learn going through these exercises apply all over AWS.</p></blockquote><blockquote><p>This guide takes you through a maturity process from the most basic webpage to an extremely cheap scalable web application. The small app you will build does not matter. It can do anything you want, just keep it simple.</p></blockquote><blockquote><p>Need an idea? Here: Fortune-of-the-Day - Display a random fortune each page load, have a box at the bottom and a submit button to add a new fortune to the random fortune list.</p></blockquote><h1 id="Account-Basics">2. Account Basics</h1><blockquote><p>Create an IAM user for your personal use.</p></blockquote><p>It will deduct for 1$ for validation, don’t worry. You are not consuming anything. </p><blockquote><p>Set up MFA for your root user, turn off all root user API keys.</p></blockquote><ol><li>You need Google Authenticator, download it from your Android/iPhone app store. </li><li>Wait for a while and then a new token will be generated, you need type both.</li><li>After doing that, refresh the page, the green checkmark will be shown on aws IAM home page. </li></ol><blockquote><p>Set up Billing Alerts for anything over a few dollars.</p></blockquote><p>The linke is In the <code>Billing Alerts</code> Preferences link, and then click <a href="https://console.aws.amazon.com/cloudwatch/home" target="_blank" rel="noopener">Manage Billing Alerts</a> to setup the billing alarm using CloudWatch. I used <code>$10</code> as a threshold. </p><blockquote><p>Configure the AWS CLI for your user using API credentials.</p></blockquote><ol><li>Go to <code>IAM</code> service and create a new user, I use <code>admin</code>. Should be a programmable user. </li><li>Install <code>aws-cli</code> using <code>pip install</code></li><li>Configure <code>~/.aws/credentials</code> using <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id = xxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">[corp]</span><br><span class="line">aws_access_key_id = xxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure></li></ol><p>Also configure the <code>~/.aws/config</code> using<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">output = json</span><br><span class="line">region = us-east-1</span><br></pre></td></tr></table></figure></p><ol start="4"><li>Use <code>aws --profile corp help</code> to test. </li></ol><blockquote><p>Checkpoint: You can use the AWS CLI to interrogate information about your AWS account. </p></blockquote><ol><li>Bind the <code>arn:aws:iam::aws:policy/IAMReadOnlyAccess</code> or type <code>iam</code> in the permission set filter in <code>admin</code>‘s permission set. You will find a readonly one.</li><li>Type <code>aws --profile corp iam get-user</code> to test.</li></ol><h1 id="Web-Hosting-Basics">3. Web Hosting Basics</h1><blockquote><p>Deploy a EC2 VM and host a simple static “Fortune-of-the-Day Coming Soon” web page.<br>Take a snapshot of your VM, delete the VM, and deploy a new one from the snapshot. Basically disk backup + disk restore.<br>Checkpoint: You can view a simple HTML page served from your EC2 instance.</p></blockquote><h2 id="Deploy-a-EC2-VM-and-put-a-simple-web-server">3.1. Deploy a EC2 VM and put a simple web server</h2><ol><li>Lauched with one free-tire Ubuntu 16.04 server, just select <code>free tier only</code> and then click into Ubuntu and then reveiw and finish. It will ask you to use an existing ssh keys or create a new pair. I choose to create a new pair and then download that. </li><li>Keep that new generated key safe. That’s the way to ssh into the new launched server.</li><li><code>chmod 400</code> to your new generated <code>pem</code> file. Eg, it could be <code>new-ec2-admin.pem</code> </li><li>Login into using <code>ssh -i new-ec2-admin.pem 34.205.74.0</code> or <code>ssh -i new-ec2-admin.pem ec2-34-205-74-0.compute-1.amazonaws.com</code>. You can get the login method from right click the ec2 machine, and then click <code>Connect</code>. Then use <code>sudo -i</code> to get root permission without password.</li><li>Install Nginx/Apached or other webserver you would like, even you can setup your own webserver using NodeJS or Python, etc. I am using <code>Python</code> since python is supported by default. So, just type <code>python3 -m http.server 8080</code> to start a small http server and will listen to 8080 port.</li><li>Open port for <code>8080</code> using security groups. Add a new inboud rule for <code>TCP port</code> of <code>8080</code> from anywhere, i.e., <code>0.0.0.0</code></li><li>Open your browser and access <code>http://34.205.74.0:8080/</code>, <code>Directory listing</code> page should come up.<center><img src="/2018/06/25/AWS-Go-Through/dir-list.png" title="Directory listing page"></center> </li><li>Add python server to auto start. Add <code>@reboot cd ~/ &amp;&amp; python3 -m http.server 8080  &gt; /dev/null 2&gt;&amp;1</code> by using <code>crontab -e</code>. </li><li>Reboot your server and testing if <code>http://34.205.74.0:8080/</code> could be accessed again. </li></ol><h2 id="Take-a-snapshot-and-recover-from-snapshot">3.2. Take a snapshot and recover from snapshot</h2><ol><li>Stop the <code>EC2 instance</code>.</li><li>Create a image from the stopped EC2. It could be a <code>HVM</code> image, or <code>ParaVirtualized</code>. The <code>HVM</code> can be launched with <code>t2.micro</code>, however, <code>ParaVirtualized</code> can’t, but able to be launched using <code>t1.micro</code> type.<br>It will create a snapshot and then create a image. </li><li>Add <code>EC2 permission</code> to your <code>aws-cli</code> user.</li><li><p>Run one new instance with the <code>image-id</code> created above, using next command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aws --region us-east-1  \</span><br><span class="line">    --profile corp ec2 run-instances \</span><br><span class="line">    --image-id ami-04e6460ff83cc6750 \</span><br><span class="line">    --instance-type t2.micro \</span><br><span class="line">    --security-groups <span class="built_in">test</span>-sg \</span><br><span class="line">    --key-name aws-mw-corp  \</span><br><span class="line">    --count 1</span><br></pre></td></tr></table></figure></li><li><p>Access the <code>http://34.205.74.0:8080/</code>(use your own IP address) again, it should work by default.</p></li></ol><h1 id="Auto-Scaling">4. Auto Scaling</h1><blockquote><p>Create an AMI from that VM and put it in an autoscaling group so one VM always exists.</p></blockquote><blockquote><p>Put a Elastic Load Balancer infront of that VM and load balance between two Availability Zones (one EC2 in each AZ).</p></blockquote><blockquote><p>Checkpoint: You can view a simple HTML page served from both of your EC2 instances. You can turn one off and your website is still accessible.</p></blockquote><h1 id="External-Data">5. External Data</h1><p>Create a DynamoDB table and experiment with loading and retrieving data manually, then do the same via a script on your local machine.<br>Refactor your static page into your Fortune-of-the-Day website (Node, PHP, Python, whatever) which reads/updates a list of fortunes in the AWS DynamoDB table. (Hint: EC2 Instance Role)<br>Checkpoint: Your HA/AutoScaled website can now load/save data to a database between users and sessions</p><h1 id="Web-Hosting-Platform-as-a-Service">6. Web Hosting Platform-as-a-Service</h1><p>Retire that simple website and re-deploy it on Elastic Beanstalk.<br>Create a S3 Static Website Bucket, upload some sample static pages/files/images. Add those assets to your Elastic Beanstalk website.<br>Register a domain (or re-use and existing one). Set Route53 as the Nameservers and use Route53 for DNS. Make <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> go to your Elastic Beanstalk. Make static.yourdomain.com serve data from the S3 bucket.<br>Enable SSL for your Static S3 Website. This isn’t exactly trivial. (Hint: CloudFront + ACM)<br>Enable SSL for your Elastic Beanstalk Website.<br>Checkpoint: Your HA/AutoScaled website now serves all data over HTTPS. The same as before, except you don’t have to manage the servers, web server software, website deployment, or the load balancer.</p><h1 id="Microservices">7. Microservices</h1><p>Refactor your EB website into ONLY providing an API. It should only have a POST/GET to update/retrieve that specific data from DynamoDB. Bonus: Make it a simple REST API. Get rid of <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a> and serve this EB as api.yourdomain.com<br>Move most of the UI piece of your EB website into your Static S3 Website and use Javascript/whatever to retrieve the data from your api.yourdomain.com URL on page load. Send data to the EB URL to have it update the DynamoDB. Get rid of static.yourdomain.com and change your S3 bucket to serve from <a href="http://www.yourdomain.com" target="_blank" rel="noopener">www.yourdomain.com</a>.<br>Checkpoint: Your EB deployment is now only a structured way to retrieve data from your database. All of your UI and application logic is served from the S3 Bucket (via CloudFront). You can support many more users since you’re no longer using expensive servers to serve your website’s static data.</p><h1 id="Serverless">8. Serverless</h1><p>Write a AWS Lambda function to email you a list of all of the Fortunes in the DynamoDB table every night. Implement Least Privilege security for the Lambda Role. (Hint: Lambda using Python 3, Boto3, Amazon SES, scheduled with CloudWatch)<br>Refactor the above app into a Serverless app. This is where it get’s a little more abstract and you’ll have to do a lot of research, experimentation on your own.<br>The architecture: Static S3 Website Front-End calls API Gateway which executes a Lambda Function which reads/updates data in the DyanmoDB table.<br>Use your SSL enabled bucket as the primary domain landing page with static content.<br>Create an AWS API Gateway, use it to forward HTTP requests to an AWS Lambda function that queries the same data from DynamoDB as your EB Microservice.<br>Your S3 static content should make Javascript calls to the API Gateway and then update the page with the retrieved data.<br>Once you have the “Get Fortune” API Gateway + Lambda working, do the “New Fortune” API.<br>Checkpoint: Your API Gateway and S3 Bucket are fronted by CloudFront with SSL. You have no EC2 instances deployed. All work is done by AWS services and billed as consumed.</p><h1 id="Cost-Analysis">9. Cost Analysis</h1><p>Explore the AWS pricing models and see how pricing is structured for the services you’ve used.<br>Answer the following for each of the main architectures you built:<br>Roughly how much would this have costed for a month?<br>How would I scale this architecture and how would my costs change?</p><h1 id="Architectures">10. Architectures</h1><p>Basic Web Hosting: HA EC2 Instances Serving Static Web Page behind ELB<br>Microservices: Elastic Beanstalk SSL Website for only API + S3 Static Website for all static content + DynamoDB Table + Route53 + CloudFront SSL<br>Serverless: Serverless Website using API Gateway + Lambda Functions + DynamoDB + Route53 + CloudFront SSL + S3 Static Website for all static content</p><h1 id="Automation">11. Automation</h1><p>!!! This is REALLY important !!!</p><p>These technologies are the most powerful when they’re automated. You can make a Development environment in minutes and experiment and throw it away without a thought. This stuff isn’t easy, but it’s where the really skilled people excel.<br>Automate the deployment of the architectures above. Use whatever tool you want. The popular ones are AWS CloudFormation or Teraform. Store your code in AWS CodeCommit or on GitHub. Yes, you can automate the deployment of ALL of the above with native AWS tools.<br>I suggest when you get each app-related section of the done by hand you go back and automate the provisioning of the infrastructure. For example, automate the provisioning of your EC2 instance. Automate the creation of your S3 Bucket with Static Website Hosting enabled, etc. This is not easy, but it is very rewarding when you see it work.</p><h1 id="Continuous-Delivery">12. Continuous Delivery</h1><p>As you become more familiar with Automating deployments you should explore and implement a Continuous Delivery pipeline.<br>Develop a CI/CD pipeline to automatically update a dev deployment of your infrastructure when new code is published, and then build a workflow to update the production version if approved. Travis CI is a decent SaaS tool, Jenkins has a huge following too, if you want to stick with AWS-specific technologies you’ll be looking at CodePipeline.</p><h1 id="Miscellaneous-Bonus">13. Miscellaneous / Bonus</h1><p>These didn’t fit in nicely anywhere but are important AWS topics you should also explore:</p><p>IAM: You should really learn how to create complex IAM Policies. You would have had to do basic roles+policies for for the EC2 Instance Role and Lambda Execution Role, but there are many advanced features.<br>Networking: Create a new VPC from scratch with multiple subnets (you’ll learn a LOT of networking concepts), once that is working create another VPC and peer them together. Get a VM in each subnet to talk to eachother using only their private IP addresses.<br>KMS: Go back and redo the early EC2 instance goals but enable encryption on the disk volumes. Learn how to encrypt an AMI.</p><h1 id="Final-Thoughts">14. Final Thoughts</h1><blockquote><p>I’ve been recently recruiting for Cloud Systems Engineers and Cloud Systems Administrators. We’ve interviewed over a dozen local people with relevant resume experience. Every single person we interviewed would probably struggle starting with the DynamoDB/AutoScaling work. I’m finding there are very few people that HAVE ACTUALLY DONE THIS STUFF. Many people are familiar with the concepts, but when pushed for details they don’t have answers or admit to just peripheral knowledge. You learn SO MUCH by doing.</p></blockquote><blockquote><p>If you can’t find an excuse or get support to do this as part of your job I would find a small but flashy/impressive personal project that you can build and show off as proof of your skills. Open source it on GitHub, make professional documentation, comment as much as is reasonable, and host a demo of the website. Add links to your LinkedIn, reference it on your resume, work it into interview answers, etc. When in a job interview you’ll be able to answer all kinds of real-world questions because you’ve been-there-done-that with most of AWS’ major services.</p></blockquote><blockquote><p>I’m happy to hear any feedback. I’m considering making THIS post my flashy/impressive personal project in the form of a GitHub repo with sample code for each step, architecture diagrams, etc.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been used for AWS for a while, but always there are someone who want to touch this however don’t know how to start or what to follow. &lt;/p&gt;
&lt;p&gt;Recently I read this link, and I was doing it all through and it was a good one to start. &lt;a href=&quot;https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;So, you want to learn AWS? AKA, “How do I learn to be a Cloud Engineer?”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I won’t paste and tell you everything how to do it, but will point the ones that might block you or you might need to Google it. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/06/25/AWS-Go-Through/aws-arch.jpg&quot; title=&quot;AWS Products&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Cloud" scheme="https://morganwu277.github.io/categories/Cloud/"/>
    
      <category term="AWS" scheme="https://morganwu277.github.io/categories/Cloud/AWS/"/>
    
      <category term="Introduction" scheme="https://morganwu277.github.io/categories/Cloud/AWS/Introduction/"/>
    
    
      <category term="Cloud" scheme="https://morganwu277.github.io/tags/Cloud/"/>
    
      <category term="AWS" scheme="https://morganwu277.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>From Simple Mutex to Distributed Lock</title>
    <link href="https://morganwu277.github.io/2018/06/19/from-mutex-to-distributed-lock/"/>
    <id>https://morganwu277.github.io/2018/06/19/from-mutex-to-distributed-lock/</id>
    <published>2018-06-20T03:34:07.000Z</published>
    <updated>2019-09-12T02:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Lock</code> and <code>Mutex</code> are very basic ideas in every language and OS.<br>Recently, I think for a while about <code>Lock</code> / <code>Mutex</code>/ <code>SpinLock</code> / <code>Reentrant Lock</code> / <code>Distributed Lock</code>, and find something interesting. </p><center><img src="/2018/06/19/from-mutex-to-distributed-lock/go_lock.png" title="Golang Lock"></center><a id="more"></a><h1 id="Mutex">1. Mutex</h1><p><code>Mutex</code>(<code>Lock</code>) is easy, it locks() a critical code block and then will mutual exclusively do something, and after that will unlock() the critical code block, and everything goes on. </p><p>It keeps the <code>critical code block</code> running in the order as your wrote, but not the using the re-ordered sequence by <a href="https://en.wikipedia.org/wiki/Memory_ordering" target="_blank" rel="noopener">Memory Ordering</a>. </p><p>So what <code>Memory_ordering</code> will break then? Let’s call whatever it could break as <a href="https://en.wikipedia.org/wiki/Invariant_(computer_science)" target="_blank" rel="noopener">invariant</a> here right now.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l := sync.Mutex&#123;&#125;</span><br><span class="line">l.Lock()</span><br><span class="line"><span class="comment">// critical code block, some `invariant`(s) holds and could be broken </span></span><br><span class="line">l.Unlock()</span><br></pre></td></tr></table></figure><p>By holding the lock, means I need some <code>invariant</code>(s) hold, and probably I will <code>break</code> these <code>invariant</code>(s) in the next few lines of <code>critical code block</code>.<br>But don’t worry, after <code>Unlock()</code> invocation, that means: </p><ol><li>I longer need these <code>invariant</code>(s) anymore, and </li><li>If I broke them in the critical code block, I have already restored these <code>invariant</code>(s) </li></ol><p>So, <code>Mutex</code> is a tool to help you to <code>confidently</code> keep the <code>invariant</code> as what it should be after critical code block, by preventing the <code>memory re-order</code>, either by Compiler or by OS at the runtime. </p><h1 id="SpinLock">2. SpinLock</h1><h2 id="Compare-and-Swap">2.1. Compare and Swap</h2><p>Compare and Swap, or <code>CAS</code>, is an easy way to implement synchronization mechanism. Here is the logic:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// needs atomic implementation</span><br><span class="line"><span class="keyword">function</span> cas(p : pointer to int, old : int, new : int) returns bool &#123;</span><br><span class="line">    <span class="keyword">if</span> *p ≠ old &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    *p ← new</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>So it will compare if the current value is the old value:</p><ol><li>if not, means, <code>replaced by others</code>, i.e., <code>the lock is held by others</code>, will just return false</li><li>if yes, means, <code>not replaced by others yet</code>, i.e., <code>hold the lock</code>, will just replace using the new value</li></ol><p>Of course, the most import is the above <code>cas</code> function needs to be executed <code>atomically</code>, either using lock or implemented by hardware/CPU CompareAndSwap itself. </p><h3 id="CAS-and-Lock-Free-Data-Structure">2.1.1. CAS and Lock-Free Data Structure</h3><p>With CAS feature, we can implement some lock-free thread-safe data structure. Here is the <code>Enqueue()</code> method for a lock-free queue.<br><figure class="highlight pascal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Enqueue(x)</span><br><span class="line">q ← new <span class="keyword">record</span></span><br><span class="line">q^.value ← x</span><br><span class="line">q^.next ← NULL</span><br><span class="line">p ← tail</span><br><span class="line">oldp ← p</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line"><span class="keyword">while</span> p^.next ≠ NULL</span><br><span class="line">p ← p^.next</span><br><span class="line"><span class="comment">// iterate until p^.next == NULL, which mens, </span></span><br><span class="line"><span class="comment">// p is the very last one element, and swap, p.next = q</span></span><br><span class="line"><span class="keyword">until</span> Compare&amp;Swap(p^.next, NULL, q) </span><br><span class="line"></span><br><span class="line">Compare&amp;Swap(tail, oldp, q)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Dequeue()</span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">p ← head</span><br><span class="line"><span class="keyword">if</span> p^.next = NULL</span><br><span class="line">error queue empty</span><br><span class="line"><span class="comment">// iterate until head == p, which means, </span></span><br><span class="line"><span class="comment">// p is the very head of this queue, and swap, head point to p.next</span></span><br><span class="line"><span class="keyword">until</span> Compare&amp;Swap(head, p, p^.next)</span><br><span class="line"></span><br><span class="line">return p^.next^.value</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><ul><li>No lock used above, but the Queue data structure is thread safe </li><li><code>Enqueue</code> keeps checking the invariant <code>p.next == NULL</code>, or <code>tail</code> not changed </li><li><code>Dequeue</code> keeps checking the invariant <code>head == p</code>, or <code>head</code> not changed </li></ul><p>So, again, essentially point out that, concurrency model needs to protect <code>invariant</code> keep as it should be.</p><p>In a summary, it use a retry logic in loop until the <code>invariant</code> is satisfied, and once the <code>invariant</code> is satisfied, it immediately change the value to a new one, under the condition that, the <code>CAS</code> step is atomic!</p><p>So, if you want to implement a lock free data structure, put the <code>check-and-set</code> procedure using a Loop-CAS implementation. </p><h3 id="CAS-and-Optimistic-Lock-Update">2.1.2. CAS and Optimistic Lock Update</h3><p>With CAS feature, we can also implement optimistic lock.<br>For example, using SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Update</span> colume_A = <span class="keyword">value</span>, <span class="keyword">version</span> = previous_value+<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">version</span> = previous_value;</span><br></pre></td></tr></table></figure></p><p>to implement a <code>Compare and Swap</code> semantics. Plus a loop, we are good to implement the <code>Loop-CAS</code>, i.e, lock-free Update. </p><p>Here is an example of <code>Laravel</code>, <code>updated_at</code> will be automatically updated each time of update request to the row.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span><span class="params">($fromAccountId, $toAccountId, $balance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $fromQuery = Account::whereId($fromAccountId);</span><br><span class="line">  <span class="keyword">if</span> (! $fromQuery-&gt;exists()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidAccountException();</span><br><span class="line">  &#125;</span><br><span class="line">  $toQuery = Account::whereId($toAccountId);</span><br><span class="line">  <span class="keyword">if</span> (! $toQuery-&gt;exists()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidAccountException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// step 1, decrease money from $fromAccount</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// get the value of `updated_at`</span></span><br><span class="line">    $fromAccount = $fromQuery-&gt;first();</span><br><span class="line">    <span class="keyword">if</span> ($fromAccount-&gt;balance &lt; $amount) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InsufficientBalanceException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if updated_at is not changed in the middle </span></span><br><span class="line">    <span class="comment">// will change the Account in DB</span></span><br><span class="line">    $updated = Account::whereId($fromAccountId)</span><br><span class="line">      -&gt;where(<span class="string">'updated_at'</span>, <span class="string">'='</span>, $fromAccount-&gt;updated_at)</span><br><span class="line">      -&gt;update([<span class="string">'balance'</span> =&gt; $fromAccount-&gt;balance - $amount]);</span><br><span class="line">  &#125; <span class="keyword">while</span> (! $updated);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// step 2, add money into $toAccount</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    $toAccount = $toQuery-&gt;first();    </span><br><span class="line">    $updated = Account::whereId($toAccountId)</span><br><span class="line">      -&gt;where(<span class="string">'updated_at'</span>, <span class="string">'='</span>, $toAccount-&gt;updated_at)</span><br><span class="line">      -&gt;update([<span class="string">'balance'</span> =&gt; $toAccount-&gt;balance + $amount]);</span><br><span class="line">  &#125; <span class="keyword">while</span> (! $updated);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// step 3, save transaction record </span></span><br><span class="line">  $transaction = <span class="keyword">new</span> Transaction();</span><br><span class="line">  $transaction-&gt;from_account_id = $fromAccountId;</span><br><span class="line">  $transaction-&gt;to_account_id   = $toAccountId;</span><br><span class="line">  $transaction-&gt;amount          = $amount;</span><br><span class="line">  $transaction-&gt;save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The good thing is: lock free, with higher performance. </p><p>But the bad thing is, or not that bad, just not as good as Pessimistic Lock, it’s kind of Eventual Consistency.<br>If another thread read data in the middle time of step 2, it will read an inconsistent data state between the fromAccount and the toAccount.<br>Because during each step1, step2, step3, it ensure the invariant only inside these steps (update_at is not changed), but not across these steps (<code>toAccount.balance + fromAccount.balance == totalMoney</code>). </p><h2 id="SpinLock-Implementation-using-CAS">2.2. SpinLock Implementation using CAS</h2><p>If we put more eye into the Optimistic Lock example above, we can know step 2 is blocked by step 1, which is using a <code>Loop-CAS</code> model. </p><p>So what if we think step 1 as a <code>Lock()</code> method, which means, only step 1 is executed, step 2 could start. Here we got the idea of SpinLock() to use CAS.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spinlock</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"sync/atomic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SpinLock <span class="keyword">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSpinLock</span><span class="params">()</span> <span class="title">sync</span>.<span class="title">Locker</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lock SpinLock</span><br><span class="line"><span class="keyword">return</span> &amp;lock</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sl *SpinLock)</span> <span class="title">Lock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// keep checking, until sl == 0, i.e, nobody locks it,</span></span><br><span class="line"><span class="comment">// and then change the sl = 1, i.e, lock it</span></span><br><span class="line"><span class="keyword">for</span> !atomic.CompareAndSwapUint32((*<span class="keyword">uint32</span>)(sl), <span class="number">0</span>, <span class="number">1</span>) &#123;</span><br><span class="line">runtime.Gosched()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sl *SpinLock)</span> <span class="title">Unlock</span><span class="params">()</span></span> &#123;</span><br><span class="line">atomic.StoreUint32((*<span class="keyword">uint32</span>)(sl), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="When-to-SpinLock-When-to-Mutex">3. When to SpinLock? When to Mutex?</h1><p>Differences? </p><ul><li><code>SpinLock</code>: As you can see, SpinLock idea comes from Loop-CAS, which is <code>lock-free</code>, but kinda <code>busy checking</code>.</li><li><code>Mutex</code>: When <code>Lock()</code> invocation happens, however can’t get the lock, the thread/goroutine will be added to wait list of scheduler and thread/goroutine switch happens at this time.</li></ul><p>So <code>SpinLock</code> thinks that I should <code>very probably</code> get the lock in my scheduling CPU slot, and in a aggressive way. </p><p>What about <code>Mutex</code> scheduling? In Golang implementation, it’s:</p><ol><li>If Lock() happens and can’t get the lock, will be added to wait list,</li><li>For new young goroutine who already get the lock, will just let them run, since they already get the lock,</li><li>If the old goroutine has been wait for very long time, will give the lock to him and let him run, so it won’t wait for too long. By default, <code>starvationThresholdNs</code> is <code>1e6</code> nanoseconds (<code>1ms</code>). Normally it’s FIFO order, but if  <code>starvationThresholdNs</code> meet, will enter starvation mode. </li></ol><p>In a summary:</p><ol><li>Under <code>multi-core</code> CPU, if you think that you will quickly get the lock, then please use <code>SpinLock</code>, so that it doesn’t need context switch to get the lock and execute the code. <ol><li>the time to get the lock is short (<code>short task or low concurrency</code>)</li><li>the critical code block running time cost won’t be too much, i.e., can quickly do the shared variables computation and release the lock</li><li>the concurrency is not too much, or it will needs lots of context switches to release the lock</li></ol></li><li>Under <code>single-core</code> CPU, never use <code>SpinLock</code>, since it will try to use up the CPU slot, until context switch happens and then back to get the lock. <code>Context Switch</code> always happens in 1 Core CPU. But the above <code>SpinLock</code> code implementation is good, since it always yield the CPU to the other goroutines by using <code>runtime.Gosched()</code>. So the <code>SpinLock</code> implementation here is a bit like a <code>Mutex</code> but <code>lock-free</code>. </li><li>Under <code>multi-core</code> CPU, if you think your critical code block can’t complete in the assigned CPU slot, please try to use <code>Mutex</code>, so that it won’t waste up much time on getting the lock. <ol><li>the time to get the lock is long (<code>long task or high concurrency</code>)</li><li>the critical code block running time cost is little large, i.e, keeps computation on top of shared variables for a long time. So it’s important not to put <code>I/O</code> into critical code block.</li></ol></li></ol><p>To sum up: </p><ol><li><code>Single-core</code>: not use <code>SpinLock</code>, or at least yield the processor every time failed <code>CAS</code>. </li><li><code>Multi-core</code>, <code>short task or low concurrency</code>: use <code>SpinLock</code>.</li><li><code>Multi-core</code>, <code>long task or high concurrency</code>: use <code>Mutex</code>.</li><li><code>Don&#39;t use I/O in critical code block</code>, this should be a common knowledge. </li></ol><p>If <code>high concurrency</code> with <code>heavy I/O</code>, then better to use <code>goroutine</code> + <code>channel</code> solution.</p><h1 id="Reentrant-Lock-or-Recursive-Lock-why-not">4. Reentrant Lock or Recursive Lock, why not?</h1><p>TBD</p><h1 id="Distributed-Lock">5. Distributed Lock</h1><p>TBD</p><hr><p>Ref: </p><ol><li><a href="https://groups.google.com/forum/#!msg/golang-nuts/XqW1qcuZgKg/Ui3nQkeLV80J" target="_blank" rel="noopener">https://groups.google.com/forum/#!msg/golang-nuts/XqW1qcuZgKg/Ui3nQkeLV80J</a> </li><li><a href="https://en.wikipedia.org/wiki/Compare-and-swap" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Compare-and-swap</a> </li><li><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.8674&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.8674&amp;rep=rep1&amp;type=pdf</a></li><li><a href="https://medium.com/@aslrousta/pessimistic-vs-optimistic-locking-in-laravel-264ec0b1ba2" target="_blank" rel="noopener">https://medium.com/@aslrousta/pessimistic-vs-optimistic-locking-in-laravel-264ec0b1ba2</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Lock&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt; are very basic ideas in every language and OS.&lt;br&gt;Recently, I think for a while about &lt;code&gt;Lock&lt;/code&gt; / &lt;code&gt;Mutex&lt;/code&gt;/ &lt;code&gt;SpinLock&lt;/code&gt; / &lt;code&gt;Reentrant Lock&lt;/code&gt; / &lt;code&gt;Distributed Lock&lt;/code&gt;, and find something interesting. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/06/19/from-mutex-to-distributed-lock/go_lock.png&quot; title=&quot;Golang Lock&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Languages" scheme="https://morganwu277.github.io/categories/Languages/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/categories/Languages/Go/"/>
    
      <category term="Concurrency" scheme="https://morganwu277.github.io/categories/Languages/Go/Concurrency/"/>
    
    
      <category term="Concurrency" scheme="https://morganwu277.github.io/tags/Concurrency/"/>
    
      <category term="Lock" scheme="https://morganwu277.github.io/tags/Lock/"/>
    
      <category term="Mutex" scheme="https://morganwu277.github.io/tags/Mutex/"/>
    
      <category term="Reentrant Lock" scheme="https://morganwu277.github.io/tags/Reentrant-Lock/"/>
    
      <category term="Recursive Lock" scheme="https://morganwu277.github.io/tags/Recursive-Lock/"/>
    
      <category term="SpinLock" scheme="https://morganwu277.github.io/tags/SpinLock/"/>
    
      <category term="Distributed Lock" scheme="https://morganwu277.github.io/tags/Distributed-Lock/"/>
    
  </entry>
  
  <entry>
    <title>Setup Golang Dev Env in Sublime Text3</title>
    <link href="https://morganwu277.github.io/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/"/>
    <id>https://morganwu277.github.io/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/</id>
    <published>2018-05-30T06:46:21.000Z</published>
    <updated>2018-05-30T07:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I found I like Sublime Text more because of happy coding flow in Golang here.</p><p>Very much!!!<br>As usual, picture first!</p><center><img src="/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/gosublime.jpg" title="GoSublime with AutoCompletion"></center><a id="more"></a><h1 id="Setup-Go-Env">1. Setup Go Env</h1><ol><li>Install Go Env.<ul><li>install from official site: <a href="https://golang.org/doc/install" target="_blank" rel="noopener">https://golang.org/doc/install</a></li><li>install by homebrew in Mac: <a href="https://mnafian.github.io/2016/10/26/Install-Go-by-Homebrew-OSX.html" target="_blank" rel="noopener">https://mnafian.github.io/2016/10/26/Install-Go-by-Homebrew-OSX.html</a> </li></ul></li><li>Make sure you have <code>GOROOT</code> and <code>GOPATH</code> well-setup. </li><li>You should know basic ideas of go package mgmt, like:<ul><li><code>{src,pkg,bin}</code> under $GOPATH</li><li><code>go get</code> to download </li><li><code>go build</code> to build</li><li><code>go install</code> to install</li><li>etc …</li></ul></li></ol><h1 id="Setup-Sublime-Text-3">2. Setup Sublime Text 3</h1><ol><li>Install <a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime Text3</a></li><li>Install <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Sublime Text3 Package Control</a></li><li>Install GoSublime Package from <code>Install Package</code>, type <code>gosublime</code> there.</li></ol><p>Yes, you’re all done!</p><h1 id="AutoCompletion-in-GoSublime">3. AutoCompletion in GoSublime</h1><p>By default, GoSublime will make auto completion when using golang standard library code. If you want to make your own code able to be auto completed, you need to put compiled artifacts under <code>pkg</code> directory of your <code>$GOPATH</code>.</p><p>How to do that? Using <code>go get ./...</code>!</p><h2 id="Configuration-in-GoSublime">3.1. Configuration in GoSublime</h2><p>Using <code>super+..</code> (here we means hold super key and double hit dot key), go to <code>User Settings</code>, will open golang user settings config file.</p><p>Use the config like below, we use <code>gs_comp_lint</code> when <code>on_save</code> event happens. Of course, in <code>gs_comp_lint</code>, there is a list of commands, in which, we have <code>go get ./...</code> as one of them.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"env"</span>: &#123;</span><br><span class="line"><span class="string">"GOPAHT"</span>: <span class="string">"/Users/morganwu/Developer/workspace/go"</span>,</span><br><span class="line"><span class="string">"GOROOT"</span>: <span class="string">"/usr/local/opt/go/libexec"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// enable comp-lint, this will effectively disable the live linter</span></span><br><span class="line"><span class="string">"comp_lint_enabled"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// list of commands to run</span></span><br><span class="line"><span class="string">"comp_lint_commands"</span>: [</span><br><span class="line"></span><br><span class="line"><span class="comment">// run `go get ./...` to install all current project's pkgs</span></span><br><span class="line">&#123;<span class="string">"cmd"</span>: [<span class="string">"go"</span>, <span class="string">"get"</span>, <span class="string">"./..."</span>]&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// run `golint` on all files in the package</span></span><br><span class="line"><span class="comment">// "shell":true is required in order to run the command through your shell (to expand `*.go`)</span></span><br><span class="line"><span class="comment">// also see: the documentation for the `shell` setting in the default settings file ctrl+dot,ctrl+4</span></span><br><span class="line">&#123;<span class="string">"cmd"</span>: [<span class="string">"golint *.go"</span>], <span class="string">"shell"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// run go vet on the package</span></span><br><span class="line"><span class="comment">// &#123;"cmd": ["go", "vet"]&#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run `go install` on the package. GOBIN is set,</span></span><br><span class="line"><span class="comment">// so `main` packages shouldn't result in the installation of a binary</span></span><br><span class="line"><span class="comment">// &#123;"cmd": ["go", "install"]&#125;,</span></span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="string">"on_save"</span>: [</span><br><span class="line"><span class="comment">// run comp-lint when you save,</span></span><br><span class="line"><span class="comment">// naturally, you can also bind this command `gs_comp_lint`</span></span><br><span class="line"><span class="comment">// to a key binding if you want</span></span><br><span class="line">&#123;<span class="string">"cmd"</span>: <span class="string">"gs_comp_lint"</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Conclusion">4. Conclusion</h1><ol><li>Use <code>go get ./...</code> to recursively download and install all packages of current project.</li><li>Customize <code>on_save</code> event commands by using <code>User Settings</code>.</li></ol><hr><p>Ref: </p><ol><li><a href="https://github.com/DisposaBoy/GoSublime/blob/master/articles/golint.md" target="_blank" rel="noopener">https://github.com/DisposaBoy/GoSublime/blob/master/articles/golint.md</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I found I like Sublime Text more because of happy coding flow in Golang here.&lt;/p&gt;
&lt;p&gt;Very much!!!&lt;br&gt;As usual, picture first!&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/gosublime.jpg&quot; title=&quot;GoSublime with AutoCompletion&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Languages" scheme="https://morganwu277.github.io/categories/Languages/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/categories/Languages/Go/"/>
    
      <category term="Notes" scheme="https://morganwu277.github.io/categories/Languages/Go/Notes/"/>
    
    
      <category term="Golang" scheme="https://morganwu277.github.io/tags/Golang/"/>
    
      <category term="Development" scheme="https://morganwu277.github.io/tags/Development/"/>
    
      <category term="Setup" scheme="https://morganwu277.github.io/tags/Setup/"/>
    
  </entry>
  
  <entry>
    <title>nf_conntrack: table full, dropping packet</title>
    <link href="https://morganwu277.github.io/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/"/>
    <id>https://morganwu277.github.io/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/</id>
    <published>2018-05-26T21:07:31.000Z</published>
    <updated>2019-09-12T02:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I found an online server in monitoring channel, alert saying <code>Timtout connection</code> to xxx.xxx.com which is one of our production entrance servers and then the story began … </p><center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/packetloss.png" title="Packet Loss"></center><a id="more"></a><h1 id="Phenomenon-and-disk-issue">1. Phenomenon and disk issue?</h1><ol><li>It took me <code>over 4 seconds</code> to SSH connect to this production server. For other production servers can be connected in less than 1 second. I also notice there are 50% packet loss to the target server.</li><li>Since this entrance server is very lack of disk, initially I was thinking it’s <code>disk issue</code>, so I deleted some files and then restart the process. <code>However, doesn&#39;t help</code>. I started to think, it could be a network issue.</li><li>I noticed <code>kern.log</code> has error as next, and I steady confirmed it must be a network issue. <code>nf_conntrack: table full, dropping packets</code>. <center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/conntrack_error.jpg" title="Connection Track Error Log in Kernel"></center></li></ol><h1 id="Solve-the-problem">2. Solve the problem</h1><p>After Googling it, I knew that <code>conntrack</code> is for stateful firewall. </p><p>Pls read <a href="http://people.netfilter.org/pablo/docs/login.pdf" target="_blank" rel="noopener">Netfilter’s connection tracking system</a> if you are interested. It also include the <code>Netfilter</code> framework basic.</p><p>So, in one word, <code>conntrack</code> is created to record connection state to inspect into traffic and avoid DDoS security issue. </p><h2 id="Just-tell-me-how-to-solve-it">2.1. Just tell me how to solve it</h2><p>From the error above, we can know <code>conntrack table is full.</code> How to review the table size? By typing <code>cat /proc/sys/net/netfilter/nf_conntrack_count</code>. We can get the size.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:/<span class="comment"># cat /proc/sys/net/netfilter/nf_conntrack_count</span></span><br><span class="line">76390</span><br></pre></td></tr></table></figure></p><p>What’s the maximum size? You can get it by typing <code>cat /proc/sys/net/netfilter/nf_conntrack_max</code>. </p><p>Let’s just increase it. Recommended size: <code>CONNTRACK_MAX = RAMSIZE (in bytes) / 16384 / (ARCH / 32)</code>. Eg, I have 8GB RAM in x86_64 OS, so I made it as <code>8*1024^3/16384/2=262144</code>, which is of course larger as the <code>nf_conntrack_count</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.netfilter.nf_conntrack_max=262144</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.netfilter.nf_conntrack_max=262144"</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure></p><p>Just after that, it works. Network latency becomes good now and no packet loss. </p><h2 id="What-if-it-really-exceed-this-max-limit">2.2. What if it really exceed this max limit?</h2><ul><li>Option 1. We can remove the module of <code>state</code>, but that will make iptables not providing with full compatible APIs.</li><li>Option 2. We can use <code>RAW</code> iptable without using <code>CONNTRACK</code> feature.<br>RAW table is only applied to <code>PREROUTING</code> and <code>OUTPUT</code> chain. Since it has the highest priority (<code>raw--&gt;mangle--&gt;nat--&gt;filter</code>), so it can handle the connection before tracking mangement. Once after we handle the connection using <code>RAW</code> table, we will skip <code>NAT table</code> and <code>ip_conntract</code> handler.  </li></ul><h2 id="How-to-do-without-track-state">2.3. How to do without track state?</h2><ol start="0"><li><p>Review of IPtables, <code>iptables</code> has 4 tables and 5 chains as below graph:</p><center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/iptables-5chain-4table.png" title="Iptables 4 Tables 5 Chains"></center><ol><li>Tables: categorized by different operations to data packets.<ul><li><code>raw</code>: highest priority, only appied to <code>PREROUTING</code> and <code>OUTPUT</code> chain. When we don’t need to do NAT, we can use RAW table to increase performance. </li><li><code>mangle</code>: modify certain data packet</li><li><code>nat</code>: NAT, port mapping, address mapping</li><li><code>filter</code>: filter</li></ul></li><li>Chains: categorized by different hooks. <ul><li><code>PREROUTING</code>: packet before going to route table</li><li><code>INPUT</code>: after packet passing route table, destination is current machine</li><li><code>FORWARDING</code>: after packet passing route table, destination is not current machine</li><li><code>OUTPUT</code>: packet comes from current machine and to outside </li><li><code>POSTROUTIONG</code>: packet before going to network interface <center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/netfilter-hooks.png" title="Netfilter Hooks in Kernel"></center></li></ul></li></ol></li><li><p>Mark <code>UNTRACKED</code> connection will be accept:<br>CentOS: Change <code>/etc/sysconfig/iptables</code> file, and append <code>UNTRACKED</code> after line of <code>RH-Firewall-1-INPUT</code>.<br>To make it as <code>-A RH-Firewall-1-INPUT -m state --state RELATED,ESTABLISHED,UNTRACKED -j ACCEPT</code><br>Other Linux : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -A FORWARD -m state --state UNTRACKED -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>Use <code>raw</code> table rules on these ports. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mark destination port and source port as NOTRACK</span></span><br><span class="line">$ sudo iptables -t raw -A PREROUTING -p tcp -m multiport --dport 80,81,82 -j NOTRACK</span><br><span class="line">$ sudo iptables -t raw -A PREROUTING -p tcp -m multiport --sport 80,81,82 -j NOTRACK</span><br><span class="line">$ iptables -t raw -A OUTPUT -p tcp -m multiport --dports 80,81,82 -j NOTRACK</span><br><span class="line">$ iptables -t raw -A OUTPUT -p tcp -m multiport --sports 80,81,82 -j NOTRACK</span><br></pre></td></tr></table></figure><p>If you have only one port, use </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t raw -A PREROUTING -p tcp -m tcp --dport 80 -j NOTRACK</span><br><span class="line">$ iptables -t raw -A OUTPUT -p tcp -m tcp --sport 80 -j NOTRACK</span><br><span class="line">$ iptables -t raw -A PREROUTING -p tcp -m tcp --sport 80 -j NOTRACK</span><br><span class="line">$ iptables -t raw -A OUTPUT -p tcp -m tcp --dport 80 -j NOTRACK</span><br></pre></td></tr></table></figure></li></ol><h1 id="Conclusion">3. Conclusion</h1><ol><li><code>Timeout connection</code> can’t be a disk issue, if it’s disk issue, it will report <code>Server Internal Error</code> from monitoring probe. </li><li><code>Iptables 4 Table 5 Chains</code>: 4 table: raw–&gt;mangle–&gt;nat–&gt;filter . 5 Chain: PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING. </li><li>When we don’t need to do NAT, we can use <code>RAW table to increase performance</code>(eg. Web port). But we need extra DDoS protection method. Remember we need bidirectional <code>NOTRACK</code> setup on <code>RAW</code> table. </li><li>Use <code>sysctl -w net.netfilter.nf_conntrack_max=262144</code> to solve it immediately. Size calculation, pls refer to above equation.</li></ol><hr><p>Ref:</p><ol><li><a href="http://www.pc-freak.net/blog/resolving-nf_conntrack-table-full-dropping-packet-flood-message-in-dmesg-linux-kernel-log/" target="_blank" rel="noopener">http://www.pc-freak.net/blog/resolving-nf_conntrack-table-full-dropping-packet-flood-message-in-dmesg-linux-kernel-log/</a> </li><li><a href="http://people.netfilter.org/pablo/docs/login.pdf" target="_blank" rel="noopener">http://people.netfilter.org/pablo/docs/login.pdf</a></li><li><a href="https://wiki.mikejung.biz/Sysctl_tweaks#net.core.netdev_max_backlog" target="_blank" rel="noopener">https://wiki.mikejung.biz/Sysctl_tweaks#net.core.netdev_max_backlog</a> </li><li><a href="http://blog.51cto.com/wushank/1171768" target="_blank" rel="noopener">http://blog.51cto.com/wushank/1171768</a> </li><li><a href="http://www.361way.com/%E5%86%8D%E7%9C%8Bnf_conntrack-table-full%E9%97%AE%E9%A2%98/2404.html" target="_blank" rel="noopener">http://www.361way.com/%E5%86%8D%E7%9C%8Bnf_conntrack-table-full%E9%97%AE%E9%A2%98/2404.html</a>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I found an online server in monitoring channel, alert saying &lt;code&gt;Timtout connection&lt;/code&gt; to xxx.xxx.com which is one of our production entrance servers and then the story began … &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/packetloss.png&quot; title=&quot;Packet Loss&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="iptables" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/iptables/"/>
    
    
      <category term="iptables" scheme="https://morganwu277.github.io/tags/iptables/"/>
    
      <category term="conntrack" scheme="https://morganwu277.github.io/tags/conntrack/"/>
    
  </entry>
  
  <entry>
    <title>Accounting</title>
    <link href="https://morganwu277.github.io/2018/04/16/Accounting/"/>
    <id>https://morganwu277.github.io/2018/04/16/Accounting/</id>
    <published>2018-04-16T19:55:15.000Z</published>
    <updated>2018-05-27T17:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Personal material, please leave.">    <label for="pass">Personal material, please leave.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+g1rbHOBhs6fLVg5keVLWfaRtqNouHReNHATnKUiWpTWbgnpGAE8otMLw6qb2ibxHy5yehgcfmtx/tTWSfJ+gPjAq7ck9v/AT49KdMQz/cSZsTHAG9kw9Vzwernas+2GoqKMWAtR2H4pDOTYmmyLd/KaCl9RnSl1N39rFu+WeFkh0YIZTaxMdQC77yVDSiR5qvBBj0/CWUtvi1+KtQWgajA7mDpGyVuxQbGXE3Cow0rcD+4G3q2r4VF7EAdjfgIIg3I6Za75BKgr3e0qR37Z11nlHfcy7k2RxjiN3DrBNXG3EmQwnqiFT5eFdNH9NasyQZuAPiOppKuD8Env2gyRZMrlfO1EqOfTpGjMH5j9sgQ4ENfFGTcTEprAbMk4Jh7WoFw4uVEQo5U9KfpJdh11zLUGnKjg8GrxoAsIBzwTR3zpjRXh/uFhTwjoJkcPtJVkQ4mg9PpDzDQ++LI0LltqrBQEOveXmRmD+5aIlcVuX2sEUA2+CQoOO0069NrgOvl1TZWeiTvn2jZQb2gepr885JeTdJMlhDZ2PMCLuAfBG5fTNpI+bOqUNvNXTS7edtWGaTNoUCR9zraFwbMm2RPn6F/gOKm9jdYjt1Wxm5ZJA4zWLqm/dq8qSa/780u0MWZ9kkScFkwsOmmk9DtbGZL/WQnA8mnsMQZpP1jJjUbwwK4Feja8FQds8iynZniJI2IXepJsN1L9s/tHKnJ6tq6zWE9r9SqdXw7WvNpW4fcJPXeBn1abQQF8F68zqmMf0sXtC39hb58OXPjKMDhgDvj7iuVGzKitqKoTCRrOOzAyJpFEYcNaB3N9QYBnqlJYx7IuGxcSdsqqmLlCqbOdeLWpaWuHe/X05pxFqRg+v1hTFD9wkCmBw0ELwHsh6xaT6/5eYyvq5wVjM1A1VKR4o4EzRPkd4pNc9lf/O0DEbIdHornpYJEwXAw46e+RJjrpjwYgkk/1j61deJEWCNpZgVIC3rP4ZFtClccrDjDiUO4WlgjEJ+Hx3jhkhvoivJwAwtKWljUaHya8zZym5cGVV21IDPK/ewJy/cZMxx9chuZsDi1s/AglEZhYkqZBYUKbp64Qg86Rg8mRYMNcrPhln6qioIgpzas+YkMsSn544YdpxJLFN7mN0BVFeFJ8yUVEf09MpgPhdVb42KdjwBz47e0QGsIEtWbaODXVYMH8UyQE6E2cEi5Y3w36pIvIFkM0s7r1u7pXAeu+SEBpjNm9L07UaW2+LDCUj4yJg0ebld5P6UqrNtABmN2V4BDM9eeHzaMyzp3RpxZQn88zl0wvslJvnLi5fkzGbFLaOiNl2nnxmyKd/FmnSvVbz4OF6fSRkEyPYKaA6NHS3+lraiEOAgbOXebM1eLjGhwyyBMdfY9XJqoBM1thnSRnyXlhsyVEznVAHGc/iWZB4wQQ9wJ5QqPem6Lh7jhP93f+8VtLgW6QxnmAwTOVrMSGOGgYll8jb+0EVpZaItrB6j6w+GCjZ03/EBtWCPaJ4u8sS5Cc0zwgSkJRQB3Tg4BbNxxu0l/yPJC0f5JhYcUEBNZEFuaPhACwJ4PyNuU7ZDwpPZZ2WdMXiqNHFXRifmDX5RnJx+LyzfxPBDsL9sxXqOBlT6jh6u1Drba/cnc1M4MSxX5XcWtZh4P4ukoLJcHfHrTXImm8ATXtUYFyKuM7bHoXCnCNPtaWWZisPHwB0/BUMTTNoroMATj8y7wJzrVIoqGijfSSZiV4hmzUNXSOR00c/PhXW+1fwvxq9tCdNh/aueHzJqDgkwF9FwDACeX8iTCs5ELCdFB+VoyR2hoG8HkxBmPb8bUA/bQJDHFYuTYaNDQEST8Esdc515DfAEu9vw7WkV1tliBKJ6QtT7LIP7Gn9z34eELJ0hpv1OahGF9WGL1u8PTmwzqJfBUFj7mn/cuTSopyHt7CiLe6hZ7QXm8OnMxYaRCtMW+wcr6XGo1p/xlwS1z5u3ebRwsntqs3BhfHzYOE6zi2miG8RsKhh5sR7NHieWYJoDE/7KS5+YpjhPftBTuYNQEV9XofISyzNi/BoOdKjbuMXKFUeUebgnbjGCzD340UWiPyoIGnCKLuMly6NvX9uCd47xCwQW8ym4WpenoyG+4053nzDENddFObotvfAxPbiIVtKNj2CXQLDjF/F8jA7Wi+HO46qrzPAIFWnS1rvyueOeeglza8yjRaVzjt3KxEoWBFICNzjBt6Jl/ic65qFacpZr80oFBkvZMh5pxEx+/93jBaf1XpfS2YbkxA1j4vDC6HApAGR8xWRJ+y8kx/vdbG4UAMRj7VoBLs+QLhRTtVkejhUc1b4sBoOTA2Mx71sAHiR07+rFrm5atjfv56eyYFKmk1RK3uK4/SLj7GwxGlNZ8+vjaRhEQFOjE9BZ3dZd4rg+lbcDO1I6ta0SwmYxIj99BYsIPCuhIQxjqlrEU26ukUYi8/cVmeSPhx5FtWHQc4IPTVQiHSDBHiOT5xhQPfrG8yxSNb2gWU5PZgcDN+Exor5bn98uKkRFWVdzEM4+aFOEnIoDluHtMLE/aw7L+G0mY6Nw0s64oYuKoBapWUnu4olpL1cQZR3t2BtxkXndibGkfw9QELJyQV77AB+HSbUP0h+6KFGgpYR2sTstPx4+0iz9+kiJcBEuU3f43ryDB6j71Dt71vM6qCKjrW2fkdc9jSgnNGkquNQ8dN/03pFq9v+cYn/rN3GATYHPFB79GZNmUINaDSSaBWsrOPKHBq4WuYd5VoFjetOVV80QLlkzA4bubJ6on1rIUeeJ8FdPrfLocICrmHw91b0q0il5khvM2FapVDTNbfGVHmJpxZ2cgRZ/Mqo8U32E8fJVvBxHCyh2Ta/RcO3V6jNQS2NG7+5oHWpyOMSslka7VRX6ibXMU2SOe0PB2LOE0HetWdB0hAzVSgcjC6BL47UPFk3L9gJWdYFN3mQrB+8o4ig6jqk4JDB9FWcW4KgVdrCXxVz4osIB+qL/J1K26ip0aEteOkRVb1w+OWod0h+UhmRF6/Qf1ncoTQOOIv88wjdEoaM1603yoObmaqU0BxSoa1Rvi4HQ+YEFXxqkXCrX0ajI1TmFTjxlFuGgN+GG8bzmZg9FwtXsiucJWYVhCAmyOiW/yTw+lHSXHYhdg5zwku2aXXXc14Qsn19ngTH7GmYDBOyxv9NUEazbXizGduO1pPdXLSMvfGMOIsC0MUtioYQkn3a6zOMSAN4z/M4pIjOO9e/pQbGO5XKc3CNCMloCpN8XpTZSWVQmhdWfUWws853yNy1rml36TxrQ9wr/4s8oNmX8n0BFzxbmt7rT3uAHxnSShiNuBiDr/NyOU+64zSEUudUVq655mbht0cGDK/iFbwyBXuCQXj8vfJh59W0I+/bT/B6Nd4BrW4/fx7TEvIqClWyjls2ilqHE8ZsJqjYaC1vmXcM4bDe73NPPrbIgStND7K07pPLX3dVA2s495SZZCrs3iR3W8PEXsShXUOosAiKKE5D+rAqAmNZmPGKdPGppcrBgTf/wZFIq3UplrbOzLrDPVqP9i5CIzjoRk2LCyb0rM+z6yU92Szri2UFKZxXO+pRyQdJh7FQYzn7lk2NDZt2f+TtJyJmE9xv1J+7MnYv2cw2lLImgMUQVTaloo/xWHPKlU+kYt5Vp19aU+OiFxrTt6H65iQIikAcBxPSqyCNBZ3gReyirpzJfMM+t01deW8qqDc7yLlOUaqbUhQhRzyzwauPP2rT/E9VdBwr6MA4AJkVIXJyBU+DVvn5Gy8H7T5u7foTvniet6RBFwhOt+bIRHUBZ2JEe/2RhlR9KsAqD7GmP9HBk0uw+Yk9m+yLZYiMFMWuQEaUG11ZxV8IhxywiQii5DU80v6ygvIRkOcPibs14lL9QI9hIs2sPngDRlYXQQNDh3HuqrBnddRqh/A5G+xMWjxvoXXypcz1iojPa9uiLuchzAkvnDskASw8k44Q//2Ff+FbxZ1CqYb27QGWDbZPPCRgppokgC+avFFlidx3qSBBJOQueEbYtEFGdM5TufoCDJXUbcMO3K1CHierf2TwF4h39egwJeheQJZnUH6WIVxKdAPwtqgcY2gIlKknD6jSYrfT273n5W9G/phqCixVJ5xr0NS04ZtMt2JLfb1AkEdRcD0gv9+9ShUbMgJsshAXI62BU89PS3w3PLUFdKVz36M4W4Zy/LlllsPPmXpc3Ak8KHdzJXbwC4SY9W8bJVDRnhcoQ0TWwfCpAsXxG0mWi+jQfn5bcU60TcA/aWaWkaA9gOfaiuRwd816ZpWzJj6EFtjKgcxwywKI/PDtSCNFaTZ4j8rV2AqvgnoaBwQ3Fa43xFnHO0BL63ons9n88IRbPTVOPDzvaSzJ9egckSGSb/go0Lm5z1QBGsPZ6hsKBGOn/mUc2wMIG2SAv22EBeFCPMXoIcecJrfF6k7Pp6tLtGR6VjyIZRL5eLv+/q2iCBtVNk99y7swEEWRNPw+gssR3K/uBUHyhnpvU0NhpOWmTMTc/G8LASdM2WRoRCBPqEaw02H80exZK5SJPfo/VvQvLjcfHhSbIOEgWHYErfbMhP1oSdF6jM5ad/TheCkCG2bqikQxAE//7HkS+NjKJYAYimBshVpNLXRN9NdgECXOdVYf5csgWUIakuGSfb7EfQjQUYeEjV3ybpyDmp+Y8oBYWLSlixrcuUhCydboXx248UoW7OMZgbhG8aANgn3rCM0BjHcEzxLWsAmdsZ6R1+KW9UCgnJc8lADrnzFoVVbyGraFFsFmB8VQnWhJ7h7QwQfarY5mf5w11bnfItB1AIua+me+LVUBIAe+h+TnlQw1L48yYA/QfUqmKj1tJbaUVE4e/SrC9rfPMnuM+U5j4r/SbW9kvr9UCa45y5vUZMzfD5g1zH+/dtgXPDmTFIWQ/xc+TnTGXSImN53WG+99EgMvMDCCqYIWotNibcJ93pTDPCP0orVozVFJ1xfb2S0B+crU5qczhIOdHJ/x7t9B7oyQDT/dZtrLxYSghzGKNBfReLwQK7FAFkYX07ThnNR3+eOJCVFmKLdarUFSZxITJXR7K1MEXguJv0VNv5pyPtgOFe5uZjAqZdTct576QhoAaWkTLk8YhrFA5PCNyb4jrdK8l3jY7qjKnwpnxBwPfGsiRmOrPAlqva4XBWPwQfu3JnT2RF4lAMAth/rWv/BsYO3m88nc81H4XKbMU5ANMMyrHtuuKNVCi9BzMqqi4yun2pOxBMQA8e+WPg9LUkIMkTZtECk9ES4z6Ua8aMDYB4o07ONYD7SFLLT8oeQvYR9/ov+l/YvPUxggHSgt1mMmwJzRJtBnoYQIU/VLs1Dnn5T8hxsKaqXirm6zq5qUNyFQ9Ebygf66onxjsSAhsN10S+npvJKFghNoH85hWgrsKcf8VUTG3xS9ft99pSB/ONdL7pStbxZU5PJRWUHljU66bLgvhk01AbJ/BDyGP8z1BJrzJQ1H80xCF9Nw7AY7Tac/QEI3PTqkY/L9eImRksQMCMfsYanCk5LFcia0nbr2M2mYCpbQXuD3avZpM6LZFdJ47Ki2KLpooNtUWrY4+pRka2D+O9DHuep63Ef9JydlIaQ/hjyG7MeJgdctGjLB7RAWCM7umYiGafSfyXYB6a1N2pAAVdKc9c0lMDojvpitnN7redKGx0B8R8ux5ZpKwH9id0HRHQOLk8EenF17DnEDKosQvDlqhMGx9cUQf19HVEDHVsdlHlNyogFJyZ0juydNIibyFnB2fDZKu6g++n119g1QkoXh8hfiYIaCPFJ7LriiRbJ9us3wXN9QLxC3/eVbp+MRKx2nF6xwXH/9nO4iQUorA0HZMLtI4EK4ozChLdmBntSvpDHexXE0EPpxYnmRFdotwzmcB2qVv8vcbjVtVGT8FUNefAMFNsHsdedjGQ0DzZEunOoxdduul4uX17QJEQ2JK5R0NWviIjfw/iNd2CaBOU0g7mBlD9W7Dh8zDS4PMpRH2668R4/bzdd3cSQuZu4RyNSef95rjDk5Az18f+kAYosAlmbTrEg7gY8Ma6xqM7Tj2fGyBfzHZDYOp6S75iaRHKGNPnpuhTgsgiMmcvxCvMWnmJuYOepVyKM5wTUWR3kDULZOtrwX8ULltSrq8KTjLSaNotJxANasCX759ctrVqli057gs1yJS7HUykHu6g0j9T435NZ2GOYURK+jSvYuuUAGlYpeSuXyiQxV5UjDhXnS6Hnjzk2SaldBdWRGJAQBPbADuwz20HJNR0E5ijJNu83cQP1KrALWemRzgAIG7o9A5//UU0uD5hUOvb88sMppJ9RLPDfscUUobpxhY90q6tJrHjtmbj+oYGTs7m+2mg/BcLPaUUNZpAXxdGSR2wLFrp/aqx+8DbdD35Jk86EGZKMPnGk8g2sBRpl0LsgitFX+Q7ny/46zNyY0x+1MKKaywXal3u4aBhFRO/mRGEEepeLQS0Th6khO4OGhV5cEMXHzyHHgn/TDg4A5/OnHm7U9Msyn7t4gJvNgEATGwWTQISRAa5myXXDxa2uUx4Vn7NYtx3Zb32qfv7T2zECSrQdR1XVz3Pj3NYXIWBdsRocbkD3TsEW2CicG8EfNX8SnVgPhkYehvhh8y8l/9iyVWLLtjbKmuX9TNf04t0PihsipAA2h4y5ACHbpCzWoVEUcKyUKouTPGzRDQZHBxa4JhEO1qJsL/JEUKNEGe1GQmdoCOvkrsJG7HU3Udb6S14+H7BJqPeSAVk90xs2CPoSUHWGZgGLGFwgGRTS7eqhNjjpMv5j4FJC+QqZddpCqzMoLBSVYVAJKDenU1poM6N4mUML8Lr707C2bvv1JRqc6Hr6EnKJw=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Personal material, please leave.
    
    </summary>
    
      <category term="Incorporation" scheme="https://morganwu277.github.io/categories/Incorporation/"/>
    
      <category term="Accounting" scheme="https://morganwu277.github.io/categories/Incorporation/Accounting/"/>
    
    
      <category term="Accouting" scheme="https://morganwu277.github.io/tags/Accouting/"/>
    
      <category term="Tax" scheme="https://morganwu277.github.io/tags/Tax/"/>
    
  </entry>
  
  <entry>
    <title>Go Summary</title>
    <link href="https://morganwu277.github.io/2018/03/02/Golang-Summary/"/>
    <id>https://morganwu277.github.io/2018/03/02/Golang-Summary/</id>
    <published>2018-03-02T05:12:46.000Z</published>
    <updated>2018-03-02T05:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a post of Golang Summary, for me to check out long time not writing program using Golang since 3 years ago. </p><center><img src="/2018/03/02/Golang-Summary/golangroutines.png" title="Golang Routine+Channel"></center><a id="more"></a><h1 id="Package">1. Package</h1><h2 id="Basic">1.1. Basic</h2><ul><li>Every Go program is made up of packages. Which means, the <code>basic organization unit</code> of Go program is <code>package</code>, not file. </li><li>Programs start running in package <code>main</code>.</li><li>By convention, the package name is the same as the last element(<code>sub-package</code>) of the import path.<br>For instance, the <code>math/rand</code> package comprises files that begin with the statement <code>package rand</code>. </li><li><p>Import packages using <code>factored import statement</code>. (variables declaration can also use <code>factored declare</code>) </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Now you have %g problems."</span>, math.Sqrt(<span class="number">7</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Not using next statements, since they should be highly in a <a href="https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29" target="_blank" rel="noopener">cohesion</a>: </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br></pre></td></tr></table></figure></li><li><p>By convention, a name starts with capital letter will be exported. Eg. <code>Pi</code> in <code>math</code> package.<br>This means, when using <code>other package functions/fields</code>, it always starts with <code>CapitalLetters</code>. </p></li></ul><h1 id="Functions">2. Functions</h1><h2 id="Basic-1">2.1. Basic</h2><ul><li><p>Two or more <code>consecutive</code> named function parameters share a same type, we can omit the type all but the last. <code>x int, y int</code> can be shorted to <code>x, y int</code>. Eg. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Naked return statements</code> should be used in only short function. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Variables">3. Variables</h1><h2 id="Basic-2">3.1. Basic</h2><ul><li><p><code>var</code> statement can be a package/function level</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span> <span class="comment">// variables type can be taken from the initializer  </span></span><br><span class="line">fmt.Println(i, j, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Short Variable</code> can only be used inside a function using <code>:=</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">var i, j int = 1, 2</span><br><span class="line">k := 3              // short variable </span><br><span class="line">c, python, java := true, false, &quot;no!&quot; // short variable </span><br><span class="line"></span><br><span class="line">fmt.Println(i, j, k, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Types">4. Types</h1><h2 id="Basic-3">4.1. Basic</h2><ul><li><p>Go Basic Types</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> <span class="comment">// alias for uint8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rune</span> <span class="comment">// alias for int32</span></span><br><span class="line">     <span class="comment">// represents a Unicode code point</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></span><br></pre></td></tr></table></figure><p>The <code>int</code>, <code>uint</code>, and <code>uintptr</code> types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. Normally we use <code>int</code> unless you have a specific reason to use a sized or unsigned integer type. </p></li><li><code>Zero Values</code>: Variables will be assigned to Zero Values if no explicit initial value. Eg. <code>0</code> for numeric types, <code>false</code> for boolean type,  <code>&quot;&quot;</code> for strings. </li><li><code>T(v)</code> will convert value V to type T. <code>Explicit Type Conversion is required in Go</code>. </li></ul><h1 id="Constants">5. Constants</h1><h2 id="Basic-4">5.1. Basic</h2><ul><li><code>const</code> is used before <code>Constants</code> declaration. Type can be only <code>character/string/boolean/numeric values</code>. </li></ul><h1 id="Flow-control-statements-For-If-Switch-Defer">6. Flow control statements: For/If/Switch/Defer</h1><h2 id="Basic-5">6.1. Basic</h2><ul><li><p>For loop, the <code>init</code> and <code>post</code> statements are optional: </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> ; sum &lt; <span class="number">1000</span>; &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>for</code> is Go’s <code>while</code> without <code>;</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;  <span class="comment">// just is while</span></span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>infinite loop</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>for loop with range</code>, can iterate the slices. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123; <span class="comment">// return with 2 values: index and corresponding value copy of data in that index</span></span><br><span class="line">fmt.Printf(<span class="string">"2**%d = %d\n"</span>, i, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123; <span class="comment">// return only the index</span></span><br><span class="line">pow[i] = <span class="number">1</span> &lt;&lt; <span class="keyword">uint</span>(i) <span class="comment">// == 2**i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow &#123; <span class="comment">// ignore the index, only need the value</span></span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>one short statement</code> before if condition, to make statements more closed for readable</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123; <span class="comment">// only one statement is allowed here</span></span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%g &gt;= %g\n"</span>, v, lim)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// After this if-else statement, v is not accessible any more</span></span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>switch</code> without break statement, but still can provide with a <code>short statement</code> before. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"Go runs on "</span>)</span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123; <span class="comment">// allow one short statement</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">fmt.Println(<span class="string">"OS X."</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">fmt.Println(<span class="string">"Linux."</span>) <span class="comment">// no need for break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// freebsd, openbsd,</span></span><br><span class="line"><span class="comment">// plan9, windows...</span></span><br><span class="line">fmt.Printf(<span class="string">"%s."</span>, os)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>switch without condition</code> is the same as <code>switch true</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</span><br><span class="line">fmt.Println(<span class="string">"Good morning!"</span>)</span><br><span class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</span><br><span class="line">fmt.Println(<span class="string">"Good afternoon."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"Good evening."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>defer</code> function will be called once its enclosed function is returned. However, <code>deferred function parameters</code> will be eval inside the enclosed functions <code>immediately</code> at its declaration position. A stack will be generated when there is <code>defer</code> statements in go program and will be popped out using LIFO sequence. </p></li></ul><h1 id="Data-Structure-Pointer-Struct-Slice-Map">7. Data Structure: Pointer/Struct/Slice/Map</h1><h2 id="Basic-6">7.1. Basic</h2><ul><li><code>Pointer</code>: <code>*T</code> is pointer used to point to <code>type T</code>. <code>&amp; operator</code> will create a pointer that point to existing value. <code>* operator</code> will eval the value of the target variable. </li><li><p><code>Struct</code>: collections of fields. We can use <code>(*p).X</code> to access <code>struct pointer p</code>‘s field <code>X</code>. To make it simple, we can just use <code>p.X</code>, which is implicit dereference. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ( <span class="comment">// use factored declare statements</span></span><br><span class="line">v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// has type Vertex</span></span><br><span class="line">v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 is implicit</span></span><br><span class="line">v3 = Vertex&#123;&#125;      <span class="comment">// X:0 and Y:0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// has type *Vertex</span></span><br><span class="line">fmt.Println(v1, p, v2, v3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>[n]T</code> means <code>an array of type T with n size</code>. E.g, <code>var a [10]int</code>, means <code>int a[10]</code> in Java. </p></li><li><code>[]T</code> means <code>a slice of type T with dynamic size</code>. E.g, <code>a[1:4]</code> create a slice, containing elements in a indexed from 1 to 3. </li><li><code>Slices does not store data, just describe a segment of the underlying array. They are more of array&#39;s references</code>. </li><li>Array syntax and slice syntax: <code>[3]bool{true, true, false}</code> is an array, <code>[]bool{true, true, false}</code> is an anonymous array but then referenced using a slice.</li><li><p><code>Slice default upper/lower boundary is array length/0.</code> E.g</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">// next 4 slices are equal </span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">a[:<span class="number">10</span>]</span><br><span class="line">a[<span class="number">0</span>:]</span><br><span class="line">a[:]</span><br></pre></td></tr></table></figure></li><li><p><code>nil slice</code>: capacity/length is 0, and there is not underlying array for this slice. E.g, <code>var s []int</code>. </p></li><li><p>Use <code>make([]slice, len, cap)</code> to create a slice. E.g, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a := make([]int, 5)  // len(a)=5</span><br><span class="line">b := make([]int, 0, 5) // len(b)=0, cap(b)=5</span><br></pre></td></tr></table></figure></li><li><p>Append elements to a slice and return with a <code>new generated slice</code>: <code>func append(s []T, vs ...T) []T</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">0</span>)<span class="comment">// append works on nil slices.</span></span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)<span class="comment">// The slice grows as needed.</span></span><br><span class="line">printSlice(s)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// We can add more than one element at a time.</span></span><br><span class="line">printSlice(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>map[KeyType]ValueType</code> is used to map keys to values.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Lat, Long <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</span><br><span class="line">m[<span class="string">"Bell Labs"</span>] = Vertex&#123;</span><br><span class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123; <span class="comment">// styntax is like struct </span></span><br><span class="line"><span class="string">"Bell Labs"</span>: Vertex&#123;</span><br><span class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"Google"</span>: Vertex&#123;</span><br><span class="line"><span class="number">37.42202</span>, <span class="number">-122.08408</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123; </span><br><span class="line"><span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;, <span class="comment">// Omit the Vertex type </span></span><br><span class="line"><span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m[<span class="string">"Bell Labs"</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>map basic operations</code>:</p><ul><li>insert/update key: <code>m[key] = elem</code></li><li>get key: <code>elem = m[key]</code></li><li>delete key: <code>delete(m, key)</code></li><li>double assignment to check key existence: <code>elem, ok := m[key]</code> // ok will be true if exist, otherwise false</li><li></li></ul></li><li><code>Function Closure</code>: A closure is a function value that references variables from outside its body.<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// returns a closure</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// Each closure is bound to its own sum variable</span></span><br><span class="line">sum += x</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">pos, neg := adder(), adder()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(</span><br><span class="line">pos(i),</span><br><span class="line">neg(<span class="number">-2</span>*i),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Method-and-Interface">8. Method and Interface</h1><h2 id="Basic-7">8.1. Basic</h2><ul><li><p><code>Method</code>: A function with a special <code>receiver</code> argument.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123; <span class="comment">// receiver's type declaration and method declaration must be in the same package</span></span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(v.Abs()) <span class="comment">// likes v receives the message of Abs, v is the receiver </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Interface</code>: An <code>interface type</code> is defined as a set of method signatures. As long as some data structure implements all the methods declared int this <code>interface type</code>, it is an instance of this <code>interface type.</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">Abs() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a Abser</span><br><span class="line">f := MyFloat(-math.Sqrt2)</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">a = f  <span class="comment">// a MyFloat implements Abser, since MyFloat does have a method `Abs()`</span></span><br><span class="line">a = &amp;v <span class="comment">// a *Vertex implements Abser, since *Vertex does have a method `Abs()`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// In the following line, v is a Vertex (not *Vertex)</span></span><br><span class="line"><span class="comment">// and does NOT implement Abser.</span></span><br><span class="line">a = v</span><br><span class="line"></span><br><span class="line">fmt.Println(a.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(-f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Interfaces are implemented implicitly. Implicit interfaces decouple the definition of an interface from its implementation, which could then appear in any package without prearrangement. In a word, you can define the interface/standard, everyone can implement it. This is a <code>pluggable thought into a language</code>.</p></li><li><code>Empty Interface</code>: interfaces which has 0 methods. They can be used to <code>process un-predictable</code> types. Eg. fmt.Println() accept <code>interface{}</code> parameters.</li><li><p><code>Type assertion</code>: provides access to an interface value’s underlying concrete value. using <code>t := i.(T)</code> to assert <code>interface i</code> does have a concrete <code>type T</code> and assign this type’s underly value to <code>variable t</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">"hello"</span></span><br><span class="line"></span><br><span class="line">s := i.(<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line">s, ok := i.(<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(s, ok)</span><br><span class="line"></span><br><span class="line">f, ok := i.(<span class="keyword">float64</span>) <span class="comment">// no panic here, since we still have ok as false and f will be nil value of float64/type T</span></span><br><span class="line">fmt.Println(f, ok)</span><br><span class="line">f = i.(<span class="keyword">float64</span>) <span class="comment">//  panic: interface conversion: interface &#123;&#125; is string, not float64</span></span><br><span class="line">fmt.Println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Type switches</code>: permits several type assertions in series.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> T:</span><br><span class="line">    <span class="comment">// here assert v has type T</span></span><br><span class="line"><span class="keyword">case</span> S:</span><br><span class="line">    <span class="comment">// here assert v has type S</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// no match; here v has the same type as i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For Example, </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">fmt.Printf(<span class="string">"Twice %v is %v\n"</span>, v, v*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">"%q is %v bytes long\n"</span>, v, <span class="built_in">len</span>(v))</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Printf(<span class="string">"I don't know about type %T!\n"</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">do(<span class="number">21</span>) <span class="comment">// output: Twice 21 is 42</span></span><br><span class="line">do(<span class="string">"hello"</span>) <span class="comment">// output:  "hello" is 5 bytes long</span></span><br><span class="line">do(<span class="literal">true</span>) <span class="comment">// output: I don't know about type bool!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Stringer</code> interface in <code>fmt</code> package. It has a method <code>String() string</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v (%v years)"</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := Person&#123;<span class="string">"Arthur Dent"</span>, <span class="number">42</span>&#125;</span><br><span class="line">z := Person&#123;<span class="string">"Zaphod Beeblebrox"</span>, <span class="number">9001</span>&#125;</span><br><span class="line">fmt.Println(a, z) <span class="comment">// output: Arthur Dent (42 years) Zaphod Beeblebrox (9001 years)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>error</code> interface in <code>fmt</code> package. it has a method <code>Error() string</code>. This is the so-called customized exception. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="keyword">float64</span> <span class="comment">// we can wrap the value itself into this error and print info related to this obj inside the Error() method, this is a good practice</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"cannot Sqrt negative number: %v"</span>, <span class="keyword">float64</span>(e))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, ErrNegativeSqrt(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(<span class="keyword">float64</span>(x)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(Sqrt(<span class="number">2</span>))  <span class="comment">// output: 1.4142135623730951 &lt;nil&gt;</span></span><br><span class="line">fmt.Println(Sqrt(<span class="number">-3</span>)) <span class="comment">// output: 0 cannot Sqrt negative number: -3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Concurrency">9. Concurrency</h1><h2 id="Basic-8">9.1. Basic</h2><ul><li><code>Goroutine</code>: lightweight thread managed by the Go runtime. <code>go f(x, y, z)</code> starts a new goroutine running function f(x,y,z). The evaluation of parameters happens immediately, but execution happens later. </li><li><p><code>Chanel</code>: typed conduit through which you can send and receive values with the channel operator, <code>&lt;-</code>.<br><strong>The data flows in the direction of the arrow</strong>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">// Send v to channel ch.</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// Receive from ch, and</span></span><br><span class="line">           <span class="comment">// assign value to v.</span></span><br></pre></td></tr></table></figure><p>Create a channel before using it: <code>ch := make(chan int)</code>. </p></li><li><p><code>Range/Close a channel</code>, use <code>close(ch)</code> from producer side to close a channel to tell the receiver no more items produced.<br><code>v, ok := &lt;-ch</code>, the <code>ok</code> will be false if <code>ch is already closed</code>.<br><code>for i := range c</code> will get value from channel <code>continuously</code> until it’s closed  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">x, y := <span class="number">0.0</span>, <span class="number">1.0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">c &lt;- x</span><br><span class="line">x, y = y, x+y</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">float64</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123; </span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>select statement</code>: select statement lets a goroutine wait on multiple communication operations. It <code>blocks</code> until one of its cases can run, then it executes that case. It chooses <code>one at random if multiple are ready</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;<span class="comment">// this is a inf loop </span></span><br><span class="line"><span class="keyword">select</span> &#123;<span class="comment">// implicitly we do have a goroutine here, it waits on multiple channels</span></span><br><span class="line"><span class="keyword">case</span> c &lt;- x:</span><br><span class="line">x, y = y, x+y</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line">fmt.Println(<span class="string">"quit"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// this is quit condition for this inf loop</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="comment">// 1st goroutine </span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(&lt;-c)</span><br><span class="line">&#125;</span><br><span class="line">quit &lt;- <span class="number">0</span> <span class="comment">// removing this line will get this program stuck</span></span><br><span class="line">&#125;()</span><br><span class="line">fibonacci(c, quit)<span class="comment">// 2nd goroutine, block next all statements</span></span><br><span class="line">quit &lt;- <span class="number">1</span> <span class="comment">// this statement will never be executed since the above statement blocks if `quit &lt;- 0` is removed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Time elapsed channel</code>: <code>time.Tick</code> and <code>time.After</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tick := time.Tick(<span class="number">1000</span> * time.Millisecond) <span class="comment">// every 1 second, get a value from this channel</span></span><br><span class="line">boom := time.After(<span class="number">5000</span> * time.Millisecond) <span class="comment">// after 5 second, get a value from this channel</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> x := &lt;-tick:</span><br><span class="line">fmt.Println(<span class="string">"tick."</span>, x)</span><br><span class="line"><span class="keyword">case</span> x := &lt;-boom:</span><br><span class="line">fmt.Println(<span class="string">"BOOM!"</span>, x)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">//fmt.Println("    .")</span></span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">01</span> +<span class="number">0000</span> UTC m=+<span class="number">1.000000001</span></span><br><span class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">02</span> +<span class="number">0000</span> UTC m=+<span class="number">2.000000001</span></span><br><span class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">03</span> +<span class="number">0000</span> UTC m=+<span class="number">3.000000001</span></span><br><span class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">04</span> +<span class="number">0000</span> UTC m=+<span class="number">4.000000001</span></span><br><span class="line">BOOM! <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">05</span> +<span class="number">0000</span> UTC m=+<span class="number">5.000000001</span></span><br></pre></td></tr></table></figure></li><li><p><code>range/close</code> or <code>select/quit channel</code> or <code>Tick/After</code> to do the goroutine synchronization using channel.</p></li><li><code>sync.Mutex</code> has <code>Lock/Unlock</code> which can also provide <code>shared-memory mechanism synchronization</code>.<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SafeCounter is safe to use concurrently.</span></span><br><span class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">v   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">mux sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inc increments the counter for the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Inc</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">c.mux.Lock()</span><br><span class="line"><span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></span><br><span class="line">c.v[key]++</span><br><span class="line">c.mux.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value returns the current value of the counter for the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c.mux.Lock()</span><br><span class="line"><span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></span><br><span class="line"><span class="keyword">defer</span> c.mux.Unlock()</span><br><span class="line"><span class="keyword">return</span> c.v[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := SafeCounter&#123;v: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> c.Inc(<span class="string">"somekey"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(c.Value(<span class="string">"somekey"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Build">10. Build</h1><h2 id="use-golang-docker-image-to-build">10.1. use golang docker image to build</h2><p>Use <code>golang:1.9</code> to build go program<br><a href="https://github.com/docker-library/docs/tree/master/golang#compile-your-app-inside-the-docker-container" target="_blank" rel="noopener">https://github.com/docker-library/docs/tree/master/golang#compile-your-app-inside-the-docker-container</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">APPNAME=passport</span><br><span class="line">BUILD_PATH=/usr/src/<span class="variable">$&#123;APPNAME&#125;</span></span><br><span class="line">GOLANG_IMG=<span class="string">"golang:1.9"</span></span><br><span class="line"></span><br><span class="line">docker run --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:<span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>"</span> -w <span class="variable">$&#123;BUILD_PATH&#125;</span> -e GOPATH=<span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>"</span> -e GOBIN=<span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>/bin"</span> -e CGO_ENABLED=0 -e GOOS=linux -e GOARCH=amd64 golang:1.9 go get -v &amp;&amp; go build -a -installsuffix cgo \</span><br><span class="line">-ldflags <span class="string">"-s -w"</span> \</span><br><span class="line">-o <span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>/<span class="variable">$&#123;APPNAME&#125;</span>"</span> .</span><br></pre></td></tr></table></figure></p><hr><p>References:</p><ul><li><a href="https://tour.golang.org/" target="_blank" rel="noopener">A Tour of Go</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a post of Golang Summary, for me to check out long time not writing program using Golang since 3 years ago. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/03/02/Golang-Summary/golangroutines.png&quot; title=&quot;Golang Routine+Channel&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Languages" scheme="https://morganwu277.github.io/categories/Languages/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/categories/Languages/Go/"/>
    
      <category term="Notes" scheme="https://morganwu277.github.io/categories/Languages/Go/Notes/"/>
    
    
      <category term="Book" scheme="https://morganwu277.github.io/tags/Book/"/>
    
      <category term="Reading Notes" scheme="https://morganwu277.github.io/tags/Reading-Notes/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Magics</title>
    <link href="https://morganwu277.github.io/2018/01/18/Nginx-Magics/"/>
    <id>https://morganwu277.github.io/2018/01/18/Nginx-Magics/</id>
    <published>2018-01-18T21:32:34.000Z</published>
    <updated>2018-05-26T21:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2018/01/18/Nginx-Magics/nginx.png" title="Nginx Load Balancer"></center><p>This is a post for Nginx Magics and for you to quick get the configurations.<br>I put the links here to refer and put my own thoughts and comments.  </p><p>For more nginx settigns, pls refer my another markdown list:<br><a href="https://github.com/morganwu277/code_snippets/blob/master/nginx.md" target="_blank" rel="noopener">https://github.com/morganwu277/code_snippets/blob/master/nginx.md</a> </p><a id="more"></a><h1 id="Security">1. Security</h1><h2 id="Rate-Limiting">1.1. Rate Limiting</h2><p>Rate Limiting for hackers or crawlers but not search engines. </p><p>Refs: </p><ul><li>English: <ul><li><a href="https://www.nginx.com/blog/rate-limiting-nginx/" target="_blank" rel="noopener">https://www.nginx.com/blog/rate-limiting-nginx/</a> </li><li><a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_limit_req_module.html</a> </li><li><a href="https://lincolnloop.com/blog/rate-limiting-nginx/" target="_blank" rel="noopener">https://lincolnloop.com/blog/rate-limiting-nginx/</a> </li></ul></li><li>Chinese: <ul><li><a href="http://www.cnblogs.com/chenpingzhao/p/4971308.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenpingzhao/p/4971308.html</a></li></ul></li></ul><p>I don’t want to explain more on the rate limiting of Nginx, since it’s already there.</p><p>However, only simple rate limiting will comes with an issue: multiple users from one common gateway could be blocked, for example, they are in University network and shared a common external gateway IP address.</p><p>From server side’s angle, it can’t just use the IP address to do the rate limiting. Since there could be multiple none hackers under this same IP address.</p><p>All in all, only using IP address to do rate limiting is trivial and not safe. We should also combine with User-Agent or other fields and adapt this dynamically.<br>Also, the hackers/crawlers can still use VPN to avoid the so-called IP-based rate limiting. </p><p>We should have a Machine Learning algorithm that can dynamically output the rate limiting model and apply it to online rate limiting. Especially using tree-based model. </p><h2 id="IP-Address-Blocking-Behind-Proxies">1.2. IP Address Blocking Behind Proxies</h2><p>Use next inside your <code>location /</code> section:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">set_real_ip_from 103.21.244.0/22;</span><br><span class="line">set_real_ip_from 103.22.200.0/22;</span><br><span class="line">set_real_ip_from 103.31.4.0/22;</span><br><span class="line">set_real_ip_from 104.16.0.0/12;</span><br><span class="line">set_real_ip_from 108.162.192.0/18;</span><br><span class="line">set_real_ip_from 131.0.72.0/22;</span><br><span class="line">set_real_ip_from 141.101.64.0/18;</span><br><span class="line">set_real_ip_from 162.158.0.0/15;</span><br><span class="line">set_real_ip_from 172.64.0.0/13;</span><br><span class="line">set_real_ip_from 173.245.48.0/20;</span><br><span class="line">set_real_ip_from 188.114.96.0/20;</span><br><span class="line">set_real_ip_from 190.93.240.0/20;</span><br><span class="line">set_real_ip_from 197.234.240.0/22;</span><br><span class="line">set_real_ip_from 198.41.128.0/17;</span><br><span class="line">set_real_ip_from 2400:cb00::/32;</span><br><span class="line">set_real_ip_from 2405:8100::/32;</span><br><span class="line">set_real_ip_from 2405:b500::/32;</span><br><span class="line">set_real_ip_from 2606:4700::/32;</span><br><span class="line">set_real_ip_from 2803:f800::/32;</span><br><span class="line">set_real_ip_from 2c0f:f248::/32;</span><br><span class="line">set_real_ip_from 2a06:98c0::/29;</span><br><span class="line"></span><br><span class="line">   real_ip_header  X-Forwarded-For; </span><br><span class="line">   real_ip_recursive on;</span><br><span class="line">   deny 70.103.56.2;</span><br><span class="line">   deny 200.159.140.37;</span><br><span class="line">   deny 140.207.116.178;</span><br><span class="line">   deny 221.4.34.18;</span><br><span class="line">   deny 74.79.253.186;</span><br><span class="line">   deny 204.11.108.89;</span><br><span class="line">   deny 204.11.108.94;</span><br><span class="line">   deny 204.236.220.196;</span><br><span class="line">   deny 12.229.60.66;</span><br><span class="line">   deny 73.181.227.5;</span><br></pre></td></tr></table></figure></p><p>For more details: <a href="http://nginx.org/en/docs/http/ngx_http_realip_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_realip_module.html</a> </p><h1 id="Proxy">2. Proxy</h1><h2 id="Internet-Proxy">2.1. Internet Proxy</h2><p>To avoid network restrictions, such as <a href="https://en.wikipedia.org/wiki/Great_Firewall" target="_blank" rel="noopener">GFW</a>. </p><p><strong>REFs</strong></p><ul><li>Nginx Image comes from:<br><a href="https://cdn-1.wp.nginx.com/wp-content/uploads/2016/03/Python-NGINX-architecture-1024x596.png" target="_blank" rel="noopener">https://cdn-1.wp.nginx.com/wp-content/uploads/2016/03/Python-NGINX-architecture-1024x596.png</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2018/01/18/Nginx-Magics/nginx.png&quot; title=&quot;Nginx Load Balancer&quot;&gt;&lt;/center&gt;

&lt;p&gt;This is a post for Nginx Magics and for you to quick get the configurations.&lt;br&gt;I put the links here to refer and put my own thoughts and comments.  &lt;/p&gt;
&lt;p&gt;For more nginx settigns, pls refer my another markdown list:&lt;br&gt;&lt;a href=&quot;https://github.com/morganwu277/code_snippets/blob/master/nginx.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/morganwu277/code_snippets/blob/master/nginx.md&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Nginx" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://morganwu277.github.io/tags/Nginx/"/>
    
      <category term="Rate Limiting" scheme="https://morganwu277.github.io/tags/Rate-Limiting/"/>
    
      <category term="Machine Learning" scheme="https://morganwu277.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Install Percona Monitoring and Management System</title>
    <link href="https://morganwu277.github.io/2017/12/26/Install-Percona-Monitoring-and-Management-System/"/>
    <id>https://morganwu277.github.io/2017/12/26/Install-Percona-Monitoring-and-Management-System/</id>
    <published>2017-12-26T19:03:06.000Z</published>
    <updated>2018-05-26T21:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was exhausted about the <a href="https://bugs.mysql.com/bug.php?id=81899" target="_blank" rel="noopener">Page Cleaner in MySQL</a> issue, and in the end I just surrendered and installed this PMM and keep on monitoring. I thought I was able to solve everything via simple <code>show innodb engine status</code> and <code>show global variables/status</code>, etc.</p><p>But the reality showed me as a fool of wasting time on just viewing numbers flipping. I learned one thing from this: never try to hack it before you really fully master it, which is only <code>WAST OF TIME</code>. Time really matters.</p><p>This is a quick notes for you to quickly install PMM and start monitoring your MySQL.</p><p>As usual, picture always show first!</p><center><img src="/2017/12/26/Install-Percona-Monitoring-and-Management-System/mysql-pmm.png" title="Percona Monitoring and Management System"></center><p>Beautiful, uh? <span class="github-emoji" title="grinning" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8">&#x1f600;</span></p><a id="more"></a><h1 id="Architecture-Diagram">1. Architecture Diagram</h1><h1 id="Install-PMM-Server">2. Install PMM Server</h1><p>Server could install to any server, to be able to aggregate metrics and show web page with diagrams.</p><h2 id="Install-using-Docker">2.1. Install using Docker</h2><p>Before this you need a docker environment and add current user as docker group.<br>Please refer to: <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install and Use Docker on Ubuntu 16.04</a><br>After you install Docker in Ubuntu, please add <code>--iptables=false</code> to <code>ExecStart=/usr/bin/dockerd -H fd://</code> in file <code>/etc/systemd/system/multi-user.target.wants/docker.service</code>, or you can’t use UFW to control iptable rules as you would like <span class="github-emoji" title="disappointed_relieved" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8">&#x1f625;</span>. For more info, please review:<br><a href="https://github.com/moby/moby/issues/4737#issuecomment-232362106" target="_blank" rel="noopener">https://github.com/moby/moby/issues/4737#issuecomment-232362106</a></p><p>But from my own experiment, it shows me as if I configure <code>net.ipv4.ip_forward=1</code> in <code>/etc/sysctl.conf</code>, then it means IP FORWARD will be open itself, but not by Docker, so docker( <code>&gt; 1.13.x</code> ) won’t add a <code>iptables -P FORWARD DROP</code> by default, since Docker itself will think, FORWARD is not opened by me, if it’s opened by default, then it’s mean to be open there and Docker itself won’t change that behavior. </p><p>For other ways to install PMM server, eg. AWS, please refer to: <a href="https://www.percona.com/doc/percona-monitoring-and-management/deploy/index.html#installing-pmm-server" target="_blank" rel="noopener">Installing PMM Server</a></p><p>Let start! </p><ol><li><p>Pull the image of <code>pmm-server</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull percona/pmm-server:latest</span><br></pre></td></tr></table></figure></li><li><p>Create <code>pmm-data</code> container for persistent PMM data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker create \</span><br><span class="line">   -v /opt/prometheus/data \</span><br><span class="line">   -v /opt/consul-data \</span><br><span class="line">   -v /var/lib/mysql \</span><br><span class="line">   -v /var/lib/grafana \</span><br><span class="line">   --name pmm-data \</span><br><span class="line">   percona/pmm-server:latest /bin/<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>Launch PMM Server</p></li></ol><p><code>METRICS_RETENTION</code> only keeps 1 week data.<br><code>METRICS_MEMORY</code> will make sure pmm server use up to <code>393216*3/2KB</code> = 576MB. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 8081:80 \</span><br><span class="line">  -eMETRICS_RETENTION=168h \</span><br><span class="line">  -eMETRICS_MEMORY=393216 \</span><br><span class="line">  --volumes-from pmm-data \</span><br><span class="line">  --name pmm-server \</span><br><span class="line">  --restart always \</span><br><span class="line">  percona/pmm-server:latest</span><br></pre></td></tr></table></figure><p>   the above <code>-p 8081:80</code> maps local 8081 port to container 80 port. </p><p>After above steps, you open your <code>${IP}:8081</code>, you should be able to see start page of <code>Percona Monitoring and Management</code>. </p><center><img src="/2017/12/26/Install-Percona-Monitoring-and-Management-System/pmm-init.png" title="Percona Monitoring and Management Initial Page"></center><p>For more, please refer to:<br><a href="https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.setting-up.html#additional-parameters" target="_blank" rel="noopener">https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.setting-up.html#additional-parameters</a></p><h1 id="Install-PMM-Client">3. Install PMM Client</h1><p>Client has to be install into the MySQL Server instance host. </p><h2 id="Ubuntu">3.1. Ubuntu</h2><ol><li><p>Configure Repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.percona.com/apt/percona-release_0.1-4.$(lsb_release -sc)_all.deb</span><br><span class="line">sudo dpkg -i percona-release_0.1-4.$(lsb_release -sc)_all.deb</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-cache search percona</span><br></pre></td></tr></table></figure><p>You should be able to see next output: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">percona-xtrabackup-dbg - Debug symbols <span class="keyword">for</span> Percona XtraBackup</span><br><span class="line">percona-xtrabackup-test - Test suite <span class="keyword">for</span> Percona XtraBackup</span><br><span class="line">percona-xtradb-cluster-client - Percona XtraDB Cluster database client</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>Install Client </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pmm-client</span><br></pre></td></tr></table></figure></li><li><p>Configure Client </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pmm-admin config --server 192.168.100.1:8081 <span class="comment"># here the port is your server port in PMM server, please notice the firewall rules</span></span><br><span class="line">OK, PMM server is alive.</span><br><span class="line"></span><br><span class="line">PMM Server      | 192.168.100.1</span><br><span class="line">Client Name     | ubuntu-amd641</span><br><span class="line">Client Address  | 192.168.200.1</span><br></pre></td></tr></table></figure></li><li><p>Add MySQL Instance to Monitor<br>Add the mysql instance by using <code>pmm-admin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pmm-admin add mysql --user root --password xxxxxxx </span><br><span class="line"><span class="comment">## plaese add `--disable-tablestats` if you do have lots of tables, like &gt; 300, or tablestats monotiring will take some time.</span></span><br><span class="line"></span><br><span class="line">pmm-admin list <span class="comment"># Please note, client address must be correct NIC IP, can't be an IP which pmm-server can't reach</span></span><br><span class="line">pmm-admin 1.5.3</span><br><span class="line"></span><br><span class="line">PMM Server      | ***.***.***.***:8081 </span><br><span class="line">Client Name     | ***.***.***.***</span><br><span class="line">Client Address  | ***.***.***.***</span><br><span class="line">Service Manager | linux-systemd</span><br><span class="line"></span><br><span class="line">-------------- ----------------------------- ----------- -------- ------------------------------------------- ------------------------------------------</span><br><span class="line">SERVICE TYPE   NAME                          LOCAL PORT  RUNNING  DATA SOURCE                                 OPTIONS                                   </span><br><span class="line">-------------- ----------------------------- ----------- -------- ------------------------------------------- ------------------------------------------</span><br><span class="line">mysql:queries  ***.***.***.***  -           YES      root:***@unix(/var/run/mysqld/mysqld.sock)  query_source=slowlog, query_examples=<span class="literal">true</span> </span><br><span class="line">linux:metrics  ***.***.***.***  42000       YES      -                                                                                     </span><br><span class="line">mysql:metrics  ***.***.***.***  42002       YES      root:***@unix(/var/run/mysqld/mysqld.sock)</span><br></pre></td></tr></table></figure></li></ol><p>For more commands for <code>pmm-admin</code>, please review:<br><a href="https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html#managing-pmm-client" target="_blank" rel="noopener">https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html#managing-pmm-client</a> </p><h1 id="Ports-and-Set-Firewall-Rules">4. Ports and Set Firewall Rules</h1><p>Next ports has to be opened on PMM Client host to PMM Server IP. </p><table><thead><tr><th>Port</th><th>Meaning</th></tr></thead><tbody><tr><td>42000</td><td>For PMM to collect <code>general system</code> metrics</td></tr><tr><td>42001</td><td>This port is used by a service which collects query performance data and makes it available to QAN</td></tr><tr><td>42002</td><td>For PMM to collect <code>MySQL server</code> metrics</td></tr><tr><td>42003</td><td>For PMM to collect MongoDB server metrics</td></tr><tr><td>42004</td><td>For PMM to collect ProxySQL server metrics</td></tr></tbody></table><p>These lines need to be executed in PMM client host, and <code>***.***.***.***</code> is PMM server host, to <code>only</code> enable fetching metrics by PMM Server.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ufw allow proto tcp from ***.***.***.*** to any port 42000</span><br><span class="line">ufw allow proto tcp from ***.***.***.*** to any port 42001</span><br><span class="line">ufw allow proto tcp from ***.***.***.*** to any port 42002</span><br><span class="line">ufw allow proto tcp from ***.***.***.*** to any port 42003</span><br><span class="line">ufw allow proto tcp from ***.***.***.*** to any port 42004</span><br></pre></td></tr></table></figure></p><p>This line needs to be executed in PMM Server host, and <code>***.***.***.***</code> is the PMM client host, to <code>only</code> enable client to access PMM Server 8081 port.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw allow proto tcp from ***.***.***.*** to any port 8081</span><br><span class="line">ufw reject proto tcp to any port 8081</span><br></pre></td></tr></table></figure></p><p>For more info, please refer to:<br><a href="https://www.percona.com/doc/percona-monitoring-and-management/glossary.terminology.html#term-ports" target="_blank" rel="noopener">https://www.percona.com/doc/percona-monitoring-and-management/glossary.terminology.html#term-ports</a></p><h1 id="Email-Alert-Configuration">5. Email Alert Configuration</h1><p>Go into docker instance and <code>vi /etc/grafana/grafana.ini</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># The full public facing url you use in browser, used for redirects and emails</span><br><span class="line"># If you use reverse proxy and sub path specify full url (with sub path)</span><br><span class="line">root_url = https://xxx.xxx.xxx/graph/ # This is your domain name</span><br><span class="line"></span><br><span class="line">#################################### SMTP / Emailing ##########################</span><br><span class="line">[smtp]</span><br><span class="line">enabled = true</span><br><span class="line">host = smtp.gmail.com:465</span><br><span class="line">user = username # without @gmail.com</span><br><span class="line"># If the password contains # or ; you have to wrap it with trippel quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;</span><br><span class="line">password = stwixlxwxnmimfsfsf @ this is your app password</span><br><span class="line">;cert_file =</span><br><span class="line">;key_file =</span><br><span class="line">skip_verify = false</span><br><span class="line">from_address = username@gmail.com</span><br><span class="line">from_name = Grafana</span><br><span class="line"># EHLO identity in SMTP dialog (defaults to instance_name)</span><br><span class="line">ehlo_identity = xxx.xxx.xxx # again your domain name</span><br></pre></td></tr></table></figure></p><p>NOTE: please do next things for your gmail: </p><ol><li>Enable IMAP/SMTP </li><li>Open 2 factor login for Google Account</li><li>Config app password for gmail and place above </li></ol><h1 id="Nginx-Forward-Port-and-Setup-HTTP-Auth">6. Nginx Forward Port and Setup HTTP Auth</h1><p>Actually we still need the HTTPS setup, but that’s beyond our topic here. </p><ol><li><p>Setup Nginx by using <code>apt-get install nginx</code> and then setup next site-conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 ;</span><br><span class="line">        listen [::]:80 ;</span><br><span class="line">        server_name ***.***.domain_name;</span><br><span class="line">        <span class="built_in">return</span> 301 https://***.***.domain_name<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        listen [::]:443 ssl;</span><br><span class="line">        server_name ***.***.domain_name;</span><br><span class="line">        ssl_certificate /etc/nginx/ssl/self-domain.crt;</span><br><span class="line">        ssl_certificate_key /etc/nginx/ssl/self-domain.key;</span><br><span class="line"></span><br><span class="line">        access_log            /var/<span class="built_in">log</span>/nginx/pmm.access.log;</span><br><span class="line">        error_log            /var/<span class="built_in">log</span>/nginx/pmm.error.log;</span><br><span class="line"></span><br><span class="line">        auth_basic <span class="string">"Restricted Content"</span>;</span><br><span class="line">        auth_basic_user_file /etc/nginx/.htpasswd;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                include /etc/nginx/proxy_params;</span><br><span class="line">                proxy_set_header       Authorization <span class="string">""</span>;</span><br><span class="line">                proxy_pass          http://localhost:8081;</span><br><span class="line">                proxy_read_timeout  90s;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Setup http auth </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">'user1:'</span> &gt;&gt; /etc/nginx/.htpasswd</span><br><span class="line"><span class="comment"># input password for `user1` twice here, as `pass1`</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pass1\npass1\n"</span> | openssl passwd -apr1 -stdin &gt;&gt; /etc/nginx/.htpasswd</span><br></pre></td></tr></table></figure></li><li><p>Reload Nginx </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t </span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h1 id="Highlights-and-Conclusion">7. Highlights and Conclusion</h1><ol><li><code>PMM</code> is powerful to monitor MySQL</li><li>Use <code>--iptables=false</code> if you install Docker into Ubuntu OS, which again, proves, CentOS is designed for Server.</li><li>We can use <code>openssl</code> to setup http password file</li><li>Use <code>proxy_set_header       Authorization &quot;&quot;;</code> to remove the http auth header</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I was exhausted about the &lt;a href=&quot;https://bugs.mysql.com/bug.php?id=81899&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Page Cleaner in MySQL&lt;/a&gt; issue, and in the end I just surrendered and installed this PMM and keep on monitoring. I thought I was able to solve everything via simple &lt;code&gt;show innodb engine status&lt;/code&gt; and &lt;code&gt;show global variables/status&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;But the reality showed me as a fool of wasting time on just viewing numbers flipping. I learned one thing from this: never try to hack it before you really fully master it, which is only &lt;code&gt;WAST OF TIME&lt;/code&gt;. Time really matters.&lt;/p&gt;
&lt;p&gt;This is a quick notes for you to quickly install PMM and start monitoring your MySQL.&lt;/p&gt;
&lt;p&gt;As usual, picture always show first!&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/12/26/Install-Percona-Monitoring-and-Management-System/mysql-pmm.png&quot; title=&quot;Percona Monitoring and Management System&quot;&gt;&lt;/center&gt;

&lt;p&gt;Beautiful, uh? &lt;span class=&quot;github-emoji&quot; title=&quot;grinning&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8&quot;&gt;&amp;#x1f600;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Monitor" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/"/>
    
      <category term="Percona" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/Percona/"/>
    
    
      <category term="MySQL" scheme="https://morganwu277.github.io/tags/MySQL/"/>
    
      <category term="Percona" scheme="https://morganwu277.github.io/tags/Percona/"/>
    
      <category term="Monitoring" scheme="https://morganwu277.github.io/tags/Monitoring/"/>
    
  </entry>
  
  <entry>
    <title>Install Ganglia and Send Metrics to Graphite</title>
    <link href="https://morganwu277.github.io/2017/12/18/Install-Ganglia-Start/"/>
    <id>https://morganwu277.github.io/2017/12/18/Install-Ganglia-Start/</id>
    <published>2017-12-18T21:15:43.000Z</published>
    <updated>2019-09-12T02:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been used many monitoring tools for over 4 years, but there has never been a tool which is so strongly strike my heart and meet my needs in the just right way. Most of them are focusing more on the so-called extensible back-end storage, but not many of them has really meet the requirement of monitoring out of box. Of course, that could be the secret of their business money making. </p><p>Anyway, most of this article follows <a href="https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/" target="_blank" rel="noopener">https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/</a> , just to give myself a quick notes to apply.</p><p>Long time that no pictures, I love pictures. Here is one for you to enjoy: </p><center><img src="/2017/12/18/Install-Ganglia-Start/Ganglia_my_cluster_Report.png" title="My Cluster Overview Performance"></center><a id="more"></a><p>This post assume you have a Ubuntu 16.04 OS, for CentOS, please note, the service name is a little different, but components should be the same:</p><ul><li>gmond + gmond-python modules</li><li>gmetad + rrdtool + rrdcache(optional) + web front</li></ul><h1 id="How-Ganlia-works">1. How Ganlia works?</h1><ol><li>Ganglia Monitoring Daemon(<code>gmond</code>) collect data from the server itself and then send to one Ganglia Meta Daemon(<code>gmetad</code>) server to aggregate the data. </li><li><code>gmetad</code> will save those data into <code>rrds</code> on disk. (flush to disk)<ol><li><code>gmetad</code> aggregation data could comes from a <code>gmond</code> data.</li><li>a lower level of <code>gmetad</code> could send data to a higher level of <code>gmetad</code> node to form a multi-level gmetad cluster, to form as a cluster environment, to make sure such monitoring system as scalable as <code>several thousands</code> of server nodes.</li></ol></li><li>Ganglia PHP Web Front-end will fetch <code>rrds</code> data and display on web page.</li></ol><h1 id="Install-Ganglia-Meta-Daemon-Node">2. Install Ganglia Meta Daemon Node</h1><h2 id="Update-System">2.1. Update System</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -y sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure><p>This is easy, I and you will skip this.</p><h2 id="Install-LAMP-Stack-on-Master-node-gmetad-node">2.2. Install LAMP Stack on Master node (gmetad node)</h2><p>Actally we don’t need even <code>mariadb</code> here. Only <code>PHP7</code> and <code>Apache2</code> related are required.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 php7.0 libapache2-mod-php7.0 php7.0-mbstring php7.0-curl php7.0-zip php7.0-gd  php7.0-curl php7.0-mcrypt</span><br><span class="line">sudo apt-get install mariadb-server php7.0-mysql <span class="comment"># this is not required</span></span><br></pre></td></tr></table></figure></p><h2 id="Install-Gmetad-Node-Component">2.3. Install Gmetad Node Component</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ganglia-monitor ganglia-monitor-python gmetad ganglia-webfrontend -y</span><br></pre></td></tr></table></figure><h2 id="Gmetad-Config-udpate">2.4. Gmetad Config udpate</h2><p>By default, using <code>data_source &quot;my cluster&quot; localhost</code> and <code>gridname &quot;MyGrid&quot;</code> as <code>localhost:8649</code> datasource and <code>MyGrid</code> grid.</p><h2 id="Ganglia-Web-Update">2.5. Ganglia-Web Update</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/apache2/sites-enabled/ganglia.conf</span><br><span class="line">Alias /ganglia /usr/share/ganglia-webfrontend</span><br><span class="line"></span><br><span class="line">&lt;Directory &quot;/usr/share/ganglia-webfrontend&quot;&gt;</span><br><span class="line">  AuthType Basic</span><br><span class="line">  AuthName &quot;Authentication Required&quot;</span><br><span class="line">  AuthUserFile &quot;/etc/apache2/sites-enabled/.htpasswd&quot;</span><br><span class="line">  Require valid-user</span><br><span class="line"></span><br><span class="line">AllowOverride All</span><br><span class="line">Order allow,deny</span><br><span class="line">Allow from all</span><br><span class="line">Deny from none</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>Also, please generate one <code>/etc/apache2/sites-enabled/.htpasswd</code> using<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c /etc/apache2/sites-enabled/.htpasswd &lt;admin_user&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Install-rrdcached-to-solve-large-IOPS-issue">2.6. Install rrdcached to solve large IOPS issue</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install rrdcached -y</span><br></pre></td></tr></table></figure><p>After installing <code>rrdcached</code>, you will see a line<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT=/etc/default/rrdcached</span><br></pre></td></tr></table></figure></p><p>in <code>/etc/init.d/rrdcached</code>, which means start options are defined in file <code>/etc/default/rrdcached</code>. </p><h2 id="Configure-Update-After-Installing-rrdcached">2.7. Configure Update After Installing rrdcached</h2><ol><li><p>Change <code>BASE_OPTIONS</code> in <code>/etc/default/rrdcached</code><br>Change the last line from </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BASE_OPTIONS=&quot;-B&quot;</span><br></pre></td></tr></table></figure><p>into </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASE_OPTIONS=&quot;-s www-data -m 664 -l unix:/tmp/rrdcached.sock  \</span><br><span class="line">              -s nogroup -m 777 -P FLUSH,STATS,HELP,FETCH -l unix:/tmp/rrdcached.limited.sock \</span><br><span class="line">              -b /var/lib/ganglia/rrds -B&quot;</span><br></pre></td></tr></table></figure><p>It means: </p><ul><li>for <code>www-data</code> user has <code>644</code> permission from <code>unix:/tmp/rrdcached.sock</code> sock, </li><li>but for <code>nogroup</code> users, it has <code>777</code> permission but <code>LIMITED</code> to Operations <code>FLUSH</code>, <code>STATS</code>, <code>HELP</code>, <code>FETCH</code>, maye the <code>FETCH</code> is not required, and via <code>unix:/tmp/rrdcached.limited.sock</code> socket,</li><li>and will flush all data into directory <code>/var/lib/ganglia/rrds</code></li></ul></li><li><p>Use <code>DAEMON_USER=nobody</code> to run the rrdcached.</p></li><li><p>Change <code>PIDFILE</code> path into <code>tmp</code> folder.</p></li><li><p>Remove the lines whih is already defined in <code>BASE_OPTIONS</code>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#SOCKFILE=/var/run/rrdcached.sock</span><br><span class="line">#BASE_PATH=/var/lib/rrdcached/db</span><br><span class="line">#SOCKGROUP=root</span><br><span class="line">#SOCKMODE=0660</span><br><span class="line">#DAEMON_GROUP=_rrdcached</span><br></pre></td></tr></table></figure></li><li><p>Change the permission of folders</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R nobody.nogroup /var/lib/ganglia/rrds</span><br><span class="line">chown -R nobody.nogroup /var/lib/rrdcached</span><br></pre></td></tr></table></figure></li><li><p>Config Gmetad and ganglia-web</p><ul><li>Add <code>export RRDCACHED_ADDRESS=&quot;unix:/tmp/rrdcached.limited.sock&quot;</code> into head of <code>/etc/init.d/gmetad</code></li><li><p>Use <code>nobody</code> to start <code>gmetad</code> in <code>/etc/init.d/gmetad</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  start)</span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"Starting <span class="variable">$DESC</span>: "</span></span><br><span class="line">        sudo -u nobody sh -c <span class="string">"<span class="variable">$DAEMON</span>  --pid-file /tmp/<span class="variable">$NAME</span>.pid"</span></span><br><span class="line"><span class="comment">#       start-stop-daemon --start --quiet \</span></span><br><span class="line"><span class="comment">#               --exec $DAEMON -- --pid-file /var/run/$NAME.pid</span></span><br><span class="line"><span class="comment">#       echo "$NAME."</span></span><br><span class="line">        ;;</span><br></pre></td></tr></table></figure></li><li><p>Change <code>$conf[&#39;rrdcached_socket&#39;] = &quot;&quot;;</code> into <code>$conf[&#39;rrdcached_socket&#39;] = &quot;unix:/tmp/rrdcached.sock&quot;;</code> in <code>/usr/share/ganglia-webfrontend/conf_default.php</code></p></li></ul></li><li><p>Use <code>nobody</code> to start rrdcached<br>In <code>/etc/init.d/rrdcached</code> add a new line using <code>nobody</code> to start the <code>rrdcached</code>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="title">do_start</span></span> () &#123;</span><br><span class="line"><span class="comment">#    start_daemon -p $&#123;PIDFILE&#125; $&#123;DAEMON&#125; $&#123;RRDCACHED_OPTIONS&#125;</span></span><br><span class="line">    su nobody -c <span class="string">"<span class="variable">$&#123;DAEMON&#125;</span> -p <span class="variable">$&#123;PIDFILE&#125;</span> <span class="variable">$&#123;RRDCACHED_OPTIONS&#125;</span>"</span> -s /bin/sh</span><br><span class="line">    <span class="built_in">return</span> $?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After this change, reload and restart <code>rrdcached</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart rrdcached</span><br></pre></td></tr></table></figure></li><li><p>Restart rrdcached and check rrdcached process</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@db-master:/etc/init.d<span class="comment"># ps -ef|grep rrd</span></span><br><span class="line">nobody    6098     1  0 07:59 ?        00:00:00 /usr/bin/rrdcached -s www-data -m 664 -l unix:/tmp/rrdcached.sock -s nogroup -m 777 -P FLUSH,STATS,HELP,FETCH -l unix:/tmp/rrdcached.limited.sock -b /var/lib/ganglia/rrds -B -j /var/lib/rrdcached/journal/ -U nobody -p /tmp/rrdcached.pid</span><br></pre></td></tr></table></figure></li></ol><p>Ref: <a href="https://github.com/ganglia/monitor-core/wiki/Integrating-Ganglia-with-rrdcached" target="_blank" rel="noopener">https://github.com/ganglia/monitor-core/wiki/Integrating-Ganglia-with-rrdcached</a> </p><h1 id="Install-Ganglia-Monitor-Node">3. Install Ganglia Monitor Node</h1><h2 id="Installation-steps">3.1. Installation steps</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ganglia-monitor ganglia-monitor-python</span><br><span class="line">sudo systemctl start ganglia-monitor</span><br></pre></td></tr></table></figure><h2 id="Ganglia-Mode-Config-update">3.2. Ganglia Mode Config update</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ganglia/gmond.conf</span><br></pre></td></tr></table></figure><p>Here is one sample, please read some comments below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line">/* This configuration is as close to 2.5.x default behavior as possible</span><br><span class="line">   The values closely match ./gmond/metric.h definitions <span class="keyword">in</span> 2.5.x */</span><br><span class="line">globals &#123;</span><br><span class="line">  daemonize = yes</span><br><span class="line">  setuid = yes</span><br><span class="line">  user = ganglia</span><br><span class="line">  debug_level = 0</span><br><span class="line">  max_udp_msg_len = 1472</span><br><span class="line">  mute = no</span><br><span class="line">  deaf = no</span><br><span class="line">  allow_extra_data = yes</span><br><span class="line">  host_dmax = 86400 /*secs. Expires (removes from web interface) hosts <span class="keyword">in</span> 1 day */</span><br><span class="line">  host_tmax = 20 /*secs */</span><br><span class="line">  cleanup_threshold = 300 /*secs */</span><br><span class="line">  gexec = no</span><br><span class="line">  <span class="comment"># By default gmond will use reverse DNS resolution when displaying your hostname</span></span><br><span class="line">  <span class="comment"># Uncommeting following value will override that value.</span></span><br><span class="line">  override_hostname = <span class="string">"&#123;&#123; ansible_hostname &#125;&#125;"</span></span><br><span class="line">  <span class="comment"># If you are not using multicast this value should be set to something other than 0.</span></span><br><span class="line">  <span class="comment"># Otherwise if you restart aggregator gmond you will get empty graphs. 60 seconds is reasonable</span></span><br><span class="line">  send_metadata_interval = 60 /*secs */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * The cluster attributes specified will be used as part of the &lt;CLUSTER&gt;</span><br><span class="line"> * tag that will wrap all hosts collected by this instance.</span><br><span class="line"> */</span><br><span class="line">cluster &#123;</span><br><span class="line">  name = <span class="string">"my cluster"</span> /* this has to be matched with each gmond node and gmetad node.</span><br><span class="line">  owner = <span class="string">"unspecified"</span></span><br><span class="line">  latlong = <span class="string">"unspecified"</span></span><br><span class="line">  url = <span class="string">"unspecified"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* The host section describes attributes of the host, like the location */</span><br><span class="line">host &#123;</span><br><span class="line">  location = <span class="string">"unspecified"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Feel free to specify as many udp_send_channels as you like.  Gmond</span><br><span class="line">   used to only support having a single channel */</span><br><span class="line">udp_send_channel &#123;</span><br><span class="line">  <span class="comment">#bind_hostname = yes # Highly recommended, soon to be default.</span></span><br><span class="line">                       <span class="comment"># This option tells gmond to use a source address</span></span><br><span class="line">                       <span class="comment"># that resolves to the machine's hostname.  Without</span></span><br><span class="line">                       <span class="comment"># this, the metrics may appear to come from any</span></span><br><span class="line">                       <span class="comment"># interface and the DNS names associated with</span></span><br><span class="line">                       <span class="comment"># those IPs will be used to create the RRDs.</span></span><br><span class="line"><span class="comment">#  mcast_join = 239.2.11.71</span></span><br><span class="line">  host = xxx.xxx.xxx.xxx /* this must be your IP Address of Gmetad */</span><br><span class="line">  port = 8649</span><br><span class="line">  ttl = 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* You can specify as many udp_recv_channels as you like as well. */</span><br><span class="line"><span class="comment">#udp_recv_channel &#123;</span></span><br><span class="line"><span class="comment">#  mcast_join = 239.2.11.71</span></span><br><span class="line"><span class="comment">#  port = 8649</span></span><br><span class="line"><span class="comment">#  bind = 239.2.11.71</span></span><br><span class="line"><span class="comment">#  retry_bind = true</span></span><br><span class="line"><span class="comment">#  Size of the UDP buffer. If you are handling lots of metrics you really</span></span><br><span class="line"><span class="comment">#  should bump it up to e.g. 10MB or even higher.</span></span><br><span class="line"><span class="comment">#  buffer = 10485760</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">/* You can specify as many tcp_accept_channels as you like to share</span><br><span class="line">   an xml description of the state of the cluster */</span><br><span class="line">tcp_accept_channel &#123; /* <span class="keyword">for</span> the node aggregation node, this needs to be open since gmetad will collect data from here, so locally. no need to open firewall rules. */</span><br><span class="line">  port = 8649</span><br><span class="line"><span class="comment">#  # If you want to gzip XML output</span></span><br><span class="line"><span class="comment">#  gzip_output = no</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Channel to receive sFlow datagrams */</span><br><span class="line"><span class="comment">#udp_recv_channel &#123;</span></span><br><span class="line"><span class="comment">#  port = 6343</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">/* Optional sFlow settings */</span><br><span class="line"><span class="comment">#sflow &#123;</span></span><br><span class="line"><span class="comment"># udp_port = 6343</span></span><br><span class="line"><span class="comment"># accept_vm_metrics = yes</span></span><br><span class="line"><span class="comment"># accept_jvm_metrics = yes</span></span><br><span class="line"><span class="comment"># multiple_jvm_instances = no</span></span><br><span class="line"><span class="comment"># accept_http_metrics = yes</span></span><br><span class="line"><span class="comment"># multiple_http_instances = no</span></span><br><span class="line"><span class="comment"># accept_memcache_metrics = yes</span></span><br><span class="line"><span class="comment"># multiple_memcache_instances = no</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">/* Each metrics module that is referenced by gmond must be specified and</span><br><span class="line">   loaded. If the module has been statically linked with gmond, it does</span><br><span class="line">   not require a load path. However all dynamically loadable modules must</span><br><span class="line">   include a load path. */</span><br><span class="line">modules &#123;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"core_metrics"</span></span><br><span class="line">  &#125;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"cpu_module"</span></span><br><span class="line">    path = <span class="string">"modcpu.so"</span></span><br><span class="line">  &#125;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"disk_module"</span></span><br><span class="line">    path = <span class="string">"moddisk.so"</span></span><br><span class="line">  &#125;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"load_module"</span></span><br><span class="line">    path = <span class="string">"modload.so"</span></span><br><span class="line">  &#125;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"mem_module"</span></span><br><span class="line">    path = <span class="string">"modmem.so"</span></span><br><span class="line">  &#125;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"net_module"</span></span><br><span class="line">    path = <span class="string">"modnet.so"</span></span><br><span class="line">  &#125;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"proc_module"</span></span><br><span class="line">    path = <span class="string">"modproc.so"</span></span><br><span class="line">  &#125;</span><br><span class="line">  module &#123;</span><br><span class="line">    name = <span class="string">"sys_module"</span></span><br><span class="line">    path = <span class="string">"modsys.so"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* The old internal 2.5.x metric array has been replaced by the following</span><br><span class="line">   collection_group directives.  What follows is the default behavior <span class="keyword">for</span></span><br><span class="line">   collecting and sending metrics that is as close to 2.5.x behavior as</span><br><span class="line">   possible. */</span><br><span class="line"></span><br><span class="line">/* This collection group will cause a heartbeat (or beacon) to be sent every</span><br><span class="line">   20 seconds.  In the heartbeat is the GMOND_STARTED data <span class="built_in">which</span> expresses</span><br><span class="line">   the age of the running gmond. */</span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_once = yes</span><br><span class="line">  time_threshold = 20</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"heartbeat"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* This collection group will send general info about this host*/</span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 1200</span><br><span class="line">  time_threshold = 1200</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_num"</span></span><br><span class="line">    title = <span class="string">"CPU Count"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_speed"</span></span><br><span class="line">    title = <span class="string">"CPU Speed"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"mem_total"</span></span><br><span class="line">    title = <span class="string">"Memory Total"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"swap_total"</span></span><br><span class="line">    title = <span class="string">"Swap Space Total"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"boottime"</span></span><br><span class="line">    title = <span class="string">"Last Boot Time"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"machine_type"</span></span><br><span class="line">    title = <span class="string">"Machine Type"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"os_name"</span></span><br><span class="line">    title = <span class="string">"Operating System"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"os_release"</span></span><br><span class="line">    title = <span class="string">"Operating System Release"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"location"</span></span><br><span class="line">    title = <span class="string">"Location"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* This collection group will send the status of gexecd <span class="keyword">for</span> this host</span><br><span class="line">   every 300 secs.*/</span><br><span class="line">/* Unlike 2.5.x the default behavior is to report gexecd OFF. */</span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_once = yes</span><br><span class="line">  time_threshold = 300</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"gexec"</span></span><br><span class="line">    title = <span class="string">"Gexec Status"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* This collection group will collect the CPU status info every 20 secs.</span><br><span class="line">   The time threshold is <span class="built_in">set</span> to 90 seconds.  In honesty, this</span><br><span class="line">   time_threshold could be <span class="built_in">set</span> significantly higher to reduce</span><br><span class="line">   unneccessary  network chatter. */</span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 20</span><br><span class="line">  time_threshold = 90</span><br><span class="line">  /* CPU status */</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_user"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"CPU User"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_system"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"CPU System"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_idle"</span></span><br><span class="line">    value_threshold = <span class="string">"5.0"</span></span><br><span class="line">    title = <span class="string">"CPU Idle"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_nice"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"CPU Nice"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_aidle"</span></span><br><span class="line">    value_threshold = <span class="string">"5.0"</span></span><br><span class="line">    title = <span class="string">"CPU aidle"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_wio"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"CPU wio"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_steal"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"CPU steal"</span></span><br><span class="line">  &#125;</span><br><span class="line">  /* The next two metrics are optional <span class="keyword">if</span> you want more detail...</span><br><span class="line">     ... since they are accounted <span class="keyword">for</span> <span class="keyword">in</span> cpu_system.</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_intr"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"CPU intr"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"cpu_sintr"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"CPU sintr"</span></span><br><span class="line">  &#125;</span><br><span class="line">  */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 20</span><br><span class="line">  time_threshold = 90</span><br><span class="line">  /* Load Averages */</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"load_one"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"One Minute Load Average"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"load_five"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"Five Minute Load Average"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"load_fifteen"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"Fifteen Minute Load Average"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* This group collects the number of running and total processes */</span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 80</span><br><span class="line">  time_threshold = 950</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"proc_run"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"Total Running Processes"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"proc_total"</span></span><br><span class="line">    value_threshold = <span class="string">"1.0"</span></span><br><span class="line">    title = <span class="string">"Total Processes"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* This collection group grabs the volatile memory metrics every 40 secs and</span><br><span class="line">   sends them at least every 180 secs.  This time_threshold can be increased</span><br><span class="line">   significantly to reduce unneeded network traffic. */</span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 40</span><br><span class="line">  time_threshold = 180</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"mem_free"</span></span><br><span class="line">    value_threshold = <span class="string">"1024.0"</span></span><br><span class="line">    title = <span class="string">"Free Memory"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"mem_shared"</span></span><br><span class="line">    value_threshold = <span class="string">"1024.0"</span></span><br><span class="line">    title = <span class="string">"Shared Memory"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"mem_buffers"</span></span><br><span class="line">    value_threshold = <span class="string">"1024.0"</span></span><br><span class="line">    title = <span class="string">"Memory Buffers"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"mem_cached"</span></span><br><span class="line">    value_threshold = <span class="string">"1024.0"</span></span><br><span class="line">    title = <span class="string">"Cached Memory"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"swap_free"</span></span><br><span class="line">    value_threshold = <span class="string">"1024.0"</span></span><br><span class="line">    title = <span class="string">"Free Swap Space"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 40</span><br><span class="line">  time_threshold = 300</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"bytes_out"</span></span><br><span class="line">    value_threshold = 4096</span><br><span class="line">    title = <span class="string">"Bytes Sent"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"bytes_in"</span></span><br><span class="line">    value_threshold = 4096</span><br><span class="line">    title = <span class="string">"Bytes Received"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"pkts_in"</span></span><br><span class="line">    value_threshold = 256</span><br><span class="line">    title = <span class="string">"Packets Received"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"pkts_out"</span></span><br><span class="line">    value_threshold = 256</span><br><span class="line">    title = <span class="string">"Packets Sent"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Different than 2.5.x default since the old config made no sense */</span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 1800</span><br><span class="line">  time_threshold = 3600</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"disk_total"</span></span><br><span class="line">    value_threshold = 1.0</span><br><span class="line">    title = <span class="string">"Total Disk Space"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">collection_group &#123;</span><br><span class="line">  collect_every = 40</span><br><span class="line">  time_threshold = 180</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"disk_free"</span></span><br><span class="line">    value_threshold = 1.0</span><br><span class="line">    title = <span class="string">"Disk Space Available"</span></span><br><span class="line">  &#125;</span><br><span class="line">  metric &#123;</span><br><span class="line">    name = <span class="string">"part_max_used"</span></span><br><span class="line">    value_threshold = 1.0</span><br><span class="line">    title = <span class="string">"Maximum Disk Space Used"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include (<span class="string">"/etc/ganglia/conf.d/*.conf"</span>)</span><br></pre></td></tr></table></figure></p><p>So, in a summary of this gmond conf:</p><ul><li><code>globals</code> section defines how long we retrieve the node info and remove the dead node. </li><li><code>udp_send_channel</code> section defines where to send the metrics</li><li><code>udp_receive_channel</code> section has to be open, if that’s the <code>gmetad</code> node, also, firewall of <code>udp/8649</code> needs to be open</li><li><code>tcp_receive_channel</code> section needs to be open, if that’s the aggreation node, which means <code>gmetad</code> fetch the <code>datasource</code> from this <code>node:8649</code> using <code>TCP</code> channel </li></ul><h1 id="Restart-the-services">4. Restart the services</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># restart gmond</span></span><br><span class="line">/etc/init.d/ganglia-monitor restart</span><br><span class="line"><span class="comment"># restart gmetad</span></span><br><span class="line">/etc/init.d/gmetad restart</span><br><span class="line"><span class="comment"># restart rrdcached</span></span><br><span class="line">/etc/init.d/rrdcached restart</span><br><span class="line"><span class="comment"># restart ganglia-web</span></span><br><span class="line">/etc/init.d/apache2 restart</span><br><span class="line"><span class="comment"># Enable all services</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ganglia-monitor gmetad rrdcached apache2</span><br></pre></td></tr></table></figure><h1 id="Customized-Metrics-Monitoring">5. Customized Metrics Monitoring</h1><h2 id="Port-Metrics-to-Graphite">5.1. Port Metrics to Graphite</h2><p>So we can use Pager tool like <a href="http://cabotapp.com/" target="_blank" rel="noopener">cabot</a> to alert in using Slack/Email/Twillo, etc. </p><p>Won’t talk much about how to setup Cabot, but only port to to Graphite. As long as you already have it displayed into Graphite, you are good to use Cabot then. </p><p>The basic usage to send metrics to Graphite is<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GRAPHITE_HOST=<span class="string">"xxx.xxx.xxx.xxx"</span></span><br><span class="line">GRAPHITE_PORT=<span class="string">"2003"</span></span><br><span class="line">now=`date +%s`</span><br><span class="line">key=<span class="string">"foo.bar"</span></span><br><span class="line">value=<span class="string">"1.3"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$key</span> <span class="variable">$value</span> <span class="variable">$now</span>"</span> | nc <span class="variable">$GRAPHITE_HOST</span> <span class="variable">$GRAPHITE_PORT</span></span><br></pre></td></tr></table></figure></p><p>Then the <code>foo.bar</code> value is <code>1.3</code> in ganglia dashboard.</p><p>Next is the one used to collect <code>disk_free</code> disk left for all nodes.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">GRAPHITE_HOST=<span class="string">"xxx.xxx.xxx.xxx"</span></span><br><span class="line">GRAPHITE_PORT=<span class="string">"2003"</span></span><br><span class="line">KEY_PREFIX=<span class="string">"ganglia.servers."</span></span><br><span class="line">RRD_BASE=<span class="string">'/var/lib/ganglia/rrds/my cluster'</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$RRD_BASE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">collect_rrd</span></span>() &#123;</span><br><span class="line">    rrd=<span class="variable">$1</span></span><br><span class="line">    update_date=$(rrdtool lastupdate <span class="variable">$rrd</span> |tail -1 |cut -d <span class="string">':'</span> -f1)</span><br><span class="line">    now=`date +%s`</span><br><span class="line">    delta=$((now-update_date))</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$delta</span> -lt 20 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># got the data </span></span><br><span class="line">        key=$(<span class="built_in">echo</span> <span class="variable">$rrd</span>|sed -E <span class="string">'s/\.rrd//g'</span>|sed -E <span class="string">'s/\.\///g'</span>|tr <span class="string">'/'</span> <span class="string">'.'</span> )</span><br><span class="line">        key=<span class="string">"<span class="variable">$KEY_PREFIX</span><span class="variable">$key</span>"</span></span><br><span class="line">        value=$(rrdtool lastupdate <span class="variable">$rrd</span> |tail -1 |cut -d <span class="string">':'</span> -f2)</span><br><span class="line"><span class="comment">#        echo "key:$key, value:$value, ts: $update_date"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$key</span> <span class="variable">$value</span> <span class="variable">$update_date</span>"</span> | nc <span class="variable">$GRAPHITE_HOST</span> <span class="variable">$GRAPHITE_PORT</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">disk_free_monitor</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> rrd <span class="keyword">in</span> `find . |grep disk_free_abs|grep -vE <span class="string">'(__Sum|token|run|dev|cgroup|var_lib_docker)'</span>`; <span class="keyword">do</span></span><br><span class="line">        collect_rrd <span class="variable">$rrd</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    disk_free_monitor</span><br><span class="line"><span class="comment">#     echo "sleep 15 seconds..."</span></span><br><span class="line">    sleep 15</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>You probably need to add this <code>monitor.sh</code> into crontab so that it can be auto start after rebooting the machine.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab -e</span></span><br><span class="line">@reboot  /root/monitor.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><h2 id="Create-dashboard-graph-from-Graphite">5.2. Create dashboard graph from Graphite</h2><p>Finally I used<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">legendValue(removeAboveValue(ganglia.servers.*.disk_free_absolute_*,6),&quot;last&quot;)</span><br></pre></td></tr></table></figure></p><p>to create the graph from graph composer of Graphite. </p><center><img src="/2017/12/18/Install-Ganglia-Start/graph.png" title="Disk Free Graph"></center><p>The most <code>tricky</code> part is the functions that I got to use: </p><ul><li><code>removeAboveValue</code>: if some value are above the value, just remove the line from graph, because we only care about those disks that has lower value  </li><li><code>legendValue</code>: put the value into part of the legend, can quickly locate the value if some value is below a threshold</li></ul><center><img src="/2017/12/18/Install-Ganglia-Start/remove_above_value.png" title="Remove Above Value Function"></center><center><img src="/2017/12/18/Install-Ganglia-Start/lengend_value.png" title="Add Value into Legend"></center><p>Please try different functions as much as possible to understand what the underlying meaning.</p><h2 id="Add-Graphite-Check-from-Cabot">5.3. Add Graphite Check from Cabot</h2><p>Because <code>Cabot</code> has a strong connection to <code>Graphite</code>, so that’s why we have to put the metrics into <code>Graphite</code> firstly. Only by doing that, we are able to do the check from Cabot.</p><center><img src="/2017/12/18/Install-Ganglia-Start/cabot_disk_free.png" title="Cabot Disk Free Check"></center><p>References:</p><ul><li><a href="https://github.com/ganglia/monitor-core/wiki/Ganglia-Quick-Start" target="_blank" rel="noopener">Ganglia Quick Start</a></li><li><a href="https://github.com/ganglia/monitor-core/wiki/Ganglia-Quick-Start#introduction" target="_blank" rel="noopener">Ganglia Deaf and Mute</a></li><li><a href="https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/" target="_blank" rel="noopener">How to Install and Configure Ganglia Monitor on Ubuntu 16.04</a> </li><li><a href="https://adamo.wordpress.com/2015/05/27/gmond-occupying-100-of-the-cpu/" target="_blank" rel="noopener">Gmond 100% CPU usage</a>, just use <code>deaf=yes</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been used many monitoring tools for over 4 years, but there has never been a tool which is so strongly strike my heart and meet my needs in the just right way. Most of them are focusing more on the so-called extensible back-end storage, but not many of them has really meet the requirement of monitoring out of box. Of course, that could be the secret of their business money making. &lt;/p&gt;
&lt;p&gt;Anyway, most of this article follows &lt;a href=&quot;https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/&lt;/a&gt; , just to give myself a quick notes to apply.&lt;/p&gt;
&lt;p&gt;Long time that no pictures, I love pictures. Here is one for you to enjoy: &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/12/18/Install-Ganglia-Start/Ganglia_my_cluster_Report.png&quot; title=&quot;My Cluster Overview Performance&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Monitor" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/"/>
    
      <category term="Ganglia" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/Ganglia/"/>
    
    
      <category term="Gmetad" scheme="https://morganwu277.github.io/tags/Gmetad/"/>
    
      <category term="Gmond" scheme="https://morganwu277.github.io/tags/Gmond/"/>
    
      <category term="Ganlgia Monitor" scheme="https://morganwu277.github.io/tags/Ganlgia-Monitor/"/>
    
      <category term="Graphite" scheme="https://morganwu277.github.io/tags/Graphite/"/>
    
      <category term="Metrics" scheme="https://morganwu277.github.io/tags/Metrics/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB MEM Management</title>
    <link href="https://morganwu277.github.io/2017/11/24/MongoDB-MEM-Management/"/>
    <id>https://morganwu277.github.io/2017/11/24/MongoDB-MEM-Management/</id>
    <published>2017-11-25T00:18:18.000Z</published>
    <updated>2017-12-22T17:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>NEVER USE MONGODB ON PRODUCTION. </p><p>Here the guy also meet my problem: <a href="https://news.ycombinator.com/item?id=5704572" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=5704572</a> </p><p>This post is about MongoDB memory management mechanism.<br>All it’s using is Page Cache of System.</p><p>This is a good experience report: <a href="https://speakerdeck.com/mitsuhiko/a-year-of-mongodb" target="_blank" rel="noopener">https://speakerdeck.com/mitsuhiko/a-year-of-mongodb</a></p><p>This URL gives you more details<br><a href="https://www.mongodb.com/presentations/mongodb-memory-management-demystified" target="_blank" rel="noopener">https://www.mongodb.com/presentations/mongodb-memory-management-demystified</a></p><p>OK, this post is just for me to check commands to use, to management MongoDB. </p><a id="more"></a><h1 id="connect">1. connect</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo 127.0.0.1:20001/<span class="variable">$&#123;DB_NAME&#125;</span> -u <span class="variable">$&#123;USER_NAME&#125;</span> -p <span class="variable">$&#123;PASSWORD&#125;</span></span><br></pre></td></tr></table></figure><h1 id="db-working-set">2. db working set</h1><p>Use this to determine how much memory do you need of your working set under your current database.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; db.runCommand(&#123;serverStatus: 1, workingSet: 1&#125;).tcmalloc.formattedString</span><br><span class="line">------------------------------------------------</span><br><span class="line">MALLOC:     7614540648 ( 7261.8 MiB) Bytes <span class="keyword">in</span> use by application</span><br><span class="line">MALLOC: +    236527616 (  225.6 MiB) Bytes <span class="keyword">in</span> page heap freelist</span><br><span class="line">MALLOC: +    657428112 (  627.0 MiB) Bytes <span class="keyword">in</span> central cache freelist</span><br><span class="line">MALLOC: +     53399376 (   50.9 MiB) Bytes <span class="keyword">in</span> transfer cache freelist</span><br><span class="line">MALLOC: +     17635000 (   16.8 MiB) Bytes <span class="keyword">in</span> thread cache freelists</span><br><span class="line">MALLOC: +     27570336 (   26.3 MiB) Bytes <span class="keyword">in</span> malloc metadata</span><br><span class="line">MALLOC:   ------------</span><br><span class="line">MALLOC: =   8607101088 ( 8208.4 MiB) Actual memory used (physical + swap)</span><br><span class="line">MALLOC: +    603160576 (  575.2 MiB) Bytes released to OS (aka unmapped)</span><br><span class="line">MALLOC:   ------------</span><br><span class="line">MALLOC: =   9210261664 ( 8783.6 MiB) Virtual address space used</span><br><span class="line">MALLOC:</span><br><span class="line">MALLOC:         326169              Spans <span class="keyword">in</span> use</span><br><span class="line">MALLOC:             56              Thread heaps <span class="keyword">in</span> use</span><br><span class="line">MALLOC:           8192              Tcmalloc page size</span><br><span class="line">------------------------------------------------</span><br><span class="line">Call ReleaseFreeMemory() to release freelist memory to the OS (via madvise()).</span><br><span class="line">Bytes released to the OS take up virtual address space but no physical memory.</span><br></pre></td></tr></table></figure></p><h1 id="db-stats">3. db.stats()</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stats()</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"db"</span> : <span class="string">"xxxx"</span>, // this has been covered due to classification info </span><br><span class="line"><span class="string">"collections"</span> : 4,</span><br><span class="line"><span class="string">"objects"</span> : 39817003,</span><br><span class="line"><span class="string">"avgObjSize"</span> : 113.20676571262784,</span><br><span class="line"><span class="string">"dataSize"</span> : 4507554130,</span><br><span class="line"><span class="string">"storageSize"</span> : 2112126976,</span><br><span class="line"><span class="string">"numExtents"</span> : 0,</span><br><span class="line"><span class="string">"indexes"</span> : 12,</span><br><span class="line"><span class="string">"indexSize"</span> : 2265329664,</span><br><span class="line"><span class="string">"ok"</span> : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NEVER USE MONGODB ON PRODUCTION. &lt;/p&gt;
&lt;p&gt;Here the guy also meet my problem: &lt;a href=&quot;https://news.ycombinator.com/item?id=5704572&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://news.ycombinator.com/item?id=5704572&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;This post is about MongoDB memory management mechanism.&lt;br&gt;All it’s using is Page Cache of System.&lt;/p&gt;
&lt;p&gt;This is a good experience report: &lt;a href=&quot;https://speakerdeck.com/mitsuhiko/a-year-of-mongodb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://speakerdeck.com/mitsuhiko/a-year-of-mongodb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This URL gives you more details&lt;br&gt;&lt;a href=&quot;https://www.mongodb.com/presentations/mongodb-memory-management-demystified&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.mongodb.com/presentations/mongodb-memory-management-demystified&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OK, this post is just for me to check commands to use, to management MongoDB. &lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://morganwu277.github.io/categories/Database/"/>
    
      <category term="NoSQL" scheme="https://morganwu277.github.io/categories/Database/NoSQL/"/>
    
      <category term="Document" scheme="https://morganwu277.github.io/categories/Database/NoSQL/Document/"/>
    
    
      <category term="MongoDB" scheme="https://morganwu277.github.io/tags/MongoDB/"/>
    
      <category term="Memory" scheme="https://morganwu277.github.io/tags/Memory/"/>
    
      <category term="PageCache" scheme="https://morganwu277.github.io/tags/PageCache/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare doesn&#39;t support ETag</title>
    <link href="https://morganwu277.github.io/2017/10/20/CloudFlare-doesn-t-support-ETag/"/>
    <id>https://morganwu277.github.io/2017/10/20/CloudFlare-doesn-t-support-ETag/</id>
    <published>2017-10-20T22:27:03.000Z</published>
    <updated>2017-11-01T04:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Because only Nignx &gt;= 1.3.3 have etag options.<br>How stupid of this blog….<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Because only Nignx &amp;gt;= 1.3.3 have etag options.&lt;br&gt;How stupid of this blog….&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Nginx" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/"/>
    
      <category term="Cache" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/Cache/"/>
    
    
      <category term="Nginx" scheme="https://morganwu277.github.io/tags/Nginx/"/>
    
      <category term="Cache" scheme="https://morganwu277.github.io/tags/Cache/"/>
    
      <category term="CloudFlare" scheme="https://morganwu277.github.io/tags/CloudFlare/"/>
    
  </entry>
  
  <entry>
    <title>My conf</title>
    <link href="https://morganwu277.github.io/2017/10/19/My-Fluentd-conf/"/>
    <id>https://morganwu277.github.io/2017/10/19/My-Fluentd-conf/</id>
    <published>2017-10-19T22:56:34.000Z</published>
    <updated>2017-11-17T03:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Personal material, please leave.">    <label for="pass">Personal material, please leave.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Personal material, please leave.
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Logging" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Logging/"/>
    
    
      <category term="Fluentd" scheme="https://morganwu277.github.io/tags/Fluentd/"/>
    
  </entry>
  
  <entry>
    <title>Setup ElasticSearch, Fluentd, Kibana in Kubernetes</title>
    <link href="https://morganwu277.github.io/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/"/>
    <id>https://morganwu277.github.io/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/</id>
    <published>2017-10-18T17:05:32.000Z</published>
    <updated>2019-09-12T02:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Just a post about what we need to setup the <a href="https://www.elastic.co/" target="_blank" rel="noopener">ElasticSearch</a>/<a href="https://www.fluentd.org/" target="_blank" rel="noopener">Fluentd</a>/<a href="https://www.elastic.co/products/kibana" target="_blank" rel="noopener">Kibana</a>. For detailed and how do they work, please reference the official site.</p><p>Here is my final Kibana screenshot:</p><center><img src="/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/Kibana.png" title="Kibana Logging"></center><p>Beautiful, isn’t it?</p><p>This post will setup EFK tool chain in Kubernets. </p><a id="more"></a><h1 id="Setup-ElasticSearch-in-Kubernets">1. Setup ElasticSearch in Kubernets</h1><h2 id="Setup-ElasticSearch-ReplicationController">1.1. Setup ElasticSearch ReplicationController</h2><p>Here is ElasticSearch ReplicationController yaml, please note the volume is using <code>hostPath</code> because I’m using <code>nodeSelector</code> to deploy the ElasticSearch, which makes it sticky to the specific logging dedicated node.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging-v1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">        <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">logging:</span> <span class="string">"true"</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">gcr.io/google_containers/elasticsearch:v2.4.1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"ES_MAX_MEM"</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"1500m"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"ES_MIN_MEM"</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"500m"</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9200</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9300</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">transport</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">es-persistent-storage</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">es-persistent-storage</span></span><br><span class="line">        <span class="attr">hostPath:</span> </span><br><span class="line">          <span class="attr">path:</span> <span class="string">/mnt/volume-sfo2-03/logging_data</span></span><br></pre></td></tr></table></figure></p><h2 id="Setup-ElasticSearch-Service">1.2. Setup ElasticSearch Service</h2><p>It’s the plain service yaml file in Kubernetes.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">kubernetes.io/name:</span> <span class="string">"Elasticsearch"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31001</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-logging</span></span><br></pre></td></tr></table></figure></p><h2 id="Accessing-ElasticSearch-Request">1.3. Accessing ElasticSearch Request</h2><p>Just for test, use curl command to issue a request:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@kubernetes-master logging]<span class="comment"># curl 127.0.0.1:31001</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Ogress"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"kubernetes-logging"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"fOjPK7t2TqeR-GlhqGhzag"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"2.4.1"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"c67dc32e24162035d18d6fe1e952c4cbcbe79d16"</span>,</span><br><span class="line">    <span class="string">"build_timestamp"</span> : <span class="string">"2016-09-27T18:57:55Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"5.5.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Setup-Kibana-in-Kubernets">2. Setup Kibana in Kubernets</h1><h2 id="Setup-Kibana-Deployment">2.1. Setup Kibana Deployment</h2><p>Here is Kibana Deployment yaml file, we also make it sticky to logging node with <code>nodeSelector</code>. Make sure <code>KIBANA_BASE_URL</code> environment value is set to emtpy if you’re going to use <code>NodePort</code> to access Kibana. </p><p>Also, <code>Kibana</code> need to talk to <code>ElasticSearch</code> by using <code>http://elasticsearch-logging:9200</code>, so please make sure <a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns" target="_blank" rel="noopener"><code>kube-dns</code></a> works correctly before setting up the Kibana Service. </p><p>I will write another post about how <code>kube-dns</code> works. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kibana-logging</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kibana-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">kibana-logging</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">kibana-logging</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">logging:</span> <span class="string">"true"</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">kibana-logging</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">gcr.io/google_containers/kibana:v4.6.1</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"NODE_OPTIONS"</span> <span class="comment"># use this to control Kibana memory usage, and promote Kibana speed</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"--max-old-space-size=100"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"ELASTICSEARCH_URL"</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"http://elasticsearch-logging:9200"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"KIBANA_BASE_URL"</span></span><br><span class="line">            <span class="comment">#value: "/api/v1/proxy/namespaces/kube-system/services/kibana-logging"</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">""</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5601</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ui</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure><h2 id="Setup-Kibana-Service">2.2. Setup Kibana Service</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kibana-logging</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kibana-logging</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">kubernetes.io/name:</span> <span class="string">"Kibana"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5601</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">ui</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">31000</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kibana-logging</span></span><br></pre></td></tr></table></figure><h2 id="Accessing-Kibana-Service">2.3. Accessing Kibana Service</h2><p>Just for test, use curl command to issue a request:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@kubernetes-master logging]<span class="comment"># curl 127.0.0.1:31000</span></span><br><span class="line">&lt;script&gt;var hashRoute = <span class="string">'/app/kibana'</span>;</span><br><span class="line">var defaultRoute = <span class="string">'/app/kibana'</span>;</span><br><span class="line"></span><br><span class="line">var <span class="built_in">hash</span> = window.location.hash;</span><br><span class="line"><span class="keyword">if</span> (hash.length) &#123;</span><br><span class="line">  window.location = hashRoute + <span class="built_in">hash</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  window.location = defaultRoute;</span><br><span class="line">&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Setup-Fluentd">3. Setup Fluentd</h1><p>This is the <code>MOST</code> complicated part.</p><p>Before setting up fluentd, we need to test fluentd.conf locally. You can setup fluentd in a VM to test.</p><h2 id="Install-Fluentd-Locally-or-in-a-VM">3.1. Install Fluentd Locally or in a VM</h2><p>Follow <a href="https://docs.fluentd.org/v0.12/articles/install-by-deb" target="_blank" rel="noopener">Installation Notes</a> here. </p><p>Please make sure you install the latest version, which is <code>v0.12.40</code>. </p><p>If you can’t get version of <code>v0.12.40</code> after your installation, please use <code>embeded gem</code> to install. Follow this <a href="https://docs.fluentd.org/v0.12/articles/install-by-gem" target="_blank" rel="noopener">post</a>. </p><p>Here is what I do have locally:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">morganwu@localhost:~$ /opt/td-agent/embedded/bin/gem list fluentd</span><br><span class="line"></span><br><span class="line">*** LOCAL GEMS ***</span><br><span class="line"></span><br><span class="line">fluentd (0.12.40)</span><br><span class="line">fluentd-ui (0.4.4)</span><br><span class="line"><span class="comment"># or we can use `-v "~&gt; 0.12.0"` to install 0.12.xx latest version</span></span><br><span class="line">morganwu@localhost:~$ /opt/td-agent/embedded/bin/gem install fluentd -v <span class="string">"~&gt; 0.12.0"</span></span><br><span class="line">Fetching: fluentd-0.12.43.gem (100%)</span><br><span class="line">Successfully installed fluentd-0.12.43</span><br><span class="line">Parsing documentation <span class="keyword">for</span> fluentd-0.12.43</span><br><span class="line">Installing ri documentation <span class="keyword">for</span> fluentd-0.12.43</span><br><span class="line">Done installing documentation <span class="keyword">for</span> fluentd after 3 seconds</span><br><span class="line">1 gem installed</span><br></pre></td></tr></table></figure></p><h2 id="Install-Fluentd-ElasticSearch-Plugin">3.2. Install Fluentd ElasticSearch Plugin</h2><p>Use the embedded gem to install <a href="https://github.com/uken/fluent-plugin-elasticsearch" target="_blank" rel="noopener"><code>fluent-plugin-elasticsearch</code></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">/opt/td-agent/embedded/bin/gem install fluent-plugin-elasticsearch -v 1.10.3</span><br><span class="line"><span class="comment"># update 2019-04-05, after this plugin installed, fluentd 1.4.2 will be installed as a dependency automatically</span></span><br><span class="line"><span class="comment"># even you are install plugin version using 1.10.2</span></span><br><span class="line"><span class="comment"># so we need to manually uninstall the new fluentd version or we need the new conf</span></span><br></pre></td></tr></table></figure></p><h2 id="Workout-the-fluentd-conf-little-by-little">3.3. Workout the fluentd.conf little by little</h2><ol><li>Use <a href="http://rubular.com/" target="_blank" rel="noopener">a Ruby regular expression editor</a> for testing the reqular expression. </li><li>Use <a href="http://www.foragoodstrftime.com/" target="_blank" rel="noopener">For a Good Strftime</a> to test the time format. </li><li>Use <a href="https://docs.fluentd.org/v0.12/articles/filter_grep" target="_blank" rel="noopener">Fluetnd Documents</a> carefully. </li><li>Use <code>stdout</code> plugin to debug Fluentd conf. </li></ol><h2 id="Create-ConfigMap-in-Kubernetes">3.4. Create ConfigMap in Kubernetes</h2><p>Assume you do have a <code>fluentd.conf</code> now, let’s create one <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configmap/" target="_blank" rel="noopener">config map</a> for fluentd to use.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system create cm cm-fluentd-conf --from-file=td-agent.conf=./cm-fluentd-conf</span></span><br><span class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system get cm</span></span><br><span class="line">NAME              DATA      AGE</span><br><span class="line">cm-fluentd-conf   1         6d</span><br></pre></td></tr></table></figure></p><h2 id="Setup-Fluentd-DaemonSet">3.5. Setup Fluentd DaemonSet</h2><p>Please note, we are mounting the <code>cm-fluentd-conf</code> volume to <code>/etc/fluent/config.d</code> directory inside the container. </p><p>When we create the config map above, we specify <code>td-agent.conf=./cm-fluentd-conf</code>, which means inside the container, there will be a file <code>td-agent.conf</code> and it’s content comes from <code>./cm-fluentd-conf</code> provided above to create the config map. </p><p>Please note, it has the permission to read every logs in the <code>/var/log</code> directory. </p><p>To make it as <a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="noopener"><code>DaemonSet</code></a> to make sure it’s running on each server node. </p><p>We should make sure the <code>buffer_chunk_limit</code>*<code>buffer_chunk_size</code>(<a href="https://docs.fluentd.org/v0.12/articles/buffer-plugin-overview" target="_blank" rel="noopener">buffer-plugin-overview</a>) won’t exceed the limits of memory specified in the yaml file next.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fluentd-es-v2.0.1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">fluentd-es</span></span><br><span class="line">    <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v2.0.1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">fluentd-es</span></span><br><span class="line">        <span class="attr">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line">        <span class="attr">version:</span> <span class="string">v2.0.1</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">fluentd-es</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">gcr.io/google_containers/fluentd-elasticsearch:v2.0.1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FLUENTD_ARGS</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">--no-supervisor</span> <span class="string">-q</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-fluentd-conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/fluent/config.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/log</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm-fluentd-conf</span></span><br><span class="line">        <span class="attr">configMap:</span> </span><br><span class="line">          <span class="attr">name:</span> <span class="string">cm-fluentd-conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/docker/containers</span></span><br></pre></td></tr></table></figure></p><h1 id="Overview-the-deployed-components-in-Kubernetes">4. Overview the deployed components in Kubernetes</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system get rc,svc,cm,po</span></span><br><span class="line">NAME                          DESIRED   CURRENT   READY     AGE</span><br><span class="line">rc/elasticsearch-logging-v1   2         2         2         17d</span><br><span class="line"></span><br><span class="line">NAME                        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">svc/elasticsearch-logging   10.254.59.190    &lt;nodes&gt;       9200:31001/TCP   20d</span><br><span class="line">svc/kibana-logging          10.254.148.174   &lt;nodes&gt;       5601:31000/TCP   25d</span><br><span class="line">svc/kube-dns                10.254.0.10      &lt;none&gt;        53/UDP,53/TCP    25d</span><br><span class="line">svc/kubernetes-dashboard    10.254.151.70    &lt;none&gt;        9090/TCP         26d</span><br><span class="line"></span><br><span class="line">NAME                 DATA      AGE</span><br><span class="line">cm/cm-fluentd-conf   1         6d</span><br><span class="line"></span><br><span class="line">NAME                                       READY     STATUS    RESTARTS   AGE</span><br><span class="line">po/elasticsearch-logging-v1-19r6r          1/1       Running   0          17d</span><br><span class="line">po/elasticsearch-logging-v1-7xcq4          1/1       Running   1          17d</span><br><span class="line">po/fluentd-es-v2.0.1-79350                 1/1       Running   0          6d</span><br><span class="line">po/fluentd-es-v2.0.1-kbhq2                 1/1       Running   0          6d</span><br><span class="line">po/fluentd-es-v2.0.1-rbmsv                 1/1       Running   0          6d</span><br><span class="line">po/fluentd-es-v2.0.1-rxvg2                 1/1       Running   4          6d</span><br><span class="line">po/fluentd-es-v2.0.1-sb8gc                 1/1       Running   1          6d</span><br><span class="line">po/kibana-logging-1532071719-69rd2         1/1       Running   0          3d</span><br><span class="line">po/kube-dns-v10-244463722-vmnr2            3/3       Running   0          7d</span><br><span class="line">po/kubernetes-dashboard-1786549131-m9r9r   1/1       Running   4          17d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just a post about what we need to setup the &lt;a href=&quot;https://www.elastic.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ElasticSearch&lt;/a&gt;/&lt;a href=&quot;https://www.fluentd.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fluentd&lt;/a&gt;/&lt;a href=&quot;https://www.elastic.co/products/kibana&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kibana&lt;/a&gt;. For detailed and how do they work, please reference the official site.&lt;/p&gt;
&lt;p&gt;Here is my final Kibana screenshot:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/Kibana.png&quot; title=&quot;Kibana Logging&quot;&gt;&lt;/center&gt;

&lt;p&gt;Beautiful, isn’t it?&lt;/p&gt;
&lt;p&gt;This post will setup EFK tool chain in Kubernets. &lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Logging" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Logging/"/>
    
    
      <category term="Fluentd" scheme="https://morganwu277.github.io/tags/Fluentd/"/>
    
      <category term="ElasticSearch" scheme="https://morganwu277.github.io/tags/ElasticSearch/"/>
    
      <category term="Kibana" scheme="https://morganwu277.github.io/tags/Kibana/"/>
    
      <category term="Kubernetes" scheme="https://morganwu277.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>工作の思考</title>
    <link href="https://morganwu277.github.io/2017/07/16/%E5%B7%A5%E4%BD%9C%E3%81%AE%E6%80%9D%E8%80%83/"/>
    <id>https://morganwu277.github.io/2017/07/16/工作の思考/</id>
    <published>2017-07-16T18:52:18.000Z</published>
    <updated>2017-10-19T22:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="No pain, no gain.">    <label for="pass">No pain, no gain.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19VIyrOUuaJl7BZfUvlLedVklaNVv8axmCtjS08Zz6slLGtXh3TmOgUBA3c3zV/0rSUFOhyHOYb5ae3ShgsFdIMeD6eGZ63QNEqpyLj8LTuKcddAyUAdUsxlvmHSmg0JmON2hoMf0brSP0dg3i5zCCaAGXYURdp9BMmTykIq8ZX2NEVe7oyqwle7WCQNvWxr9aCh3iYkfko4eaNnI1xmQsEv7z99SK8dIMEFt5ouDWdeLrzgozF4JEHfdZk0G1WbmXJyVp2LWJ4UgCJA6z2GvA65ecgjhcegKUjhw6cu2uQWD81nA7zJuOwNLukoYSzYsRoPnUYNQwHZj9WqPFW8Vy6aP8sdDw9Mai3mew9QM77BkUAMSkaSp2c9r/d27B6FYkljgt9BY/J2OM0Zl5DeoSXn59ConwT3/WxM9EVlJ0//M7DDTqvV9v7X57vCQ85HzRTz4LJ4+rgtEzejOq0W9dZFk6YivdBvooRmGt4qKbxBhXfFHpAXz8EU53gEgjnvv9ePnfT+afScn0l4x56nL3sMDNE+Sc7Fk8UMTHauXbprUDEZNCpVXP6TwtHLxHjHPi25DtTjxHP90ephRuT+bGu7HX7WzorRaBmTEkt3eP3UzDp09qZUQiPwJfkC4MYZ9yiPh2cNg7hQQz+FSm0VerxTnkMVPAAXPVTwsT8a9l+uC9OdCNDIjqyjwMIoVlIlzayOX7GxY/BPegZGiPix/YKfREL+z/QZ5/dItSr5sZpWSBBwtml8fywmbUpF0+WoMzwnlBbkAFi7KIlQYUa7RUinrPLfS5/H+Uq6klqqcLGgWaeXqd49329Ucn7qojTkyFePwqTzFjm0QCYm/ydFN5axTabm/FXxTbEV4FK3Ug4SrUmiO6wNbnwDQ+hZZH53CJGe4C6ZfwKS1mrBYC+HGt5FwpTIItk4dkzu9PHahiWNjGazXhTd+LNs4WaJeCIcD40WpShMl7XR2cjYksnBkQyVZUEj3CXfWPhzsJuuIq1sL7Zatb/8rd4neemWsGplHJmyegoN6DV2kgLmuW8pHPtmIoUxbDRDhCf82LrYdJXNdmPEOLu43Mf1coBnR9KVlq/h4zEVIA5GDWn6+vLfYf518/aQttvQtWcSPL0635zSIx7BjMqqZlyVtyD+6hXF/JjuEuyL9pJ4BqFcj6d27ULztDdJXoDjLShqggMYwg24xxwWTweAJG7uOaBlVk96hYAY5WjcufTWBAGiIEasDJ6DSYE4oHmS4n1XCSQd2VG2XUZyBCnvgyrDLJnBy7Sci2jffPqTxwe4aE7CMDXTCKSvzb+KZ+0B9TkLFVGuuAOtjFNcg+nePJYLfUjSdDeAdCwV58gPuYQTFrtimuqpEJlUGrg2HBYMZVMUWyRwbiQSKp6LQxGAhBsDV+X45Eh6kt+XY3I5AnfefauWI+COh7CiplZae5mamEJOq9PhGRBSjRam/F6Sf+baf+KTeRh47X03nS4gr1I7o2IeKl1Srk7g7hbW4D103mj68oIJSynhgJgt0eJPKekNbCMuooOOl+4NxxUPrnmto3kw7lVNXm2W7gX3PKRZQul9KinbBpQXfJtBQrHyTIxbA1yhyc/vZryVImYMwDBCrFk9a/spNFNmAK3Ugq7jmIhbr78kFcXdbO3V3QXOKNk6D/lJr18z+28y3p2Inax5S/+Pa8hq8iyNLSYB+1jpl2PwUIA/C3Ap6bYd5RqzySmMvzns8Xhb4SXGjvm8cQogT++9HUH18PvszrX2ibCzzli9dJF/nNKhI31jPBNSHBT2CIkV4MvIj64ucdAAmXxH0PvMVJKcs8r88Men4X1qwIl8mkqhN3ESfkNjGdbZ66SVXeydmPMq20MlCDTSAjdupZWPExGys5ganZBXyUPzi8IgqUwXJsx2A55PsV4Ha1aiHV7nCVDEn3jnYKmqQhrLzLJ9Tg0tq79nAClL9sNqMSwODj3uAOUWRWP/340hnn9wtRSSc19dprSo8Vd042wy/RZK4LIzzobKLvDzYRPDZLOT2cwE+wuxjkYqf96kWDTJMAsg+rpk7TxGtnmN5RgRrcAu+Zk0kVi8eyLO1P+ekCLLbIP8Q4frT2BxpirG+HeNs9LikPtDQPoHPE/lVRv1XIbSQ5L9HmErAGykUSI51TBIZKyovm5h1ErF7HzHc9RASekpzV6c5ONvTKG2zr3jCLaHbyCNud3oQ2zZgZEi0nQQkbDncNParwu/HOGmHze6G1yDMcPXEugVvnD8PWFap4aiYKuYO+DLfpVwYGNLZ0EWMcXcT4wubdlbFXRJ3kRJBr3o5zDlaOOdT7iJGGAybAb4kCes6UdHWX3zOTL3QR3c5jlrFUHc29zOW5iHULKpBNxx8zRr1CjBqjSrCCBIWL/AUcl8Gfa9fYt0qZgKBSon7bNhjLRXw991L0VaXRnRtsfxvOXIaWsTZvdq9KACYVrIbkATIY4BEZnFXrcn36cc3o53FWKsFjzqlLN79YyaOfBtsFGqHecdVreBoO2T+GdF6VH1DfIn2RL24FbfLtFet5XkUPYnw90G9oKs0HGIrmczo4Ib3iFXrwkyvDjy9ny9jOrU5wtu25KBh95EDL2bDLvM/OJ0LbqO1Y0tpp/0a5/FEBIV9A85n5csCTNJQxRGcvcdFkhem4ZGIc2/XTiqZyLozMaKyUVmJH8uCc/gh/HCIXNJe+zprflFtJD1mN2rmTFi1ylheSygn9SRcS3lZ24baBSV//c2NblJF8KJO0Bj5svdFrDY1wUzhd+2n7nB934wfxoQTqVvuVCBydbomsL9AtO32VwpkFKhqozXsGV/RPs2m++KVSo/WPtiaT1XgLQdzhigupe+RDYmZucv2YXCcuxIJcwIJ0V1iwrwUZODA5+JZ8WoUJMBIK9cVCuPFD5Uj0lVTVYLQ737UBhJfIr6nBtKiUPWeAfF/tEkpFgBVYFcXhaw9IWjWUc4OQ4h5GMIMHNlYmmUwzUbZq1Ltfz7znpDADAfOtbpCyEZP77BQhnPPkZ4YiERAiGM+1bkSqhs+DVGXEHYlVix+/vU/8nnteceAF6prCx2Kpt2Rdb3P/WDmVfKQdZaD/75zTwoYw0VnVKErg1o/JTMRZlCbZ2YAOWqG6rsvHSGjbmFrAt21a5VtQdUCl42V3g9LD+rppipKb12q+i2ovN/y2uJOgtENvm7qDqV7xa2EgxJat6fDfCQPFjm+h2pemY5GU8hP343UwV+fDNR+7lsNNX/76jlXEVP9wXRS2wCjhkoRRUMZMfS3GmXxm4R86edLlXRfx1MLmQf/DygvwXxcAls12Ycx+CJZqq1/MHvmqbqf1303jd7W2I7mSzwVaCIc7Do8BK12R17h7Uo49kDd393k3mVw/zHHTRx40C5u2UxstEPp+k3KpyWz64axad6CwT3UNmCE7bYDh5xVEFZDvdm4vnNACbcyJEG6UJencRRfXAlGCQJ2hYeZ280t0yRbN3sbc9p6AJgp2B8I5phkOGZCUySFKT2UhjiXTXC6gz8uTaOLkD6Ub/5EmtXmL/XYn7cNb4WktUnNfiOKd4WFMraPLGZGNpKlK/JcYGfFT609OM/x5FQ/wsfmlfC7EjzmkSgj/maHty3ku2qyEC8yipIVMO60K4u192xgrrsKf41113BfURb793L94mu+VSQUpMYwnN+V8t1lh2MHrsUY+SrDGh1JP6Qs/FVP0xCVppoIA8ehEmcPxuJ27K3fNzHDMSLicVfWkWhSW2cnHDg/SDvnuZZVQbiShmKi39Uifxup8/yiHnSLibAAyuWmDK9Q8OgOqyKWN6vn3yn/nLBl4ZH3M6Pqg6BOme5dMNUKeEVWx/gTXLNtHhTw9l6Q7ra6WWs/N7QQqqkxIu+gYdlxSGje5u3ja7m+fatZmcOq07H6Ap/V6/1MtwBfCByb/zR8NMnOdCCsNLfOev60D5pUzKaLww/J2NacBTGcyFH4w5UliEMLg7CeyRvIugcO6XSGT9Xrvxbsu9r7G9TabW/mqVUogpDI93iues3w19LpChLUMBzUWLNAz60eS39sveZqf6zmjSaodbYoQRNj9ghI2QIy10IgJl6U69Q6eLqvKBrFUcVrpKsR2HFdI+GWqVh9Pg5jkwnBFoltamPe2Hss619xHTuij8VP7MFNaVpqYi/0D4eQVpfOVQFkDig19GLEWoUgrvCyRZFhleA2QAAoTRp84EG+QxBPlqrGvny4/mApY2ECjck2acY7eYmvCluUaUmrK013bxDVINCvg65RH1+IlZqZZEapP8NCYC5z0ulc/qgqlECF6h4pf9jpCcFSDHbMOR7CbuWc6evnx6HVmax8+cqbN8U4I8KCFzqYcqCSUe5FpjWrGJL3zzCY2RYnhlUShowhz4smLdt226m1cySn92MhWr0u1W+OQde3jJfQm+5yZaXVW4aqfly4FIEKYVToMIvfKYicj28HSNvOdyVEM7HdibrV8WAo2AbeDh6GgX4QNeHplDqzTNPZ0VyGVLLT15v2Pt62ojVE1LDz0NDiac6R9VOmNvnNs2tOneDmqDV84qK3CqbYS5vDN0gN6N9++vYzLVfeVSHskCuxXE7hTQdbt2jHzhNpAKWtkrRhROFik1ys0dGtBgcEhsGQZHT0E7u/+HjNlKlzF4TF3qwpOstEx2gNOt9fBNV5ehsKNuR2HxIXxUS+5J4ISAwxAEPK4B7QHzVHS+K2H237glPLRvW7vT17hnXF6+zomupMxdJEZiODOV+PrNZqakKJ3cFuQYH0Cqvj9+orX4N1fRKbpYY0MSQBSXPMSdTT6vYT4gR+V5TbvYxcpFD83hL1LPno6L4nqD3G0iyLkB06KICyEGGZycq/s1IKpDNkcmPw/K8E1q5EJpFdgfuo2/2YJiCkTOqzAIZW3CaPVNjT9nm8wywvP/DCVjj3NFYfV7pibob+RHazCwcU3e5yaGwR/PRTMNXYuiRJQOWMdJQBsp+4l1X9UODpxXvSACWHlKFiElPVm9vcLXKFvlwGowy3WyBtwY2WyXXzRjGBJaq2uONFCnMPmxM9FlkjiexRsV7U0r1dslfCRNsAhOyx9uT7WkCYYx675kDJL1/O3lBqlhaalqeVBTeLxGUVl5oZqP0gh5hhbVnE3Pmx8JcGtsWtYUbj0SgF/vJBeL4Wj8e1+c5AAMXG/MA7m6FOyo43AcL6RFcW8/t0VVq6LSIY5FzgP2CUgsgtEDklsWZDOQu7vO50DWEgIl1Z8Znufx/MNh4s/eiKaBmB94bD0dB8qzqHve/wxyVbvbaIM++nxwPuuhany78BVDrfjXzaJQr3NnVOnvi2XS37psyrb0z4JwiwX/Ezmc5QalrqlNidjsYR9RkP/LlI1ZdV334cRny88208KNQI9KAHMFjk6bD/5kcQ71Sqb2BnSJYgbVV0p60Hlz/gYKlJJ0C/z47rX2ZePQFgSI/E/cySceOBsVLU9E6CQT6AyswhvDPshbdGetfM6SdzSGVTnNT0R1evDxcENVjsjxXkoAY2rKm2zV/qTD+6kL+DrozHD1w4gNZj4hBjoji/TMEhFOh5a0fAEetIgUDR8k90MffZuYwftyx6wPP34+ba/fCQvzn6d+SQS0Mh/IyO6nQQoYCYRoW/rQ3M9jsCXcO3D3e9UbkRsaUfy0fG9zc/d2ukjlBjysLkuBdRAbPTPTHgVpPLoCT3dgzQUqQGzGjZoa6UPq//8aR94PT5gCasdVYlrhYxmIE+VQuvI=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      No pain, no gain.
    
    </summary>
    
      <category term="职场" scheme="https://morganwu277.github.io/categories/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="合作" scheme="https://morganwu277.github.io/categories/%E8%81%8C%E5%9C%BA/%E5%90%88%E4%BD%9C/"/>
    
    
      <category term="工作" scheme="https://morganwu277.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="为人处事" scheme="https://morganwu277.github.io/tags/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Redis Scan Too Slow in Django Application</title>
    <link href="https://morganwu277.github.io/2017/07/16/Django-Redis-Scan-Too-Long/"/>
    <id>https://morganwu277.github.io/2017/07/16/Django-Redis-Scan-Too-Long/</id>
    <published>2017-07-16T06:32:46.000Z</published>
    <updated>2021-05-21T15:58:14.380Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I met an issue that one of our APIs of the online production servers is very slow due to <code>redis scan</code>. </p><p>From next graph generated by NewRelic, we found AVERAGE <code>response time</code> is 2930ms while <code>redis scan</code> could take 2680ms, which is 2680/2930 = 91.4% portion of the total time. </p><center><img src="/2017/07/16/Django-Redis-Scan-Too-Long/redis-scan-slow.png" title="Redis Scan Too Slow"></center><p>Why redis scan cost this much? From our local environment, we never noticed such huge performance issue. </p><a id="more"></a><h1 id="Locate-the-culprit">1. Locate the culprit</h1><h2 id="Phenomenon">1.1. Phenomenon</h2><p>After that I dug into the source code and found next code snippet in our Django Application and this is the only code of this API to access <code>redis</code>, so this must be the culprit of this issue. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line">// ...... more code <span class="keyword">is</span> ommitted here</span><br><span class="line"></span><br><span class="line">cache.delete_pattern(CACHE_KEY)</span><br></pre></td></tr></table></figure><p>From the above code, we could know that redis is treated as a cache server here.</p><p>So what does <code>delete_pattern</code> do on the earth? So I traced the code and in the end found next <code>delete_pattern</code> definition from <code>django_redis.client.default.DefaultClient#delete_pattern</code>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_pattern</span><span class="params">(self, pattern, version=None, prefix=None, client=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Remove all keys matching pattern.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        client = self.get_client(write=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    pattern = self.make_key(pattern, version=version, prefix=prefix)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> client.scan_iter(pattern): // please note here</span><br><span class="line">            client.delete(key)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">except</span> _main_exceptions <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> ConnectionInterrupted(connection=client, parent=e)</span><br></pre></td></tr></table></figure><p>The code calls <code>client.scan_iter(pattern)</code> to get next cursor and try to delete that key of the cursor. </p><h2 id="Redis-scan">1.2. Redis scan</h2><p>From the official site of <a href="https://redis.io/commands/scan" target="_blank" rel="noopener">redis scan</a>, we can combine <code>MATCH</code> and <code>COUNT</code> in the <code>SCAN</code> command.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; scan 0 MATCH *11*</span><br><span class="line">1) <span class="string">"288"</span></span><br><span class="line">2) 1) <span class="string">"key:911"</span></span><br><span class="line">redis 127.0.0.1:6379&gt; scan 288 MATCH *11*</span><br><span class="line">1) <span class="string">"224"</span></span><br><span class="line">2) (empty list or <span class="built_in">set</span>)</span><br><span class="line">redis 127.0.0.1:6379&gt; scan 224 MATCH *11*</span><br><span class="line">1) <span class="string">"80"</span></span><br><span class="line">2) (empty list or <span class="built_in">set</span>)</span><br><span class="line">redis 127.0.0.1:6379&gt; scan 80 MATCH *11*</span><br><span class="line">1) <span class="string">"176"</span></span><br><span class="line">2) (empty list or <span class="built_in">set</span>)</span><br><span class="line">redis 127.0.0.1:6379&gt; scan 176 MATCH *11* COUNT 1000</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2)  1) <span class="string">"key:611"</span></span><br><span class="line">    2) <span class="string">"key:711"</span></span><br><span class="line">    3) <span class="string">"key:118"</span></span><br><span class="line">    4) <span class="string">"key:117"</span></span><br><span class="line">    5) <span class="string">"key:311"</span></span><br><span class="line">    6) <span class="string">"key:112"</span></span><br><span class="line">    7) <span class="string">"key:111"</span></span><br><span class="line">    8) <span class="string">"key:110"</span></span><br><span class="line">    9) <span class="string">"key:113"</span></span><br><span class="line">   10) <span class="string">"key:211"</span></span><br><span class="line">   11) <span class="string">"key:411"</span></span><br><span class="line">   12) <span class="string">"key:115"</span></span><br><span class="line">   13) <span class="string">"key:116"</span></span><br><span class="line">   14) <span class="string">"key:114"</span></span><br><span class="line">   15) <span class="string">"key:119"</span></span><br><span class="line">   16) <span class="string">"key:811"</span></span><br><span class="line">   17) <span class="string">"key:511"</span></span><br><span class="line">   18) <span class="string">"key:11"</span></span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p><p>The above command returned me with a <code>0</code> means, in the first line of response, there is no more data to scan. If not <code>0</code>, the number is next cursor to be used to scan. </p><blockquote><p>It is important to note that the MATCH filter is applied <strong><code>after</code></strong> elements are retrieved from the collection, just before returning data to the client. </p></blockquote><p>This means, firstly it will retrieve the data, and then will use a filter to match the retrieved data.<br>Does this means there could be multiple back-and-forth between the client and server, and which will cost the huge latency of this redis scan? If that’s true, we just need an extra easy <code>COUNT</code> parameter. </p><h1 id="Validation-in-local-environment">2. Validation in local environment</h1><h2 id="KEYS-number">2.1. KEYS number</h2><p>How many keys are there in our online production redis server?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379[10]&gt; INFO</span><br><span class="line"><span class="comment"># more code is ommitted here</span></span><br><span class="line">db10:keys=6986,expires=6986,avg_ttl=40118300</span><br></pre></td></tr></table></figure></p><p>From above code, we can know there are nearly 7000 keys in our server. </p><h2 id="Client-Server-latency">2.2. Client-Server latency</h2><p>I simply use the <code>ping</code> command to get the latency and it’s 3.5 ms. Due to classified cause, sensitive info is hidden.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[xxx@xxxx.xxx.xxx.xxx ~]$ ping xxxx.com</span><br><span class="line">PING xxxx.com (xx.xx.xx.xx) 56(84) bytes of data.</span><br><span class="line">64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=1 ttl=58 time=3.58 ms</span><br><span class="line">64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=2 ttl=58 time=3.46 ms</span><br><span class="line">--- xxxx.com ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 3004ms</span><br><span class="line">rtt min/avg/max/mdev = 3.461/3.498/3.585/0.050 ms</span><br></pre></td></tr></table></figure></p><h2 id="Simulate-the-Network-Latency-Locally">2.3. Simulate the Network Latency Locally</h2><p>From this <a href="http://bencane.com/2012/07/16/tc-adding-simulated-network-latency-to-your-linux-server/" target="_blank" rel="noopener">post</a>, I successfully simulated the network latency.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(venv) vagrant@localhost:~ $ sudo tc qdisc add dev lo root netem delay 2ms </span><br><span class="line">(venv) vagrant@localhost:~ $ ping 127.0.0.1</span><br><span class="line">PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=4.34 ms</span><br><span class="line">--- 127.0.0.1 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 4.348/4.348/4.348/0.000 ms</span><br></pre></td></tr></table></figure></p><p>So I made the <code>lo</code> NIC as slow as around 4.3 ms. </p><p>Other commands to be used for <code>tc qdisc</code>:<br>baisc syntax: <code>tc qdisc add/del dev lo/eth0/eth1 root netem [delay 2ms]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># add rule to lo NIC</span><br><span class="line">tc qdisc add dev lo root netem delay 2ms</span><br><span class="line"># add rule to eth0 NIC</span><br><span class="line">tc qdisc add dev eth0 root netem delay 2ms</span><br><span class="line"># test</span><br><span class="line">tc -s qdisc</span><br><span class="line"># delete rule</span><br><span class="line">tc qdisc del dev eth0 root netem</span><br></pre></td></tr></table></figure></p><h2 id="Measure-the-time-of-cleaning-the-cache-before-and-after-setting-the-delay">2.4. Measure the time of cleaning the cache before and after setting the delay</h2><p>Since this is a Django application, so I can use Django Shell to try to execute the clean cache statement, which as a result operate the local redis server.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) vagrant@localhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all")'</span></span><br><span class="line"></span><br><span class="line">real    0m8.404s</span><br><span class="line">user    0m0.944s</span><br><span class="line">sys     0m0.696s</span><br></pre></td></tr></table></figure></p><p>What if we don’t set the delay option, what’s would the timing metric be?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) vagrant@lcoalhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete("view_cache:dispatch:123456789:category_slug:all")'</span></span><br><span class="line"></span><br><span class="line">real    0m4.366s</span><br><span class="line">user    0m0.800s</span><br><span class="line">sys     0m0.648s</span><br></pre></td></tr></table></figure></p><p>From the above test, we can see that before and after will make a huge difference as large as 4 seconds !!! And this is under the network latency of 4.3 ms. If the network latency is around 3.5 ms, the total time of cleaning cache could be as large as 3 seconds, which is very close the above phenomenon!</p><p>Now, we can get a conclusion: network latency will influence too much on the <code>redis scan</code> performance. <code>SCAN</code> will call the redis multiple times back-and-forth, which in the end, cause a large <code>redis scan</code> time. </p><p>How to solve the problem? Use the <code>COUNT</code> parameter!</p><h1 id="Solve-the-problem">3. Solve the problem</h1><h2 id="Estimation-of-deleting-time-again">3.1. Estimation of deleting time again</h2><p>From the definition of <code>delete_pattern</code> method, we can see it just <code>scan_iter</code> the redis using the default <code>COUNT</code> which is 10. Let’s give an estimation here:</p><ol><li>The <code>Redis Scan</code> use a sequential scan with <code>COUNT</code> as 10, there will be 6986/10 = 700 times to scan. </li><li>Each scan costs at least 1 ping time, which is 3.5 ms.</li><li>In total, 3.5*700 = 2450 ms, which is close to the 2680 ms of the phenomenon above. Interesting.  </li></ol><p>From above estimation, we are more confident of our guess now, and using the <code>COUNT</code> must be the solution!</p><p>But the <code>delete_pattern</code> method provided by the default client doesn’t use <code>COUNT</code> parameter, so what I can do is to create a new Redis Client which is inherited from the default Client and override this <code>delete_pattern</code> method to use the <code>COUNT</code> parameter.</p><p>Here is my code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compatibility with redis-py 2.10.x+</span></span><br><span class="line"><span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> ConnectionError</span><br><span class="line"><span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> ResponseError</span><br><span class="line"><span class="keyword">from</span> django_redis.exceptions <span class="keyword">import</span> ConnectionInterrupted, CompressorError</span><br><span class="line"><span class="keyword">from</span> django_redis.client <span class="keyword">import</span> DefaultClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> TimeoutError, ResponseError</span><br><span class="line">    _main_exceptions = (TimeoutError, ResponseError, ConnectionError, socket.timeout)</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    _main_exceptions = (ConnectionError, socket.timeout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheClient</span><span class="params">(DefaultClient)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_pattern</span><span class="params">(self, pattern, itersize=None, version=None, prefix=None, client=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Remove all keys matching pattern.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> client <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            client = self.get_client(write=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        pattern = self.make_key(pattern, version=version, prefix=prefix)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> client.scan_iter(pattern, count=itersize): // have a itersize here</span><br><span class="line">                client.delete(key)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        <span class="keyword">except</span> _main_exceptions <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> ConnectionInterrupted(connection=client, parent=e)</span><br></pre></td></tr></table></figure></p><p>When I call the code, I make sure to pass the <code>itersize</code> very large, say, 10,000 to eliminate too many back-and-forth RPC calls. </p><h2 id="Enable-the-customized-redis-client-class">3.2. Enable the customized redis client class</h2><p>Of course we need to enable this client in our <code>settings/local.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django_redis.cache.RedisCache'</span>,</span><br><span class="line">        <span class="comment"># redis server</span></span><br><span class="line">        <span class="string">'LOCATION'</span>:</span><br><span class="line">        os.environ.get(<span class="string">'NOJ_REDIS_CACHE_URL'</span>, <span class="string">'redis://localhost:6379/10'</span>),</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'PARSER_CLASS'</span>: <span class="string">'redis.connection.HiredisParser'</span>,</span><br><span class="line">            <span class="string">'CLIENT_CLASS'</span>: <span class="string">'common.cache_client.CacheClient'</span> // enable the customized redis client <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="Test-after-fixing">3.3. Test after fixing</h2><p>I added a <code>10000</code> after my <code>delete_pattern</code> call.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) vagrant@localhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all",10000)'</span> </span><br><span class="line"></span><br><span class="line">real    0m4.021s</span><br><span class="line">user    0m0.784s</span><br><span class="line">sys     0m0.612s</span><br></pre></td></tr></table></figure></p><p>The time now is very close to the time before setting the network latency, which means, <code>delete_pattern</code> won’t be a performance issue anymore, since it only has one RPC call now. </p><p>Cheers, bro!</p><h1 id="Conclusion">4. Conclusion</h1><ul><li>Don’t be afraid of the library source code, just dig into it.</li><li>Use <code>tc</code> command to simulate the network latency.</li><li><code>MATCH</code> in<code>Redis Scan</code> is to filter on top of the retrieved data. </li><li>Default <code>COUNT</code> of <code>Redis Scan</code> is 10. </li><li>Use <code>python manage.py shell</code> to execute ad-hoc test.</li><li>Use <code>ping</code> to get network latency. </li><li>Use <code>INFO</code> to get redis statistical information. </li></ul><hr><p><strong>References</strong></p><ul><li><a href="https://redis.io/commands/scan" target="_blank" rel="noopener">Redis Scan</a></li><li><a href="http://bencane.com/2012/07/16/tc-adding-simulated-network-latency-to-your-linux-server/" target="_blank" rel="noopener">tc: Adding simulated network latency to your Linux server</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I met an issue that one of our APIs of the online production servers is very slow due to &lt;code&gt;redis scan&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;From next graph generated by NewRelic, we found AVERAGE &lt;code&gt;response time&lt;/code&gt; is 2930ms while &lt;code&gt;redis scan&lt;/code&gt; could take 2680ms, which is 2680/2930 = 91.4% portion of the total time. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/07/16/Django-Redis-Scan-Too-Long/redis-scan-slow.png&quot; title=&quot;Redis Scan Too Slow&quot;&gt;&lt;/center&gt;

&lt;p&gt;Why redis scan cost this much? From our local environment, we never noticed such huge performance issue. &lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://morganwu277.github.io/categories/Database/"/>
    
      <category term="NoSQL" scheme="https://morganwu277.github.io/categories/Database/NoSQL/"/>
    
      <category term="In-Memory" scheme="https://morganwu277.github.io/categories/Database/NoSQL/In-Memory/"/>
    
    
      <category term="Django" scheme="https://morganwu277.github.io/tags/Django/"/>
    
      <category term="Redis" scheme="https://morganwu277.github.io/tags/Redis/"/>
    
      <category term="Scan" scheme="https://morganwu277.github.io/tags/Scan/"/>
    
      <category term="Performance" scheme="https://morganwu277.github.io/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Debug Ansible and Tiny Introduction of PlayBook</title>
    <link href="https://morganwu277.github.io/2017/06/29/Debug-Ansible/"/>
    <id>https://morganwu277.github.io/2017/06/29/Debug-Ansible/</id>
    <published>2017-06-29T18:18:34.000Z</published>
    <updated>2019-09-12T02:42:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.ansible.com" target="_blank" rel="noopener">Ansible</a> is a popular dev-ops tools for us to execute ad-hoc commands immediately on large mounts of machines in parallel which accelerate our working speed.  </p><p>It’s simple but powerful and compatible with different OS platforms. Even more, it has lots of pre-defined modules for us to use, which significantly make the dream of <strong>reusing Dev-Ops</strong> scripts come true. </p><p>However, when you’re goging to use this fantastic tool, how to debug when you’re executing the ansible play-book with flow of commands? It looks like a unstoppable flow.</p><a id="more"></a><p>So we need two things for debugging ansible playbook: </p><ul><li>Stoppable </li><li>Print Debug Message </li></ul><p>This article will also give some tiny intro about play-book. For more info, please review the official documents. </p><h1 id="Stoppable">1. Stoppable</h1><p>So, here we have a trick, using the <a href="http://docs.ansible.com/ansible/fail_module.html" target="_blank" rel="noopener">fail</a> module to stop the execution process.</p><p>Add next code snippet at wherever you want to stop. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># more is here</span></span><br><span class="line"></span><br><span class="line">- name: <span class="string">"STOP ME"</span></span><br><span class="line">  fail: msg=<span class="string">"This is the debugging stop"</span></span><br><span class="line">  when: 1==1</span><br></pre></td></tr></table></figure><p>After that, you could see the message like below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># more is here ... </span></span><br><span class="line"></span><br><span class="line">TASK [pre-ansible : STOP ME] ******************************************************</span><br><span class="line">fatal: [node-1-master]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</span><br><span class="line">fatal: [node-2-slave-1]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</span><br><span class="line">fatal: [lcoj-judger]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</span><br><span class="line"></span><br><span class="line">NO MORE HOSTS LEFT *************************************************************</span><br><span class="line">to retry, use: --<span class="built_in">limit</span> @cluster.retry</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************</span><br><span class="line">lcoj-judger                : ok=5    changed=1    unreachable=0    failed=1   </span><br><span class="line">node-1-master              : ok=5    changed=1    unreachable=0    failed=1   </span><br><span class="line">node-2-slave-1             : ok=5    changed=1    unreachable=0    failed=1</span><br></pre></td></tr></table></figure></p><h1 id="Dry-Run-with-check">2. Dry Run with --check</h1><p>Next won’t execute the whole playbook, but will give a run through.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook foo.yml --check</span><br></pre></td></tr></table></figure></p><h1 id="Print-Debugging-Message-with-Var">3. Print Debugging Message with Var</h1><p>Of course you can print debug message with the <code>fail</code> module. However, it has a born behavior: stop the process, which maybe unexpected.</p><p>Here we use the <a href="http://docs.ansible.com/ansible/debug_module.html" target="_blank" rel="noopener">debug</a> module to print statements during execution.</p><p>Next is an example of printing the <code>eth1</code> address of each nodes in the inventory file. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># more is here...</span></span><br><span class="line"></span><br><span class="line">- debug:</span><br><span class="line">    msg: <span class="string">"hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4.address &#125;&#125; &#123;&#123;item&#125;&#125;"</span></span><br><span class="line">  with_items: <span class="string">"&#123;&#123; groups['all'] &#125;&#125;"</span></span><br></pre></td></tr></table></figure><p>Here is the output of such debug msg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">TASK [pre-ansible : debug] *****************************************************</span><br><span class="line">ok: [node-2-slave-1] =&gt; (item=node-1-master) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [node-2-slave-1] =&gt; (item=node-2-slave-1) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [node-2-slave-1] =&gt; (item=lcoj-judger) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [node-1-master] =&gt; (item=node-1-master) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [node-1-master] =&gt; (item=node-2-slave-1) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [node-1-master] =&gt; (item=lcoj-judger) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [lcoj-judger] =&gt; (item=node-1-master) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [lcoj-judger] =&gt; (item=node-2-slave-1) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></span><br><span class="line">&#125;</span><br><span class="line">ok: [lcoj-judger] =&gt; (item=lcoj-judger) =&gt; &#123;</span><br><span class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In your play-book, please setup the <code>gather_facts</code> to be <code>true</code>. In this way, we can print the <code>ipv4.adderss</code> of this host.<br>And the <code>pre-ansible</code> is the role where the above code snippet lies in. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  gather_facts: <span class="literal">true</span></span><br><span class="line">  sudo: yes</span><br><span class="line">  roles:</span><br><span class="line">    - pre-ansible</span><br><span class="line">  tags:</span><br><span class="line">    - pre-ansible</span><br></pre></td></tr></table></figure><p>Also, this <code>debug</code> module with msg can print an object with all its field values. So if our <code>msg</code> above changes to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4 &#125;&#125; &#123;&#123;item&#125;&#125;"</span></span><br></pre></td></tr></table></figure></p><p>it will print more message. </p><h2 id="Register-the-response-and-then-print-using-debug-msg">3.1. Register the response and then print using debug msg</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  gather_facts: <span class="literal">false</span></span><br><span class="line">  tasks:</span><br><span class="line">    - name: Get OS Version</span><br><span class="line">      become: <span class="literal">true</span></span><br><span class="line">      shell: <span class="string">"echo `cat /etc/os-release | grep PRETTY_NAME`"</span></span><br><span class="line">      register: res</span><br><span class="line">    - debug:</span><br><span class="line">        msg: <span class="string">"&#123;&#123; res.stdout &#125;&#125;"</span> <span class="comment"># we have to add double quote here</span></span><br></pre></td></tr></table></figure><p>It will print msg like below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ok: [localhost.domain] =&gt; &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"PRETTY_NAME=\"Ubuntu 16.04.1 LTS\""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Intro-about-Play-Book">4. Intro about Play-Book</h1><p>In the section of <a href="#Print-Debugging-Message-with-Var">Print Debugging Message with Var</a>, we already saw one easy <code>play</code>, here is another playbook with only one play. Please remember we do have <code>---</code> at the first line. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 200</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: ensure apache is at the latest version</span><br><span class="line">    yum: name=httpd state=latest</span><br><span class="line"></span><br><span class="line">  - name: write the apache config file</span><br><span class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</span><br><span class="line">    notify:</span><br><span class="line">    - restart apache</span><br><span class="line"></span><br><span class="line">  - name: ensure apache is running (and <span class="built_in">enable</span> it at boot)</span><br><span class="line">    service: name=httpd state=started enabled=yes</span><br><span class="line"></span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service: name=httpd state=restarted</span><br></pre></td></tr></table></figure><h2 id="Roles">4.1. Roles</h2><p>With Roles, we can <strong>reuse</strong> the tasks commands. For example, next play, we will execute the play with roles <code>pre-ansible</code>. Of course, we can execute more roles, just append the role directory name under <code>roles</code> field.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  gather_facts: <span class="literal">true</span></span><br><span class="line">  sudo: yes</span><br><span class="line">  roles:</span><br><span class="line">    - pre-ansible</span><br></pre></td></tr></table></figure></p><p>Here is a glance of directory structure, we can see <code>pre-ansible</code> directory in the <code>roles</code> directory.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[03:38 PM morganwu@promote noj-deploy]$ tree  -L 2</span><br><span class="line">.</span><br><span class="line">├── ansible.cfg</span><br><span class="line">├── cluster.yml</span><br><span class="line">├── group_vars</span><br><span class="line">│   └── all.yml</span><br><span class="line">├── inventory.me</span><br><span class="line">├── roles</span><br><span class="line">│   ├── common</span><br><span class="line">│   ├── docker</span><br><span class="line">│   ├── etcd</span><br><span class="line">│   ├── flannel</span><br><span class="line">│   ├── kubernetes</span><br><span class="line">│   ├── kubernetes-addons</span><br><span class="line">│   ├── leetcode</span><br><span class="line">│   ├── leetcode-backend</span><br><span class="line">│   ├── master</span><br><span class="line">│   ├── nginx</span><br><span class="line">│   ├── node</span><br><span class="line">│   ├── opencontrail</span><br><span class="line">│   ├── opencontrail-provision</span><br><span class="line">│   └── pre-ansible</span><br><span class="line">├── setup.sh</span><br><span class="line">└── setup_leetcode.sh</span><br></pre></td></tr></table></figure></p><h3 id="Use-Condition-when-Choosing-Roles">4.1.1. Use Condition when Choosing Roles</h3><p>We even can use condition expression when choosing specific roles,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts:</span><br><span class="line">    - etcd</span><br><span class="line">    - masters</span><br><span class="line">    - nodes</span><br><span class="line">  sudo: yes</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: flannel, when: networking == <span class="string">'flannel'</span> &#125;</span><br><span class="line">  tags:</span><br><span class="line">    - network-service-install</span><br></pre></td></tr></table></figure></p><p>This will only execute the roles of <code>flannel</code> when the <code>networking</code> varialbe is <code>flannel</code>. </p><h2 id="Tags">4.2. Tags</h2><p>With <code>Tags</code>, we can run <strong>specific</strong> <code>play</code> and it makes our dev-ops work more flexible, in a non-linear style. </p><p>We will still using the example above. Here we have defined a tag <code>pre-ansible</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  gather_facts: <span class="literal">true</span></span><br><span class="line">  sudo: yes</span><br><span class="line">  roles:</span><br><span class="line">    - pre-ansible</span><br><span class="line">  tags:</span><br><span class="line">    - pre-ansible</span><br></pre></td></tr></table></figure></p><p>When we execute playbook with <code>--tags</code>, it will only execute this play and skip all other plays without this specific tag.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags=pre-ansible</span><br></pre></td></tr></table></figure></p><h3 id="Execute-Multiple-Tags">4.2.1. Execute Multiple Tags</h3><p>If you want to execute multiple tags once, just append with more tag name at the <code>--tags</code>, eg. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags=<span class="string">"pre-ansible,etcd,docker"</span></span><br></pre></td></tr></table></figure><p>This will execute the <code>pre-ansible</code>, <code>etcd</code>, <code>docker</code> tags. </p><h2 id="Var-String-in-a-condition">4.3. Var/String in a condition</h2><p>Here is an example <code>inventory_hostname</code> is a varaible, but “codential” and “node-1-master” are all strings. </p><p>The most important here is: the condition in the when, we use <code>&#39;</code> to wrap up. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">frontend.yml</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">'(inventory_hostname in groups["codential"]) or (inventory_hostname == groups["nodes"][0])'</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">service_port:</span> <span class="number">8001</span></span><br><span class="line">    <span class="attr">node_port:</span> <span class="string">'<span class="template-variable">&#123;&#123; cfg[env].node_port_frontend &#125;&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">register</span> <span class="string">nginx</span> <span class="string">proxy</span></span><br><span class="line">  <span class="attr">become:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">'inventory_hostname  == "node-1-master"'</span></span><br><span class="line">  <span class="attr">include:</span> <span class="string">roles/leetcode/tasks/register-nginx-proxy.yml</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">service_port:</span> <span class="number">8001</span></span><br><span class="line">    <span class="attr">node_port:</span> <span class="string">'<span class="template-variable">&#123;&#123; cfg[env].node_port_frontend &#125;&#125;</span>'</span></span><br><span class="line">    <span class="attr">nginx_template:</span> <span class="string">"frontend/<span class="template-variable">&#123;&#123; env &#125;&#125;</span>-nginx-conf.j2"</span></span><br><span class="line">    <span class="attr">nginx_conf:</span> <span class="string">"/etc/nginx/conf.d/<span class="template-variable">&#123;&#123; namespace &#125;&#125;</span>-<span class="template-variable">&#123;&#123; env &#125;&#125;</span>.conf"</span></span><br><span class="line">    <span class="attr">iptables_comment:</span> <span class="string">"<span class="template-variable">&#123;&#123; namespace &#125;&#125;</span>-<span class="template-variable">&#123;&#123; env &#125;&#125;</span>-node-port"</span></span><br></pre></td></tr></table></figure><p>Extra to learn: iptables related diagram: </p><center><img src="/2017/06/29/Debug-Ansible/iptables.gif" title="Iptables"></center><p>From <a href="https://cesarti.files.wordpress.com/2012/02/iptables.gif" target="_blank" rel="noopener">https://cesarti.files.wordpress.com/2012/02/iptables.gif</a></p><h1 id="Execute-SUDO-commands-without-NO-PASSWORD-settings">5. Execute SUDO commands, without NO_PASSWORD settings</h1><p>Last but not the least, however sometimes very useful. Is for Ad-Hoc command in Ansible. </p><p>We all know it’s possible to execute <a href="http://docs.ansible.com/ansible/latest/intro_adhoc.html" target="_blank" rel="noopener">ad-hoc</a> ansible command for bunch of servers. But problems will come when you need to execute sudo command, the command from the server side will always be waiting for inputing the password to be continued.</p><p>We can use <code>--sudo</code>/<code>-b</code> to solve this. However, you have to make sure all the users in the <code>nodes</code> server list has the <code>same password</code> here. If you provide with the <code>ansible_sudo_pass</code> password in <code>inventory</code> file.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host1 ansible_ssh_host=xxx.xxx.xxx.xxx ansible_ssh_port=22 ansible_ssh_user=user1 ansible_ssh_pass=password1 ansible_sudo_pass=password1</span><br></pre></td></tr></table></figure></p><p>If we don’t have <code>ansible_sudo_pass</code>, then we need to provide with the <code>SUDO password</code> at the runtime.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is the command, append using --sudo or we can use -b --become-user=&lt;username&gt; </span></span><br><span class="line">[05:16 PM morganwu@morgan-yinnut my-deploy]$ ansible -i inventory.me nodes -m shell -a <span class="string">'curl -L https://toolbelt.treasuredata.com/sh/install-ubuntu-xenial-td-agent2.sh | sh'</span> --sudo</span><br><span class="line">SUDO password: </span><br><span class="line">node1 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">==============================</span><br><span class="line"> td-agent Installation Script </span><br><span class="line">==============================</span><br><span class="line">This script requires superuser access to install apt packages.</span><br><span class="line">You will be prompted <span class="keyword">for</span> your password by sudo.</span><br><span class="line">OK</span><br><span class="line">Ign:1 http://apt.newrelic.com/debian newrelic InRelease</span><br><span class="line">Hit:2 http://apt.newrelic.com/debian newrelic Release</span><br><span class="line">Hit:3 http://mirrors.linode.com/ubuntu xenial InRelease</span><br><span class="line">Get:4 http://mirrors.linode.com/ubuntu xenial-updates InRelease [102 kB]</span><br><span class="line">Get:5 http://mirrors.linode.com/ubuntu xenial-backports InRelease [102 kB]</span><br><span class="line">Get:6 http://packages.treasuredata.com/2/ubuntu/xenial xenial InRelease [2,578 B]</span><br><span class="line">Get:8 http://security.ubuntu.com/ubuntu xenial-security InRelease [102 kB]</span><br><span class="line">Get:9 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib amd64 Packages [399 B]</span><br><span class="line">Get:10 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib i386 Packages [399 B]</span><br><span class="line">Ign:11 https://get.docker.com/ubuntu docker InRelease</span><br><span class="line">Hit:12 https://get.docker.com/ubuntu docker Release</span><br><span class="line">Fetched 310 kB <span class="keyword">in</span> 0s (381 kB/s)</span><br><span class="line">Reading package lists...</span><br><span class="line">Reading package lists...</span><br><span class="line">Building dependency tree...</span><br><span class="line">Reading state information...</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  td-agent</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 137 not upgraded.</span><br><span class="line"><span class="comment"># More output comes here</span></span><br></pre></td></tr></table></figure></p><h1 id="Conclusion">6. Conclusion</h1><p>Ansible is easy but powerful with lots of pre-defined modules. </p><ul><li>We can use <code>fail</code> module to stop execution process ann use <code>debug</code> module to print message with variables. </li><li><code>Roles</code> are designed for <code>task</code> reuuse.</li><li><code>Tags</code> are designed to execute the specific <code>Play</code>(s) in one playbook.</li><li>Use <code>--sudo</code> to execute sudo commands in ad-hoc style.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.ansible.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ansible&lt;/a&gt; is a popular dev-ops tools for us to execute ad-hoc commands immediately on large mounts of machines in parallel which accelerate our working speed.  &lt;/p&gt;
&lt;p&gt;It’s simple but powerful and compatible with different OS platforms. Even more, it has lots of pre-defined modules for us to use, which significantly make the dream of &lt;strong&gt;reusing Dev-Ops&lt;/strong&gt; scripts come true. &lt;/p&gt;
&lt;p&gt;However, when you’re goging to use this fantastic tool, how to debug when you’re executing the ansible play-book with flow of commands? It looks like a unstoppable flow.&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Ansible" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://morganwu277.github.io/tags/Ansible/"/>
    
      <category term="Debug" scheme="https://morganwu277.github.io/tags/Debug/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Exercises</title>
    <link href="https://morganwu277.github.io/2017/06/13/Leetcode-Exercise/"/>
    <id>https://morganwu277.github.io/2017/06/13/Leetcode-Exercise/</id>
    <published>2017-06-13T21:09:45.000Z</published>
    <updated>2017-12-14T22:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a leetcode algorithm list for me to track my thought and solutions. </p><a id="more"></a><h1 id="Two-Sum">1. Two-Sum</h1><p>Problem Description: <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">1. Two-Sum</a> </p><h2 id="Golang">1.1. Golang</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    size := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; size; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] + nums[j] == target &#123;</span><br><span class="line">                result := []<span class="keyword">int</span>&#123;i, j&#125;</span><br><span class="line">                sort.Slice(result, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> result[i] &lt;= result[j]</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java">1.2. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> [] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(numbers==<span class="keyword">null</span>||numbers.length&lt;<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(target-numbers[i]))&#123;</span><br><span class="line">                map.put(numbers[i],i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res[<span class="number">0</span>]= map.get(target-numbers[i]);</span><br><span class="line">                res[<span class="number">1</span>]= i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Path-Sum">2. Path Sum</h1><p>Problem Description: <a href="https://leetcode.com/problems/path-sum" target="_blank" rel="noopener">112. Path Sum</a></p><h2 id="Java-1">2.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Test if there is a path from current node to leaf node</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum == root.val) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum - root.val; <span class="comment">// take value from current root node</span></span><br><span class="line">        <span class="keyword">return</span> hasPathSum(root.left, sum) || hasPathSum(root.right, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse-Words-in-a-String">3. Reverse Words in a String</h1><p>Problem Description: <a href="https://leetcode.com/problems/reverse-words-in-a-string" target="_blank" rel="noopener">151. Reverse Words in a String</a></p><h2 id="Java-2">3.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        String[] str_arr = s.split(<span class="string">"\\s+"</span>);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = str_arr.length-<span class="number">1</span>; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">            sb.append(str_arr[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(str_arr[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Combine-Two-Tables">4. Combine Two Tables</h1><p>Problem Description: <a href="https://leetcode.com/problems/combine-two-tables" target="_blank" rel="noopener">175. Combine Two Tables</a></p><h2 id="MySQL">4.1. MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">select p.FirstName, p.LastName, a.City, a.State from Person as p </span><br><span class="line">  left join Address as a </span><br><span class="line">  on </span><br><span class="line">  p.PersonId = a.PersonId;</span><br></pre></td></tr></table></figure><h1 id="Fizz-Buzz">5. Fizz Buzz</h1><p>Problem Description: <a href="https://leetcode.com/problems/fizz-buzz/" target="_blank" rel="noopener">412. Fizz Buzz</a></p><h2 id="Java-3">5.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">multiple</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> modValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i%modValue==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fizzBuzz</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">            String str = String.valueOf(i);</span><br><span class="line">            <span class="keyword">if</span>(multiple(i,<span class="number">3</span>) &amp;&amp; multiple(i,<span class="number">5</span>)) &#123;</span><br><span class="line">                list.add(<span class="string">"FizzBuzz"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(multiple(i,<span class="number">3</span>) &amp;&amp; !multiple(i,<span class="number">5</span>)) &#123;</span><br><span class="line">                list.add(<span class="string">"Fizz"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!multiple(i,<span class="number">3</span>) &amp;&amp; multiple(i,<span class="number">5</span>)) &#123;</span><br><span class="line">                list.add(<span class="string">"Buzz"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                list.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a leetcode algorithm list for me to track my thought and solutions. &lt;/p&gt;
    
    </summary>
    
      <category term="Read &amp; Think" scheme="https://morganwu277.github.io/categories/Read-Think/"/>
    
      <category term="Algorithm" scheme="https://morganwu277.github.io/categories/Read-Think/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://morganwu277.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="https://morganwu277.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Simple Swift Intro</title>
    <link href="https://morganwu277.github.io/2017/06/12/Simple-Swift-Intro/"/>
    <id>https://morganwu277.github.io/2017/06/12/Simple-Swift-Intro/</id>
    <published>2017-06-13T03:24:27.000Z</published>
    <updated>2017-06-13T03:24:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
