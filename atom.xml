<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alice &amp;&amp; Bob</title>
  <subtitle>Alice &amp;&amp; Bob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://morganwu277.github.io/"/>
  <updated>2017-11-25T00:21:51.000Z</updated>
  <id>https://morganwu277.github.io/</id>
  
  <author>
    <name>Morgan Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB MEM Management</title>
    <link href="https://morganwu277.github.io/2017/11/24/MongoDB-MEM-Management/"/>
    <id>https://morganwu277.github.io/2017/11/24/MongoDB-MEM-Management/</id>
    <published>2017-11-25T00:18:18.000Z</published>
    <updated>2017-11-25T00:21:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>This post is about MongoDB memory management mechanism.<br>All it’s using is Page Cache of System.</p>
<p>This URL gives you more details<br><a href="https://www.mongodb.com/presentations/mongodb-memory-management-demystified" target="_blank" rel="external">https://www.mongodb.com/presentations/mongodb-memory-management-demystified</a></p>
<p>OK, this post is just for me to check commands to use, to management MongoDB. </p>
<a id="more"></a>
<h1 id="connect">1. connect</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo 127.0.0.1:20001/<span class="variable">$&#123;DB_NAME&#125;</span> -u <span class="variable">$&#123;USER_NAME&#125;</span> -p <span class="variable">$&#123;PASSWORD&#125;</span></div></pre></td></tr></table></figure>
<h1 id="db-stats">2. db.stats()</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; db.<span class="function"><span class="title">stats</span></span>()</div><div class="line">&#123;</div><div class="line">	<span class="string">"db"</span> : <span class="string">"xxxx"</span>, // this has been covered due to classification info </div><div class="line">	<span class="string">"collections"</span> : 4,</div><div class="line">	<span class="string">"objects"</span> : 39817003,</div><div class="line">	<span class="string">"avgObjSize"</span> : 113.20676571262784,</div><div class="line">	<span class="string">"dataSize"</span> : 4507554130,</div><div class="line">	<span class="string">"storageSize"</span> : 2112126976,</div><div class="line">	<span class="string">"numExtents"</span> : 0,</div><div class="line">	<span class="string">"indexes"</span> : 12,</div><div class="line">	<span class="string">"indexSize"</span> : 2265329664,</div><div class="line">	<span class="string">"ok"</span> : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This post is about MongoDB memory management mechanism.&lt;br&gt;All it’s using is Page Cache of System.&lt;/p&gt;
&lt;p&gt;This URL gives you more details&lt;br&gt;&lt;a href=&quot;https://www.mongodb.com/presentations/mongodb-memory-management-demystified&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.mongodb.com/presentations/mongodb-memory-management-demystified&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OK, this post is just for me to check commands to use, to management MongoDB. &lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://morganwu277.github.io/categories/Database/"/>
    
      <category term="NoSQL" scheme="https://morganwu277.github.io/categories/Database/NoSQL/"/>
    
      <category term="Document" scheme="https://morganwu277.github.io/categories/Database/NoSQL/Document/"/>
    
    
      <category term="MongoDB" scheme="https://morganwu277.github.io/tags/MongoDB/"/>
    
      <category term="Memory" scheme="https://morganwu277.github.io/tags/Memory/"/>
    
      <category term="PageCache" scheme="https://morganwu277.github.io/tags/PageCache/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare doesn&#39;t support ETag</title>
    <link href="https://morganwu277.github.io/2017/10/20/CloudFlare-doesn-t-support-ETag/"/>
    <id>https://morganwu277.github.io/2017/10/20/CloudFlare-doesn-t-support-ETag/</id>
    <published>2017-10-20T22:27:03.000Z</published>
    <updated>2017-11-01T04:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Because only Nignx &gt;= 1.3.3 have etag options.<br>How stupid of this blog….<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Because only Nignx &amp;gt;= 1.3.3 have etag options.&lt;br&gt;How stupid of this blog….&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Nginx" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/"/>
    
      <category term="Cache" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/Cache/"/>
    
    
      <category term="Nginx" scheme="https://morganwu277.github.io/tags/Nginx/"/>
    
      <category term="Cache" scheme="https://morganwu277.github.io/tags/Cache/"/>
    
      <category term="CloudFlare" scheme="https://morganwu277.github.io/tags/CloudFlare/"/>
    
  </entry>
  
  <entry>
    <title>My conf</title>
    <link href="https://morganwu277.github.io/2017/10/19/My-Fluentd-conf/"/>
    <id>https://morganwu277.github.io/2017/10/19/My-Fluentd-conf/</id>
    <published>2017-10-19T22:56:34.000Z</published>
    <updated>2017-11-17T03:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Personal material, please leave. "> <label for="pass"> Personal material, please leave. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Personal material, please leave.
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Logging" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Logging/"/>
    
    
      <category term="Fluentd" scheme="https://morganwu277.github.io/tags/Fluentd/"/>
    
  </entry>
  
  <entry>
    <title>Setup ElasticSearch, Fluentd, Kibana in Kubernetes</title>
    <link href="https://morganwu277.github.io/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/"/>
    <id>https://morganwu277.github.io/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/</id>
    <published>2017-10-18T17:05:32.000Z</published>
    <updated>2017-11-14T19:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Just a post about what we need to setup the <a href="https://www.elastic.co/" target="_blank" rel="external">ElasticSearch</a>/<a href="https://www.fluentd.org/" target="_blank" rel="external">Fluentd</a>/<a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">Kibana</a>. For detailed and how do they work, please reference the official site.</p>
<p>Here is my final Kibana screenshot:</p>
<center><img src="/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/Kibana.png" alt="Kibana Logging" title="Kibana Logging"></center>

<p>Beautiful, isn’t it?</p>
<p>This post will setup EFK tool chain in Kubernets. </p>
<a id="more"></a>
<h1 id="Setup-ElasticSearch-in-Kubernets">1. Setup ElasticSearch in Kubernets</h1><h2 id="Setup-ElasticSearch-ReplicationController">1.1. Setup ElasticSearch ReplicationController</h2><p>Here is ElasticSearch ReplicationController yaml, please note the volume is using <code>hostPath</code> because I’m using <code>nodeSelector</code> to deploy the ElasticSearch, which makes it sticky to the specific logging dedicated node.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">elasticsearch-logging-v1</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">    version:</span> <span class="string">v1</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  replicas:</span> <span class="number">2</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">    version:</span> <span class="string">v1</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">        version:</span> <span class="string">v1</span></div><div class="line">        <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      nodeSelector:</span></div><div class="line"><span class="attr">        logging:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - image:</span> <span class="string">gcr.io/google_containers/elasticsearch:v2.4.1</span></div><div class="line"><span class="attr">        name:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">1000</span><span class="string">m</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">9200</span></div><div class="line"><span class="attr">          name:</span> <span class="string">db</span></div><div class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">9300</span></div><div class="line"><span class="attr">          name:</span> <span class="string">transport</span></div><div class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">es-persistent-storage</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/data</span></div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">es-persistent-storage</span></div><div class="line"><span class="attr">        hostPath:</span> </div><div class="line"><span class="attr">          path:</span> <span class="string">/mnt/volume-sfo2-03/logging_data</span></div></pre></td></tr></table></figure></p>
<h2 id="Setup-ElasticSearch-Service">1.2. Setup ElasticSearch Service</h2><p>It’s the plain service yaml file in Kubernetes.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">Service</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line">    <span class="string">kubernetes.io/name:</span> <span class="string">"Elasticsearch"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="attr">  - port:</span> <span class="number">9200</span></div><div class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">    targetPort:</span> <span class="string">db</span></div><div class="line"><span class="attr">    nodePort:</span> <span class="number">31001</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div></pre></td></tr></table></figure></p>
<h2 id="Accessing-ElasticSearch-Request">1.3. Accessing ElasticSearch Request</h2><p>Just for test, use curl command to issue a request:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># curl 127.0.0.1:31001</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span> : <span class="string">"Ogress"</span>,</div><div class="line">  <span class="string">"cluster_name"</span> : <span class="string">"kubernetes-logging"</span>,</div><div class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"fOjPK7t2TqeR-GlhqGhzag"</span>,</div><div class="line">  <span class="string">"version"</span> : &#123;</div><div class="line">    <span class="string">"number"</span> : <span class="string">"2.4.1"</span>,</div><div class="line">    <span class="string">"build_hash"</span> : <span class="string">"c67dc32e24162035d18d6fe1e952c4cbcbe79d16"</span>,</div><div class="line">    <span class="string">"build_timestamp"</span> : <span class="string">"2016-09-27T18:57:55Z"</span>,</div><div class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="string">"lucene_version"</span> : <span class="string">"5.5.2"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Setup-Kibana-in-Kubernets">2. Setup Kibana in Kubernets</h1><h2 id="Setup-Kibana-Deployment">2.1. Setup Kibana Deployment</h2><p>Here is Kibana Deployment yaml file, we also make it sticky to logging node with <code>nodeSelector</code>. Make sure <code>KIBANA_BASE_URL</code> environment value is set to emtpy if you’re going to use <code>NodePort</code> to access Kibana. </p>
<p>Also, <code>Kibana</code> need to talk to <code>ElasticSearch</code> by using <code>http://elasticsearch-logging:9200</code>, so please make sure <a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns" target="_blank" rel="external"><code>kube-dns</code></a> works correctly before setting up the Kibana Service. </p>
<p>I will write another post about how <code>kube-dns</code> works. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  replicas:</span> <span class="number">1</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    matchLabels:</span></div><div class="line"><span class="attr">      k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      nodeSelector:</span></div><div class="line"><span class="attr">        logging:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">        image:</span> <span class="string">gcr.io/google_containers/kibana:v4.6.1</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">        env:</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"NODE_OPTIONS"</span> <span class="comment"># use this to control Kibana memory usage, and promote Kibana speed</span></div><div class="line"><span class="attr">            value:</span> <span class="string">"--max-old-space-size=100"</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"ELASTICSEARCH_URL"</span></div><div class="line"><span class="attr">            value:</span> <span class="string">"http://elasticsearch-logging:9200"</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"KIBANA_BASE_URL"</span></div><div class="line">            <span class="comment">#value: "/api/v1/proxy/namespaces/kube-system/services/kibana-logging"</span></div><div class="line"><span class="attr">            value:</span> <span class="string">""</span></div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">5601</span></div><div class="line"><span class="attr">          name:</span> <span class="string">ui</span></div><div class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></div></pre></td></tr></table></figure>
<h2 id="Setup-Kibana-Service">2.2. Setup Kibana Service</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">Service</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line">    <span class="string">kubernetes.io/name:</span> <span class="string">"Kibana"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="attr">  - port:</span> <span class="number">5601</span></div><div class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">    targetPort:</span> <span class="string">ui</span></div><div class="line"><span class="attr">    nodePort:</span> <span class="number">31000</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">kibana-logging</span></div></pre></td></tr></table></figure>
<h2 id="Accessing-Kibana-Service">2.3. Accessing Kibana Service</h2><p>Just for test, use curl command to issue a request:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># curl 127.0.0.1:31000</span></div><div class="line">&lt;script&gt;var hashRoute = <span class="string">'/app/kibana'</span>;</div><div class="line">var defaultRoute = <span class="string">'/app/kibana'</span>;</div><div class="line"></div><div class="line">var <span class="built_in">hash</span> = window.location.hash;</div><div class="line"><span class="keyword">if</span> (hash.length) &#123;</div><div class="line">  window.location = hashRoute + <span class="built_in">hash</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  window.location = defaultRoute;</div><div class="line">&#125;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h1 id="Setup-Fluentd">3. Setup Fluentd</h1><p>This is the <code>MOST</code> complicated part.</p>
<p>Before setting up fluentd, we need to test fluentd.conf locally. You can setup fluentd in a VM to test.</p>
<h2 id="Install-Fluentd-Locally-or-in-a-VM">3.1. Install Fluentd Locally or in a VM</h2><p>Follow <a href="https://docs.fluentd.org/v0.12/articles/install-by-deb" target="_blank" rel="external">Installation Notes</a> here. </p>
<p>Please make sure you install the latest version, which is <code>v0.12.40</code>. </p>
<p>If you can’t get version of <code>v0.12.40</code> after your installation, please use <code>embeded gem</code> to install. Follow this <a href="https://docs.fluentd.org/v0.12/articles/install-by-gem" target="_blank" rel="external">post</a>. </p>
<p>Here is what I do have locally:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">morganwu@localhost:~$ /opt/td-agent/embedded/bin/gem list fluentd</div><div class="line"></div><div class="line">*** LOCAL GEMS ***</div><div class="line"></div><div class="line">fluentd (0.12.40)</div><div class="line">fluentd-ui (0.4.4)</div></pre></td></tr></table></figure></p>
<h2 id="Install-Fluentd-ElasticSearch-Plugin">3.2. Install Fluentd ElasticSearch Plugin</h2><p>Use the embedded gem to install <a href="https://github.com/uken/fluent-plugin-elasticsearch" target="_blank" rel="external"><code>fluent-plugin-elasticsearch</code></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential</div><div class="line">/opt/td-agent/embedded/bin/gem install fluent-plugin-elasticsearch</div></pre></td></tr></table></figure></p>
<h2 id="Workout-the-fluentd-conf-little-by-little">3.3. Workout the fluentd.conf little by little</h2><ol>
<li>Use <a href="http://rubular.com/" target="_blank" rel="external">a Ruby regular expression editor</a> for testing the reqular expression. </li>
<li>Use <a href="http://www.foragoodstrftime.com/" target="_blank" rel="external">For a Good Strftime</a> to test the time format. </li>
<li>Use <a href="https://docs.fluentd.org/v0.12/articles/filter_grep" target="_blank" rel="external">Fluetnd Documents</a> carefully. </li>
<li>Use <code>stdout</code> plugin to debug Fluentd conf. </li>
</ol>
<h2 id="Create-ConfigMap-in-Kubernetes">3.4. Create ConfigMap in Kubernetes</h2><p>Assume you do have a <code>fluentd.conf</code> now, let’s create one <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configmap/" target="_blank" rel="external">config map</a> for fluentd to use.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system create cm cm-fluentd-conf --from-file=td-agent.conf=./cm-fluentd-conf</span></div><div class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system get cm</span></div><div class="line">NAME              DATA      AGE</div><div class="line">cm-fluentd-conf   1         6d</div></pre></td></tr></table></figure></p>
<h2 id="Setup-Fluentd-DaemonSet">3.5. Setup Fluentd DaemonSet</h2><p>Please note, we are mounting the <code>cm-fluentd-conf</code> volume to <code>/etc/fluent/config.d</code> directory inside the container. </p>
<p>When we create the config map above, we specify <code>td-agent.conf=./cm-fluentd-conf</code>, which means inside the container, there will be a file <code>td-agent.conf</code> and it’s content comes from <code>./cm-fluentd-conf</code> provided above to create the config map. </p>
<p>Please note, it has the permission to read every logs in the <code>/var/log</code> directory. </p>
<p>To make it as <a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="external"><code>DaemonSet</code></a> to make sure it’s running on each server node. </p>
<p>We should make sure the <code>buffer_chunk_limit</code>*<code>buffer_chunk_size</code>(<a href="https://docs.fluentd.org/v0.12/articles/buffer-plugin-overview" target="_blank" rel="external">buffer-plugin-overview</a>) won’t exceed the limits of memory specified in the yaml file next.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">fluentd-es-v2.0.1</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">    version:</span> <span class="string">v2.0.1</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line">        <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">        version:</span> <span class="string">v2.0.1</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">        image:</span> <span class="string">gcr.io/google_containers/fluentd-elasticsearch:v2.0.1</span></div><div class="line"><span class="attr">        env:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">FLUENTD_ARGS</span></div><div class="line"><span class="attr">          value:</span> <span class="bullet">--no-supervisor</span> <span class="bullet">-q</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">512</span><span class="string">Mi</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">cm-fluentd-conf</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/fluent/config.d</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/docker/containers</span></div><div class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">cm-fluentd-conf</span></div><div class="line"><span class="attr">        configMap:</span> </div><div class="line"><span class="attr">          name:</span> <span class="string">cm-fluentd-conf</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/lib/docker/containers</span></div></pre></td></tr></table></figure></p>
<h1 id="Overview-the-deployed-components-in-Kubernetes">4. Overview the deployed components in Kubernetes</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system get rc,svc,cm,po</span></div><div class="line">NAME                          DESIRED   CURRENT   READY     AGE</div><div class="line">rc/elasticsearch-logging-v1   2         2         2         17d</div><div class="line"></div><div class="line">NAME                        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</div><div class="line">svc/elasticsearch-logging   10.254.59.190    &lt;nodes&gt;       9200:31001/TCP   20d</div><div class="line">svc/kibana-logging          10.254.148.174   &lt;nodes&gt;       5601:31000/TCP   25d</div><div class="line">svc/kube-dns                10.254.0.10      &lt;none&gt;        53/UDP,53/TCP    25d</div><div class="line">svc/kubernetes-dashboard    10.254.151.70    &lt;none&gt;        9090/TCP         26d</div><div class="line"></div><div class="line">NAME                 DATA      AGE</div><div class="line">cm/cm-fluentd-conf   1         6d</div><div class="line"></div><div class="line">NAME                                       READY     STATUS    RESTARTS   AGE</div><div class="line">po/elasticsearch-logging-v1-19r6r          1/1       Running   0          17d</div><div class="line">po/elasticsearch-logging-v1-7xcq4          1/1       Running   1          17d</div><div class="line">po/fluentd-es-v2.0.1-79350                 1/1       Running   0          6d</div><div class="line">po/fluentd-es-v2.0.1-kbhq2                 1/1       Running   0          6d</div><div class="line">po/fluentd-es-v2.0.1-rbmsv                 1/1       Running   0          6d</div><div class="line">po/fluentd-es-v2.0.1-rxvg2                 1/1       Running   4          6d</div><div class="line">po/fluentd-es-v2.0.1-sb8gc                 1/1       Running   1          6d</div><div class="line">po/kibana-logging-1532071719-69rd2         1/1       Running   0          3d</div><div class="line">po/kube-dns-v10-244463722-vmnr2            3/3       Running   0          7d</div><div class="line">po/kubernetes-dashboard-1786549131-m9r9r   1/1       Running   4          17d</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just a post about what we need to setup the &lt;a href=&quot;https://www.elastic.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ElasticSearch&lt;/a&gt;/&lt;a href=&quot;https://www.fluentd.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fluentd&lt;/a&gt;/&lt;a href=&quot;https://www.elastic.co/products/kibana&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kibana&lt;/a&gt;. For detailed and how do they work, please reference the official site.&lt;/p&gt;
&lt;p&gt;Here is my final Kibana screenshot:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/Kibana.png&quot; alt=&quot;Kibana Logging&quot; title=&quot;Kibana Logging&quot;&gt;&lt;/center&gt;

&lt;p&gt;Beautiful, isn’t it?&lt;/p&gt;
&lt;p&gt;This post will setup EFK tool chain in Kubernets. &lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Logging" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Logging/"/>
    
    
      <category term="Fluentd" scheme="https://morganwu277.github.io/tags/Fluentd/"/>
    
      <category term="ElasticSearch" scheme="https://morganwu277.github.io/tags/ElasticSearch/"/>
    
      <category term="Kibana" scheme="https://morganwu277.github.io/tags/Kibana/"/>
    
      <category term="Kubernetes" scheme="https://morganwu277.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>工作の思考</title>
    <link href="https://morganwu277.github.io/2017/07/16/%E5%B7%A5%E4%BD%9C%E3%81%AE%E6%80%9D%E8%80%83/"/>
    <id>https://morganwu277.github.io/2017/07/16/工作の思考/</id>
    <published>2017-07-16T18:52:18.000Z</published>
    <updated>2017-10-19T22:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" No pain, no gain. "> <label for="pass"> No pain, no gain. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      No pain, no gain.
    
    </summary>
    
      <category term="职场" scheme="https://morganwu277.github.io/categories/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="合作" scheme="https://morganwu277.github.io/categories/%E8%81%8C%E5%9C%BA/%E5%90%88%E4%BD%9C/"/>
    
    
      <category term="工作" scheme="https://morganwu277.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="为人处事" scheme="https://morganwu277.github.io/tags/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Redis Scan Too Slow in Django Application</title>
    <link href="https://morganwu277.github.io/2017/07/16/Django-Redis-Scan-Too-Long/"/>
    <id>https://morganwu277.github.io/2017/07/16/Django-Redis-Scan-Too-Long/</id>
    <published>2017-07-16T06:32:46.000Z</published>
    <updated>2017-07-16T03:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I met an issue that one of our APIs of the online production servers is very slow due to <code>redis scan</code>. </p>
<p>From next graph generated by NewRelic, we found AVERAGE <code>response time</code> is 2930ms while <code>redis scan</code> could take 2680ms, which is 2680/2930 = 91.4% portion of the total time. </p>
<center><img src="/2017/07/16/Django-Redis-Scan-Too-Long/redis-scan-slow.png" alt="Redis Scan Too Slow" title="Redis Scan Too Slow"></center>

<p>Why redis scan cost this much? From our local environment, we never noticed such huge performance issue. </p>
<a id="more"></a>
<h1 id="Locate-the-culprit">1. Locate the culprit</h1><h2 id="Phenomenon">1.1. Phenomenon</h2><p>After that I dug into the source code and found next code snippet in our Django Application and this is the only code of this API to access <code>redis</code>, so this must be the culprit of this issue. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</div><div class="line"></div><div class="line">// ...... more code <span class="keyword">is</span> ommitted here</div><div class="line"></div><div class="line">cache.delete_pattern(CACHE_KEY)</div></pre></td></tr></table></figure>
<p>From the above code, we could know that redis is treated as a cache server here.</p>
<p>So what does <code>delete_pattern</code> do on the earth? So I traced the code and in the end found next <code>delete_pattern</code> definition from <code>django_redis.client.default.DefaultClient#delete_pattern</code>.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_pattern</span><span class="params">(self, pattern, version=None, prefix=None, client=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Remove all keys matching pattern.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="keyword">if</span> client <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        client = self.get_client(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    pattern = self.make_key(pattern, version=version, prefix=prefix)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> client.scan_iter(pattern): // please note here</div><div class="line">            client.delete(key)</div><div class="line">            count += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count</div><div class="line">    <span class="keyword">except</span> _main_exceptions <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">raise</span> ConnectionInterrupted(connection=client, parent=e)</div></pre></td></tr></table></figure>
<p>The code calls <code>client.scan_iter(pattern)</code> to get next cursor and try to delete that key of the cursor. </p>
<h2 id="Redis-scan">1.2. Redis scan</h2><p>From the official site of <a href="https://redis.io/commands/scan" target="_blank" rel="external">redis scan</a>, we can combine <code>MATCH</code> and <code>COUNT</code> in the <code>SCAN</code> command.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; scan 0 MATCH *11*</div><div class="line">1) <span class="string">"288"</span></div><div class="line">2) 1) <span class="string">"key:911"</span></div><div class="line">redis 127.0.0.1:6379&gt; scan 288 MATCH *11*</div><div class="line">1) <span class="string">"224"</span></div><div class="line">2) (empty list or <span class="built_in">set</span>)</div><div class="line">redis 127.0.0.1:6379&gt; scan 224 MATCH *11*</div><div class="line">1) <span class="string">"80"</span></div><div class="line">2) (empty list or <span class="built_in">set</span>)</div><div class="line">redis 127.0.0.1:6379&gt; scan 80 MATCH *11*</div><div class="line">1) <span class="string">"176"</span></div><div class="line">2) (empty list or <span class="built_in">set</span>)</div><div class="line">redis 127.0.0.1:6379&gt; scan 176 MATCH *11* COUNT 1000</div><div class="line">1) <span class="string">"0"</span></div><div class="line">2)  1) <span class="string">"key:611"</span></div><div class="line">    2) <span class="string">"key:711"</span></div><div class="line">    3) <span class="string">"key:118"</span></div><div class="line">    4) <span class="string">"key:117"</span></div><div class="line">    5) <span class="string">"key:311"</span></div><div class="line">    6) <span class="string">"key:112"</span></div><div class="line">    7) <span class="string">"key:111"</span></div><div class="line">    8) <span class="string">"key:110"</span></div><div class="line">    9) <span class="string">"key:113"</span></div><div class="line">   10) <span class="string">"key:211"</span></div><div class="line">   11) <span class="string">"key:411"</span></div><div class="line">   12) <span class="string">"key:115"</span></div><div class="line">   13) <span class="string">"key:116"</span></div><div class="line">   14) <span class="string">"key:114"</span></div><div class="line">   15) <span class="string">"key:119"</span></div><div class="line">   16) <span class="string">"key:811"</span></div><div class="line">   17) <span class="string">"key:511"</span></div><div class="line">   18) <span class="string">"key:11"</span></div><div class="line">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<p>The above command returned me with a <code>0</code> means, in the first line of response, there is no more data to scan. If not <code>0</code>, the number is next cursor to be used to scan. </p>
<blockquote>
<p>It is important to note that the MATCH filter is applied <strong><code>after</code></strong> elements are retrieved from the collection, just before returning data to the client. </p>
</blockquote>
<p>This means, firstly it will retrieve the data, and then will use a filter to match the retrieved data.<br>Does this means there could be multiple back-and-forth between the client and server, and which will cost the huge latency of this redis scan? If that’s true, we just need an extra easy <code>COUNT</code> parameter. </p>
<h1 id="Validation-in-local-environment">2. Validation in local environment</h1><h2 id="KEYS-number">2.1. KEYS number</h2><p>How many keys are there in our online production redis server?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379[10]&gt; INFO</div><div class="line"><span class="comment"># more code is ommitted here</span></div><div class="line">db10:keys=6986,expires=6986,avg_ttl=40118300</div></pre></td></tr></table></figure></p>
<p>From above code, we can know there are nearly 7000 keys in our server. </p>
<h2 id="Client-Server-latency">2.2. Client-Server latency</h2><p>I simply use the <code>ping</code> command to get the latency and it’s 3.5 ms. Due to classified cause, sensitive info is hidden.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[xxx@xxxx.xxx.xxx.xxx ~]$ ping xxxx.com</div><div class="line">PING xxxx.com (xx.xx.xx.xx) 56(84) bytes of data.</div><div class="line">64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=1 ttl=58 time=3.58 ms</div><div class="line">64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=2 ttl=58 time=3.46 ms</div><div class="line">--- xxxx.com ping statistics ---</div><div class="line">2 packets transmitted, 2 received, 0% packet loss, time 3004ms</div><div class="line">rtt min/avg/max/mdev = 3.461/3.498/3.585/0.050 ms</div></pre></td></tr></table></figure></p>
<h2 id="Simulate-the-Network-Latency-Locally">2.3. Simulate the Network Latency Locally</h2><p>From this <a href="http://bencane.com/2012/07/16/tc-adding-simulated-network-latency-to-your-linux-server/" target="_blank" rel="external">post</a>, I successfully simulated the network latency.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@localhost:~ $ sudo tc qdisc add dev lo root netem delay 2ms </div><div class="line">(venv) vagrant@localhost:~ $ ping 127.0.0.1</div><div class="line">PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.</div><div class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=4.34 ms</div><div class="line">--- 127.0.0.1 ping statistics ---</div><div class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</div><div class="line">rtt min/avg/max/mdev = 4.348/4.348/4.348/0.000 ms</div></pre></td></tr></table></figure></p>
<p>So I made the <code>lo</code> NIC as slow as around 4.3 ms. </p>
<h2 id="Measure-the-time-of-cleaning-the-cache-before-and-after-setting-the-delay">2.4. Measure the time of cleaning the cache before and after setting the delay</h2><p>Since this is a Django application, so I can use Django Shell to try to execute the clean cache statement, which as a result operate the local redis server.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@localhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all")'</span></div><div class="line"></div><div class="line">real    0m8.404s</div><div class="line">user    0m0.944s</div><div class="line">sys     0m0.696s</div></pre></td></tr></table></figure></p>
<p>What if we don’t set the delay option, what’s would the timing metric be?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@lcoalhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete("view_cache:dispatch:123456789:category_slug:all")'</span></div><div class="line"></div><div class="line">real    0m4.366s</div><div class="line">user    0m0.800s</div><div class="line">sys     0m0.648s</div></pre></td></tr></table></figure></p>
<p>From the above test, we can see that before and after will make a huge difference as large as 4 seconds !!! And this is under the network latency of 4.3 ms. If the network latency is around 3.5 ms, the total time of cleaning cache could be as large as 3 seconds, which is very close the above phenomenon!</p>
<p>Now, we can get a conclusion: network latency will influence too much on the <code>redis scan</code> performance. <code>SCAN</code> will call the redis multiple times back-and-forth, which in the end, cause a large <code>redis scan</code> time. </p>
<p>How to solve the problem? Use the <code>COUNT</code> parameter!</p>
<h1 id="Solve-the-problem">3. Solve the problem</h1><h2 id="Estimation-of-deleting-time-again">3.1. Estimation of deleting time again</h2><p>From the definition of <code>delete_pattern</code> method, we can see it just <code>scan_iter</code> the redis using the default <code>COUNT</code> which is 10. Let’s give an estimation here:</p>
<ol>
<li>The <code>Redis Scan</code> use a sequential scan with <code>COUNT</code> as 10, there will be 6986/10 = 700 times to scan. </li>
<li>Each scan costs at least 1 ping time, which is 3.5 ms.</li>
<li>In total, 3.5*700 = 2450 ms, which is close to the 2680 ms of the phenomenon above. Interesting.  </li>
</ol>
<p>From above estimation, we are more confident of our guess now, and using the <code>COUNT</code> must be the solution!</p>
<p>But the <code>delete_pattern</code> method provided by the default client doesn’t use <code>COUNT</code> parameter, so what I can do is to create a new Redis Client which is inherited from the default Client and override this <code>delete_pattern</code> method to use the <code>COUNT</code> parameter.</p>
<p>Here is my code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="comment"># Compatibility with redis-py 2.10.x+</span></div><div class="line"><span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> ConnectionError</div><div class="line"><span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> ResponseError</div><div class="line"><span class="keyword">from</span> django_redis.exceptions <span class="keyword">import</span> ConnectionInterrupted, CompressorError</div><div class="line"><span class="keyword">from</span> django_redis.client <span class="keyword">import</span> DefaultClient</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> TimeoutError, ResponseError</div><div class="line">    _main_exceptions = (TimeoutError, ResponseError, ConnectionError, socket.timeout)</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    _main_exceptions = (ConnectionError, socket.timeout)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheClient</span><span class="params">(DefaultClient)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_pattern</span><span class="params">(self, pattern, itersize=None, version=None, prefix=None, client=None)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Remove all keys matching pattern.</div><div class="line">        """</div><div class="line"></div><div class="line">        <span class="keyword">if</span> client <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            client = self.get_client(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">        pattern = self.make_key(pattern, version=version, prefix=prefix)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> client.scan_iter(pattern, count=itersize): // have a itersize here</div><div class="line">                client.delete(key)</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> count</div><div class="line">        <span class="keyword">except</span> _main_exceptions <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">raise</span> ConnectionInterrupted(connection=client, parent=e)</div></pre></td></tr></table></figure></p>
<p>When I call the code, I make sure to pass the <code>itersize</code> very large, say, 10,000 to eliminate too many back-and-forth RPC calls. </p>
<h2 id="Enable-the-customized-redis-client-class">3.2. Enable the customized redis client class</h2><p>Of course we need to enable this client in our <code>settings/local.py</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CACHES = &#123;</div><div class="line">    'default': &#123;</div><div class="line">        'BACKEND': 'django_redis.cache.RedisCache',</div><div class="line">        # redis server</div><div class="line">        'LOCATION':</div><div class="line">        os.environ.get('NOJ_REDIS_CACHE_URL', 'redis://localhost:6379/10'),</div><div class="line">        'OPTIONS': &#123;</div><div class="line">            'PARSER_CLASS': 'redis.connection.HiredisParser',</div><div class="line">            'CLIENT_CLASS': 'common.cache_client.CacheClient' // enable the customized redis client class</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Test-after-fixing">3.3. Test after fixing</h2><p>I added a <code>10000</code> after my <code>delete_pattern</code> call.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@localhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all",10000)'</span> </div><div class="line"></div><div class="line">real    0m4.021s</div><div class="line">user    0m0.784s</div><div class="line">sys     0m0.612s</div></pre></td></tr></table></figure></p>
<p>The time now is very close to the time before setting the network latency, which means, <code>delete_pattern</code> won’t be a performance issue anymore, since it only has one RPC call now. </p>
<p>Cheers, bro!</p>
<h1 id="Conclusion">4. Conclusion</h1><ul>
<li>Don’t be afraid of the library source code, just dig into it.</li>
<li>Use <code>tc</code> command to simulate the network latency.</li>
<li><code>MATCH</code> in<code>Redis Scan</code> is to filter on top of the retrieved data. </li>
<li>Default <code>COUNT</code> of <code>Redis Scan</code> is 10. </li>
<li>Use <code>python manage.py shell</code> to execute ad-hoc test.</li>
<li>Use <code>ping</code> to get network latency. </li>
<li>Use <code>INFO</code> to get redis statistical information. </li>
</ul>
<hr>
<p><strong>References</strong></p>
<ul>
<li><a href="https://redis.io/commands/scan" target="_blank" rel="external">Redis Scan</a></li>
<li><a href="http://bencane.com/2012/07/16/tc-adding-simulated-network-latency-to-your-linux-server/" target="_blank" rel="external">tc: Adding simulated network latency to your Linux server</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I met an issue that one of our APIs of the online production servers is very slow due to &lt;code&gt;redis scan&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;From next graph generated by NewRelic, we found AVERAGE &lt;code&gt;response time&lt;/code&gt; is 2930ms while &lt;code&gt;redis scan&lt;/code&gt; could take 2680ms, which is 2680/2930 = 91.4% portion of the total time. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/07/16/Django-Redis-Scan-Too-Long/redis-scan-slow.png&quot; alt=&quot;Redis Scan Too Slow&quot; title=&quot;Redis Scan Too Slow&quot;&gt;&lt;/center&gt;

&lt;p&gt;Why redis scan cost this much? From our local environment, we never noticed such huge performance issue. &lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://morganwu277.github.io/categories/Database/"/>
    
      <category term="NoSQL" scheme="https://morganwu277.github.io/categories/Database/NoSQL/"/>
    
      <category term="In-Memory" scheme="https://morganwu277.github.io/categories/Database/NoSQL/In-Memory/"/>
    
    
      <category term="Django" scheme="https://morganwu277.github.io/tags/Django/"/>
    
      <category term="Redis" scheme="https://morganwu277.github.io/tags/Redis/"/>
    
      <category term="Scan" scheme="https://morganwu277.github.io/tags/Scan/"/>
    
      <category term="Performance" scheme="https://morganwu277.github.io/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Debug Ansible and Tiny Introduction of PlayBook</title>
    <link href="https://morganwu277.github.io/2017/06/29/Debug-Ansible/"/>
    <id>https://morganwu277.github.io/2017/06/29/Debug-Ansible/</id>
    <published>2017-06-29T18:18:34.000Z</published>
    <updated>2017-10-13T21:32:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.ansible.com" target="_blank" rel="external">Ansible</a> is a popular dev-ops tools for us to execute ad-hoc commands immediately on large mounts of machines in parallel which accelerate our working speed.  </p>
<p>It’s simple but powerful and compatible with different OS platforms. Even more, it has lots of pre-defined modules for us to use, which significantly make the dream of <strong>reusing Dev-Ops</strong> scripts come true. </p>
<p>However, when you’re goging to use this fantastic tool, how to debug when you’re executing the ansible play-book with flow of commands? It looks like a unstoppable flow.</p>
<a id="more"></a>
<p>So we need two things for debugging ansible playbook: </p>
<ul>
<li>Stoppable </li>
<li>Print Debug Message </li>
</ul>
<p>This article will also give some tiny intro about play-book. For more info, please review the official documents. </p>
<h1 id="Stoppable">1. Stoppable</h1><p>So, here we have a trick, using the <a href="http://docs.ansible.com/ansible/fail_module.html" target="_blank" rel="external">fail</a> module to stop the execution process.</p>
<p>Add next code snippet at wherever you want to stop. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more is here</span></div><div class="line"></div><div class="line">- name: <span class="string">"STOP ME"</span></div><div class="line">  fail: msg=<span class="string">"This is the debugging stop"</span></div><div class="line">  when: 1==1</div></pre></td></tr></table></figure>
<p>After that, you could see the message like below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more is here ... </span></div><div class="line"></div><div class="line">TASK [pre-ansible : STOP ME] ******************************************************</div><div class="line">fatal: [node-1-master]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</div><div class="line">fatal: [node-2-slave-1]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</div><div class="line">fatal: [lcoj-judger]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</div><div class="line"></div><div class="line">NO MORE HOSTS LEFT *************************************************************</div><div class="line">	to retry, use: --<span class="built_in">limit</span> @cluster.retry</div><div class="line"></div><div class="line">PLAY RECAP *********************************************************************</div><div class="line">lcoj-judger                : ok=5    changed=1    unreachable=0    failed=1   </div><div class="line">node-1-master              : ok=5    changed=1    unreachable=0    failed=1   </div><div class="line">node-2-slave-1             : ok=5    changed=1    unreachable=0    failed=1</div></pre></td></tr></table></figure></p>
<h1 id="Dry-Run-with-check">2. Dry Run with --check</h1><p>Next won’t execute the whole playbook, but will give a run through.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook foo.yml --check</div></pre></td></tr></table></figure></p>
<h1 id="Print-Debugging-Message-with-Var">3. Print Debugging Message with Var</h1><p>Of course you can print debug message with the <code>fail</code> module. However, it has a born behavior: stop the process, which maybe unexpected.</p>
<p>Here we use the <a href="http://docs.ansible.com/ansible/debug_module.html" target="_blank" rel="external">debug</a> module to print statements during execution.</p>
<p>Next is an example of printing the <code>eth1</code> address of each nodes in the inventory file. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more is here...</span></div><div class="line"></div><div class="line">- debug:</div><div class="line">    msg: <span class="string">"hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4.address &#125;&#125; &#123;&#123;item&#125;&#125;"</span></div><div class="line">  with_items: <span class="string">"&#123;&#123; groups['all'] &#125;&#125;"</span></div></pre></td></tr></table></figure>
<p>Here is the output of such debug msg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">TASK [pre-ansible : debug] *****************************************************</div><div class="line">ok: [node-2-slave-1] =&gt; (item=node-1-master) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></div><div class="line">&#125;</div><div class="line">ok: [node-2-slave-1] =&gt; (item=node-2-slave-1) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></div><div class="line">&#125;</div><div class="line">ok: [node-2-slave-1] =&gt; (item=lcoj-judger) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></div><div class="line">&#125;</div><div class="line">ok: [node-1-master] =&gt; (item=node-1-master) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></div><div class="line">&#125;</div><div class="line">ok: [node-1-master] =&gt; (item=node-2-slave-1) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></div><div class="line">&#125;</div><div class="line">ok: [node-1-master] =&gt; (item=lcoj-judger) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></div><div class="line">&#125;</div><div class="line">ok: [lcoj-judger] =&gt; (item=node-1-master) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></div><div class="line">&#125;</div><div class="line">ok: [lcoj-judger] =&gt; (item=node-2-slave-1) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></div><div class="line">&#125;</div><div class="line">ok: [lcoj-judger] =&gt; (item=lcoj-judger) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>In your play-book, please setup the <code>gather_facts</code> to be <code>true</code>. In this way, we can print the <code>ipv4.adderss</code> of this host.<br>And the <code>pre-ansible</code> is the role where the above code snippet lies in. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">  gather_facts: <span class="literal">true</span></div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - pre-ansible</div><div class="line">  tags:</div><div class="line">    - pre-ansible</div></pre></td></tr></table></figure>
<p>Also, this <code>debug</code> module with msg can print an object with all its field values. So if our <code>msg</code> above changes to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4 &#125;&#125; &#123;&#123;item&#125;&#125;"</span></div></pre></td></tr></table></figure></p>
<p>it will print more message. </p>
<h1 id="Intro-about-Play-Book">4. Intro about Play-Book</h1><p>In the section of <a href="#Print-Debugging-Message-with-Var">Print Debugging Message with Var</a>, we already saw one easy <code>play</code>, here is another playbook with only one play. Please remember we do have <code>---</code> at the first line. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- hosts: webservers</div><div class="line">  vars:</div><div class="line">    http_port: 80</div><div class="line">    max_clients: 200</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">  - name: ensure apache is at the latest version</div><div class="line">    yum: name=httpd state=latest</div><div class="line"></div><div class="line">  - name: write the apache config file</div><div class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</div><div class="line">    notify:</div><div class="line">    - restart apache</div><div class="line"></div><div class="line">  - name: ensure apache is running (and <span class="built_in">enable</span> it at boot)</div><div class="line">    service: name=httpd state=started enabled=yes</div><div class="line"></div><div class="line">  handlers:</div><div class="line">    - name: restart apache</div><div class="line">      service: name=httpd state=restarted</div></pre></td></tr></table></figure>
<h2 id="Roles">4.1. Roles</h2><p>With Roles, we can <strong>reuse</strong> the tasks commands. For example, next play, we will execute the play with roles <code>pre-ansible</code>. Of course, we can execute more roles, just append the role directory name under <code>roles</code> field.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">  gather_facts: <span class="literal">true</span></div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - pre-ansible</div></pre></td></tr></table></figure></p>
<p>Here is a glance of directory structure, we can see <code>pre-ansible</code> directory in the <code>roles</code> directory.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[03:38 PM morganwu@promote noj-deploy]$ tree  -L 2</div><div class="line">.</div><div class="line">├── ansible.cfg</div><div class="line">├── cluster.yml</div><div class="line">├── group_vars</div><div class="line">│   └── all.yml</div><div class="line">├── inventory.me</div><div class="line">├── roles</div><div class="line">│   ├── common</div><div class="line">│   ├── docker</div><div class="line">│   ├── etcd</div><div class="line">│   ├── flannel</div><div class="line">│   ├── kubernetes</div><div class="line">│   ├── kubernetes-addons</div><div class="line">│   ├── leetcode</div><div class="line">│   ├── leetcode-backend</div><div class="line">│   ├── master</div><div class="line">│   ├── nginx</div><div class="line">│   ├── node</div><div class="line">│   ├── opencontrail</div><div class="line">│   ├── opencontrail-provision</div><div class="line">│   └── pre-ansible</div><div class="line">├── setup.sh</div><div class="line">└── setup_leetcode.sh</div></pre></td></tr></table></figure></p>
<h3 id="Use-Condition-when-Choosing-Roles">4.1.1. Use Condition when Choosing Roles</h3><p>We even can use condition expression when choosing specific roles,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- hosts:</div><div class="line">    - etcd</div><div class="line">    - masters</div><div class="line">    - nodes</div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - &#123; role: flannel, when: networking == <span class="string">'flannel'</span> &#125;</div><div class="line">  tags:</div><div class="line">    - network-service-install</div></pre></td></tr></table></figure></p>
<p>This will only execute the roles of <code>flannel</code> when the <code>networking</code> varialbe is <code>flannel</code>. </p>
<h2 id="Tags">4.2. Tags</h2><p>With <code>Tags</code>, we can run <strong>specific</strong> <code>play</code> and it makes our dev-ops work more flexible, in a non-linear style. </p>
<p>We will still using the example above. Here we have defined a tag <code>pre-ansible</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">  gather_facts: <span class="literal">true</span></div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - pre-ansible</div><div class="line">  tags:</div><div class="line">    - pre-ansible</div></pre></td></tr></table></figure></p>
<p>When we execute playbook with <code>--tags</code>, it will only execute this play and skip all other plays without this specific tag.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags=pre-ansible</div></pre></td></tr></table></figure></p>
<h3 id="Execute-Multiple-Tags">4.2.1. Execute Multiple Tags</h3><p>If you want to execute multiple tags once, just append with more tag name at the <code>--tags</code>, eg. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags=<span class="string">"pre-ansible,etcd,docker"</span></div></pre></td></tr></table></figure>
<p>This will execute the <code>pre-ansible</code>, <code>etcd</code>, <code>docker</code> tags. </p>
<h2 id="Var-String-in-a-condition">4.3. Var/String in a condition</h2><p>Here is an example <code>inventory_hostname</code> is a varaible, but “codential” and “node-1-master” are all strings. </p>
<p>The most important here is: the condition in the when, we use <code>&#39;</code> to wrap up. </p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- include:</span> <span class="string">frontend.yml</span></div><div class="line"><span class="attr">  when:</span> <span class="string">'(inventory_hostname in groups["codential"]) or (inventory_hostname == groups["nodes"][0])'</span></div><div class="line"><span class="attr">  vars:</span></div><div class="line"><span class="attr">    service_port:</span> <span class="number">8001</span></div><div class="line"><span class="attr">    node_port:</span> <span class="string">'<span class="template-variable">&#123;&#123; cfg[env].node_port_frontend &#125;&#125;</span>'</span></div><div class="line"></div><div class="line"><span class="attr">- name:</span> <span class="string">register</span> <span class="string">nginx</span> <span class="string">proxy</span></div><div class="line"><span class="attr">  become:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  when:</span> <span class="string">'inventory_hostname  == "node-1-master"'</span></div><div class="line"><span class="attr">  include:</span> <span class="string">roles/leetcode/tasks/register-nginx-proxy.yml</span></div><div class="line"><span class="attr">  vars:</span></div><div class="line"><span class="attr">    service_port:</span> <span class="number">8001</span></div><div class="line"><span class="attr">    node_port:</span> <span class="string">'<span class="template-variable">&#123;&#123; cfg[env].node_port_frontend &#125;&#125;</span>'</span></div><div class="line"><span class="attr">    nginx_template:</span> <span class="string">"frontend/<span class="template-variable">&#123;&#123; env &#125;&#125;</span>-nginx-conf.j2"</span></div><div class="line"><span class="attr">    nginx_conf:</span> <span class="string">"/etc/nginx/conf.d/<span class="template-variable">&#123;&#123; namespace &#125;&#125;</span>-<span class="template-variable">&#123;&#123; env &#125;&#125;</span>.conf"</span></div><div class="line"><span class="attr">    iptables_comment:</span> <span class="string">"<span class="template-variable">&#123;&#123; namespace &#125;&#125;</span>-<span class="template-variable">&#123;&#123; env &#125;&#125;</span>-node-port"</span></div></pre></td></tr></table></figure>
<h1 id="Execute-SUDO-commands-without-NO-PASSWORD-settings">5. Execute SUDO commands, without NO_PASSWORD settings</h1><p>Last but not the least, however sometimes very useful. Is for Ad-Hoc command in Ansible. </p>
<p>We all know it’s possible to execute <a href="http://docs.ansible.com/ansible/latest/intro_adhoc.html" target="_blank" rel="external">ad-hoc</a> ansible command for bunch of servers. But problems will come when you need to execute sudo command, the command from the server side will always be waiting for inputing the password to be continued.</p>
<p>We can use <code>-K --sudo</code> to solve this. However, you have to make sure all the users in the <code>nodes</code> server list has the <code>same password</code> here. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is the command</span></div><div class="line">[05:16 PM morganwu@morgan-yinnut my-deploy]$ ansible -i inventory.me nodes -m shell -a <span class="string">'curl -L https://toolbelt.treasuredata.com/sh/install-ubuntu-xenial-td-agent2.sh | sh'</span> -K --sudo</div><div class="line">SUDO password: </div><div class="line">node1 | SUCCESS | rc=0 &gt;&gt;</div><div class="line">==============================</div><div class="line"> td-agent Installation Script </div><div class="line">==============================</div><div class="line">This script requires superuser access to install apt packages.</div><div class="line">You will be prompted <span class="keyword">for</span> your password by sudo.</div><div class="line">OK</div><div class="line">Ign:1 http://apt.newrelic.com/debian newrelic InRelease</div><div class="line">Hit:2 http://apt.newrelic.com/debian newrelic Release</div><div class="line">Hit:3 http://mirrors.linode.com/ubuntu xenial InRelease</div><div class="line">Get:4 http://mirrors.linode.com/ubuntu xenial-updates InRelease [102 kB]</div><div class="line">Get:5 http://mirrors.linode.com/ubuntu xenial-backports InRelease [102 kB]</div><div class="line">Get:6 http://packages.treasuredata.com/2/ubuntu/xenial xenial InRelease [2,578 B]</div><div class="line">Get:8 http://security.ubuntu.com/ubuntu xenial-security InRelease [102 kB]</div><div class="line">Get:9 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib amd64 Packages [399 B]</div><div class="line">Get:10 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib i386 Packages [399 B]</div><div class="line">Ign:11 https://get.docker.com/ubuntu docker InRelease</div><div class="line">Hit:12 https://get.docker.com/ubuntu docker Release</div><div class="line">Fetched 310 kB <span class="keyword">in</span> 0s (381 kB/s)</div><div class="line">Reading package lists...</div><div class="line">Reading package lists...</div><div class="line">Building dependency tree...</div><div class="line">Reading state information...</div><div class="line">The following NEW packages will be installed:</div><div class="line">  td-agent</div><div class="line">0 upgraded, 1 newly installed, 0 to remove and 137 not upgraded.</div><div class="line"><span class="comment"># More output comes here</span></div></pre></td></tr></table></figure>
<h1 id="Conclusion">6. Conclusion</h1><p>Ansible is easy but powerful with lots of pre-defined modules. </p>
<ul>
<li>We can use <code>fail</code> module to stop execution process ann use <code>debug</code> module to print message with variables. </li>
<li><code>Roles</code> are designed for <code>task</code> reuuse.</li>
<li><code>Tags</code> are designed to execute the specific <code>Play</code>(s) in one playbook.</li>
<li>Use <code>-K --sudo</code> to execute sudo commands in ad-hoc style.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.ansible.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ansible&lt;/a&gt; is a popular dev-ops tools for us to execute ad-hoc commands immediately on large mounts of machines in parallel which accelerate our working speed.  &lt;/p&gt;
&lt;p&gt;It’s simple but powerful and compatible with different OS platforms. Even more, it has lots of pre-defined modules for us to use, which significantly make the dream of &lt;strong&gt;reusing Dev-Ops&lt;/strong&gt; scripts come true. &lt;/p&gt;
&lt;p&gt;However, when you’re goging to use this fantastic tool, how to debug when you’re executing the ansible play-book with flow of commands? It looks like a unstoppable flow.&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Ansible" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://morganwu277.github.io/tags/Ansible/"/>
    
      <category term="Debug" scheme="https://morganwu277.github.io/tags/Debug/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Exercises</title>
    <link href="https://morganwu277.github.io/2017/06/13/Leetcode-Exercise/"/>
    <id>https://morganwu277.github.io/2017/06/13/Leetcode-Exercise/</id>
    <published>2017-06-13T21:09:45.000Z</published>
    <updated>2017-06-13T22:50:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a leetcode algorithm list for me to track my thought and solutions. </p>
<a id="more"></a>
<h1 id="Two-Sum">1. Two-Sum</h1><p>Problem Description: <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">1. Two-Sum</a> </p>
<h2 id="Golang">1.1. Golang</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</div><div class="line">    size := <span class="built_in">len</span>(nums)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</div><div class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; size; j++ &#123;</div><div class="line">            <span class="keyword">if</span> nums[i] + nums[j] == target &#123;</div><div class="line">                result := []<span class="keyword">int</span>&#123;i, j&#125;</div><div class="line">                sort.Slice(result, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">                    <span class="keyword">return</span> result[i] &lt;= result[j]</div><div class="line">                &#125;)</div><div class="line">                <span class="keyword">return</span> result</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Path-Sum">2. Path Sum</h1><p>Problem Description: <a href="https://leetcode.com/problems/path-sum" target="_blank" rel="external">112. Path Sum</a></p>
<h2 id="Java">2.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    Test if there is a path from current node to leaf node</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (sum == root.val) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        sum = sum - root.val; <span class="comment">// take value from current root node</span></div><div class="line">        <span class="keyword">return</span> hasPathSum(root.left, sum) || hasPathSum(root.right, sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Reverse-Words-in-a-String">3. Reverse Words in a String</h1><p>Problem Description: <a href="https://leetcode.com/problems/reverse-words-in-a-string" target="_blank" rel="external">151. Reverse Words in a String</a></p>
<h2 id="Java-1">3.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        s = s.trim();</div><div class="line">        <span class="keyword">if</span>(s.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        String[] str_arr = s.split(<span class="string">"\\s+"</span>);</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = str_arr.length-<span class="number">1</span>; i&gt;<span class="number">0</span>; i--) &#123;</div><div class="line">            sb.append(str_arr[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        sb.append(str_arr[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Combine-Two-Tables">4. Combine Two Tables</h1><p>Problem Description: <a href="https://leetcode.com/problems/combine-two-tables" target="_blank" rel="external">175. Combine Two Tables</a></p>
<h2 id="MySQL">4.1. MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Write your MySQL query statement below</div><div class="line">select p.FirstName, p.LastName, a.City, a.State from Person as p </div><div class="line">  left join Address as a </div><div class="line">  on </div><div class="line">  p.PersonId = a.PersonId;</div></pre></td></tr></table></figure>
<h1 id="Fizz-Buzz">5. Fizz Buzz</h1><p>Problem Description: <a href="https://leetcode.com/problems/fizz-buzz/" target="_blank" rel="external">412. Fizz Buzz</a></p>
<h2 id="Java-2">5.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">multiple</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> modValue)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> i%modValue==<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fizzBuzz</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</div><div class="line">            String str = String.valueOf(i);</div><div class="line">            <span class="keyword">if</span>(multiple(i,<span class="number">3</span>) &amp;&amp; multiple(i,<span class="number">5</span>)) &#123;</div><div class="line">                list.add(<span class="string">"FizzBuzz"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(multiple(i,<span class="number">3</span>) &amp;&amp; !multiple(i,<span class="number">5</span>)) &#123;</div><div class="line">                list.add(<span class="string">"Fizz"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!multiple(i,<span class="number">3</span>) &amp;&amp; multiple(i,<span class="number">5</span>)) &#123;</div><div class="line">                list.add(<span class="string">"Buzz"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                list.add(str);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a leetcode algorithm list for me to track my thought and solutions. &lt;/p&gt;
    
    </summary>
    
      <category term="Read &amp; Think" scheme="https://morganwu277.github.io/categories/Read-Think/"/>
    
      <category term="Algorithm" scheme="https://morganwu277.github.io/categories/Read-Think/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://morganwu277.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="https://morganwu277.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Simple Swift Intro</title>
    <link href="https://morganwu277.github.io/2017/06/12/Simple-Swift-Intro/"/>
    <id>https://morganwu277.github.io/2017/06/12/Simple-Swift-Intro/</id>
    <published>2017-06-13T03:24:27.000Z</published>
    <updated>2017-06-13T03:24:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Emoji File Name under MacOSX</title>
    <link href="https://morganwu277.github.io/2017/06/09/Emoji-File-Name-under-MacOSX/"/>
    <id>https://morganwu277.github.io/2017/06/09/Emoji-File-Name-under-MacOSX/</id>
    <published>2017-06-09T22:58:31.000Z</published>
    <updated>2017-06-09T23:30:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently was too busy on small stuff that I can’t focus on myself on the real thing I need to tackle. Annoying… </p>
<p>Anyway, I still find something fun which also stimulate my mind!</p>
<p><img src="https://www.webpagefx.com/tools/emoji-cheat-sheet/graphics/emojis/grin.png" alt=""></p>
<p>Interesting! Ah!</p>
<a id="more"></a>
<center><img src="emoji_file_name1.png" alt="Emoji File Name under MacOSX" title="Emoji File Name under MacOSX"></center>

<center><img src="emoji_file_name2.png" alt="Emoji File Name under MacOSX Terminal" title="Emoji File Name under MacOSX Terminal"></center>

<p>Here is my code of generating this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash </span></div><div class="line"></div><div class="line"><span class="built_in">set</span> -e </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;</div><div class="line"><span class="keyword">do</span> </div><div class="line">    filename=<span class="string">'👍 '</span></div><div class="line">    <span class="keyword">for</span> (( j=1;j&lt;=<span class="variable">$i</span>;j++ ))</div><div class="line">    <span class="keyword">do</span></div><div class="line">        filename+=<span class="string">'👍 '</span></div><div class="line">    <span class="keyword">done</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$filename</span></div><div class="line">    touch <span class="string">"<span class="variable">$filename</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="external">More about Emoji…</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently was too busy on small stuff that I can’t focus on myself on the real thing I need to tackle. Annoying… &lt;/p&gt;
&lt;p&gt;Anyway, I still find something fun which also stimulate my mind!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.webpagefx.com/tools/emoji-cheat-sheet/graphics/emojis/grin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Interesting! Ah!&lt;/p&gt;
    
    </summary>
    
      <category term="Fun" scheme="https://morganwu277.github.io/categories/Fun/"/>
    
      <category term="Code" scheme="https://morganwu277.github.io/categories/Fun/Code/"/>
    
      <category term="Mac OSX" scheme="https://morganwu277.github.io/categories/Fun/Code/Mac-OSX/"/>
    
    
      <category term="Emoji" scheme="https://morganwu277.github.io/tags/Emoji/"/>
    
      <category term="Mac OSX" scheme="https://morganwu277.github.io/tags/Mac-OSX/"/>
    
  </entry>
  
  <entry>
    <title>Transfer 15TB of Tiny Files</title>
    <link href="https://morganwu277.github.io/2017/06/05/Transfer-15TB-of-Tiny-Files/"/>
    <id>https://morganwu277.github.io/2017/06/05/Transfer-15TB-of-Tiny-Files/</id>
    <published>2017-06-05T23:15:46.000Z</published>
    <updated>2017-06-08T01:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Days ago, when I was setting up an Internet Cafe System, I met a problem of transferring 600+ GB gaming files from one machine to another.</p>
<p>Most of them are <code>small files</code>, I have two options:</p>
<ol>
<li>Compress and then transfer, which will cost lots of CPU, and of course time.</li>
<li>Directly transfer these files, which will be very slow since too many tiny files.</li>
</ol>
<p>In the End, I used the <code>rsync</code> method.</p>
<a id="more"></a>
<p><img src="https://www.webpagefx.com/tools/emoji-cheat-sheet/graphics/emojis/stuck_out_tongue_winking_eye.png" alt="">Relax time, here is the Windows start animation.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/nCobAnhWr-c" frameborder="0" allowfullscreen></iframe></div>
<h1 id="So-How">1. So, How?</h1><h2 id="The-Rsync-method">1.1. The Rsync method</h2><p>My scenario was transferring files from Windows XP to a Linux Server. About how to setup <code>Cygwin in Windows XP/2003</code>, please review <a href="/2017/06/04/Setup-Cygwin-in-Windows-XP-2003/" title="Setup Cygwin in Windows XP/2003">Setup Cygwin in Windows XP/2003</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rsync -a -z -vvv -S -e <span class="string">'ssh -o "ServerAliveInterval 7200"'</span> \ </div><div class="line">	/path/of/source_dir root@destination_server:/path/of/destination_dir</div></pre></td></tr></table></figure>
<p>This will transfer <code>/path/of/source_dir</code> to <code>/path/of/destination_dir</code> by using SSH tunnel and keep alive for 2 hours, using <a href="https://rsync.samba.org/tech_report/" target="_blank" rel="external">Rsync algorithm</a>.</p>
<h2 id="Compress-amp-Package-amp-Transfer">1.2. Compress &amp; Package &amp; Transfer</h2><p>As above, we mentioned that we would like to compress these files and then transfer. Here is how we implement it by using <code>tar</code> and <code>pigz</code>(parallel gzip) command which wins over the rsync method.</p>
<p><strong>Source Machine</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -cf - -C /path/of/small/files . | pigz | nc -l 9876</div></pre></td></tr></table></figure></p>
<p><strong>Destination Machine (Download)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nc source_machine_ip 9876 | pigz -d | tar -xf - -C /put/stuff/here</div></pre></td></tr></table></figure></p>
<p><strong>Destination Machine (Archive)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nc source_machine_ip 9876 &gt; smallstuff.tar.gz</div></pre></td></tr></table></figure></p>
<h1 id="But-which-one-is-better">2. But which one is better?</h1><p>The result is <code>nc + pigz</code> solution always win for the first time transfer, no matters for large files or small files.</p>
<p>My laptop has 4 CPU cores built-in, so the <code>rsync</code> solution is about 3-4 times slower than the <code>nc + pigz</code> solution for the first-time transfer.</p>
<p>However, for incremental files update, of course, <code>rsync</code> wins over another since it only compute the changes by using modification timestamp and size .</p>
<p>Here is the script I used to generate <code>640,000</code> files with each as size of <code>8 kb</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;; <span class="keyword">do</span> </div><div class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> &#123;1..10&#125;; <span class="keyword">do</span> </div><div class="line">    mkdir -p <span class="string">"test_<span class="variable">$i</span>/test_<span class="variable">$j</span>"</span></div><div class="line">    <span class="built_in">cd</span> <span class="string">"test_<span class="variable">$i</span>/test_<span class="variable">$j</span>"</span></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> &#123;1..6400&#125;; <span class="keyword">do</span> </div><div class="line">      dd <span class="keyword">if</span>=/dev/zero of=test_<span class="string">"<span class="variable">$k</span>"</span> bs=1024 count=8 &gt; /dev/null 2&gt;&amp;1 &amp; </div><div class="line">    <span class="keyword">done</span></div><div class="line">    <span class="built_in">cd</span> -</div><div class="line">  <span class="keyword">done</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<h1 id="Conclusion">3. Conclusion</h1><ol>
<li>First Time Transfer, use <code>pigz + nc</code></li>
<li>Incremental Files Update, use <code>rsync</code></li>
</ol>
<hr>
<p>References:</p>
<ul>
<li><a href="https://serverfault.com/questions/721223/transfer-15tb-of-tiny-files" target="_blank" rel="external">Transfer 15 TB of Tiny Files</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Days ago, when I was setting up an Internet Cafe System, I met a problem of transferring 600+ GB gaming files from one machine to another.&lt;/p&gt;
&lt;p&gt;Most of them are &lt;code&gt;small files&lt;/code&gt;, I have two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compress and then transfer, which will cost lots of CPU, and of course time.&lt;/li&gt;
&lt;li&gt;Directly transfer these files, which will be very slow since too many tiny files.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the End, I used the &lt;code&gt;rsync&lt;/code&gt; method.&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Backup" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Backup/"/>
    
    
      <category term="Rsync" scheme="https://morganwu277.github.io/tags/Rsync/"/>
    
      <category term="transfer" scheme="https://morganwu277.github.io/tags/transfer/"/>
    
      <category term="copy" scheme="https://morganwu277.github.io/tags/copy/"/>
    
      <category term="nc" scheme="https://morganwu277.github.io/tags/nc/"/>
    
      <category term="many" scheme="https://morganwu277.github.io/tags/many/"/>
    
      <category term="tiny" scheme="https://morganwu277.github.io/tags/tiny/"/>
    
      <category term="file" scheme="https://morganwu277.github.io/tags/file/"/>
    
  </entry>
  
  <entry>
    <title>Setup Cygwin in Windows XP/2003</title>
    <link href="https://morganwu277.github.io/2017/06/04/Setup-Cygwin-in-Windows-XP-2003/"/>
    <id>https://morganwu277.github.io/2017/06/04/Setup-Cygwin-in-Windows-XP-2003/</id>
    <published>2017-06-05T03:07:00.000Z</published>
    <updated>2017-06-08T01:19:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Everyone should know how to setup <a href="https://cygwin.com/" target="_blank" rel="external"><code>Cygwin</code></a> under Windows 7/10, however, if you do it in Windows XP/2003, it will failed.<br>Why? Because the latest packages are only compatible with Windows 7 or higher.<br>In other words, the Cygwin respository doesn’t have a mechanism to maintain different version of these binaries. </p>
<p>So, how to setup Cygwin under Windows XP then? </p>
<a id="more"></a>
<p>The good news is that someone keeps it. </p>
<h1 id="Download-the-setup-exe">1. Download the setup.exe</h1><p>32-bit: <a href="http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/setup/snapshots/setup-x86-2.874.exe" target="_blank" rel="external">setup-x86-2.874.exe</a><br>64-bit: <a href="http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/setup/snapshots/setup-x86_64-2.874.exe" target="_blank" rel="external">setup-x86_64-2.874.exe</a></p>
<h1 id="Run-the-setup-exe-with-X-option">2. Run the setup.exe with -X option</h1><p>Please open the cmd to run with <code>-X</code> option</p>
<pre><code class="cmd">setup-x86-<span class="number">2</span>.<span class="number">874</span>.exe -X
</code></pre>
<h1 id="Use-the-legacy-repositories">3. Use the legacy repositories</h1><p>32-bit: <a href="http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/2016/08/30/104223" target="_blank" rel="external">http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/2016/08/30/104223</a><br>64-bit: <a href="http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/2016/08/30/104235" target="_blank" rel="external">http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/2016/08/30/104235</a></p>
<p>Here are the full list of <code>Cygwin Time Machine Repository</code>, please use the corresponding respository as the version of <code>setup.exe</code><br>32-bit: <a href="http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/index.html" target="_blank" rel="external">http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/index.html</a><br>64-bit: <a href="http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/index.html" target="_blank" rel="external">http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/index.html</a></p>
<p>Then always use this repository instead of others to install packages. </p>
<p>Engjoy!!!</p>
<hr>
<p>References: </p>
<ul>
<li><a href="http://www.crouchingtigerhiddenfruitbat.org/Cygwin/timemachine.html#cygwintimemachine" target="_blank" rel="external"><strong>Cygwin Time Machine</strong>, TL;DR</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Everyone should know how to setup &lt;a href=&quot;https://cygwin.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Cygwin&lt;/code&gt;&lt;/a&gt; under Windows 7/10, however, if you do it in Windows XP/2003, it will failed.&lt;br&gt;Why? Because the latest packages are only compatible with Windows 7 or higher.&lt;br&gt;In other words, the Cygwin respository doesn’t have a mechanism to maintain different version of these binaries. &lt;/p&gt;
&lt;p&gt;So, how to setup Cygwin under Windows XP then? &lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Windows" scheme="https://morganwu277.github.io/categories/Tool-Skill/Windows/"/>
    
    
      <category term="Cygwin" scheme="https://morganwu277.github.io/tags/Cygwin/"/>
    
      <category term="Windows XP" scheme="https://morganwu277.github.io/tags/Windows-XP/"/>
    
      <category term="Windows 2003" scheme="https://morganwu277.github.io/tags/Windows-2003/"/>
    
      <category term="Package" scheme="https://morganwu277.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>Useful Links</title>
    <link href="https://morganwu277.github.io/2017/06/03/Useful-Links/"/>
    <id>https://morganwu277.github.io/2017/06/03/Useful-Links/</id>
    <published>2017-06-03T19:14:37.000Z</published>
    <updated>2017-06-10T17:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is an assembly of useful links.</p>
<a id="more"></a>
<ul>
<li><a href="https://tldr.ostera.io/tar" title="Those Linux Command Example" target="_blank" rel="external">Those Linux Command Example</a></li>
<li><a href="https://explainshell.com/explain?cmd=tar+xzvf+a.tar.gz" title="Explain Shell" target="_blank" rel="external">Explain Shell</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is an assembly of useful links.&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Knowledge Base" scheme="https://morganwu277.github.io/categories/Tool-Skill/Knowledge-Base/"/>
    
    
      <category term="Tools" scheme="https://morganwu277.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Straight Through and Crossover Cable</title>
    <link href="https://morganwu277.github.io/2017/05/27/Straight-Through-and-Crossover-Cable/"/>
    <id>https://morganwu277.github.io/2017/05/27/Straight-Through-and-Crossover-Cable/</id>
    <published>2017-05-27T19:14:12.000Z</published>
    <updated>2017-06-08T01:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I went Halifax to help a friend to setup Internet Cafe System, including the hardware and software. And I met the problem of make Internet Cables, i.e, Straight Through and Crossover and T568A/B color orders.</p>
<p>There are two kinds of network cable that we already know, <strong><code>Straight Through</code></strong> and <strong><code>Crossover</code></strong> Cable. This article will give an summary of the differences and how to setup a connection in real by giving photos.</p>
<a id="more"></a>
<h1 id="Straight-Through-and-Crossover">1. Straight Through and Crossover</h1><h2 id="T568A-and-T568B-Standards">1.1. T568A and T568B Standards</h2><p>Please note the only differences are the sequences order of different lines with different colors.</p>
<center><img src="T568A-T568B-Wiring-Standard.png" alt="T568A-T568B-Wiring-Standard" title="T568A-T568B-Wiring-Standard"></center>


<h2 id="Straight-Through-and-Crossover-1">1.2. Straight Through and Crossover</h2><p>The <code>Straight Through</code> cable will use the same sequence order in both side of a cable, either use the same T568A or T568B order.<br>Normally, T568B order has a better performance. Next picture is the <code>Straight Through</code> with T568B order.</p>
<center><img src="Straight-Through-Cable.png" alt="Straight-Through-Cable" title="Straight-Through-Cable"></center>


<p>The Crossover cable will use the opposite sequence order in different sides, i.e., one side use T568A and another use T568A, or vice versa.<br>Next shows a crossover example.</p>
<center><img src="crossover-cable.png" alt="Crossover Cable" title="Crossover-Cable"></center>


<h2 id="When-to-use-which-cable">1.3. When to use which cable?</h2><p><code>Straight Through</code> cable is primarily used for connecting unlike devices, and <code>Crossover</code> cable is used for connecting alike devices.<br>Use straight through cable for the following cabling:</p>
<ul>
<li>Switch to router</li>
<li>Switch to PC or server</li>
<li>Hub to PC or server</li>
<li>Home Router to PC (a <code>Home Router</code> normally contains a switch and a router)</li>
</ul>
<p>Use crossover cables for the following cabling:</p>
<ul>
<li>Switch to switch</li>
<li>Switch to hub</li>
<li>Hub to hub (<code>Switch and Hub are alike devices</code>)</li>
<li>Router to router</li>
<li>Router Ethernet port to PC NIC</li>
<li>PC to PC</li>
</ul>
<h1 id="How-to-Setup">2. How to Setup?</h1><h2 id="Things-You-Need">2.1. Things You Need</h2><center><img src="1_tools_cable.jpg" alt="Cable" title="Cable"></center>

<center><img src="1_tools_pliers.jpg" alt="Pilers" title="Pilers"></center>

<center><img src="1_tools_RJ45ports.jpg" alt="RJ45 Ports" title="RJ45 Ports"></center>

<h2 id="Take-off-the-Skin-of-the-Cable">2.2. Take off the Skin of the Cable</h2><center><img src="2_take_over_skin.jpg" alt="Take off Skin of Cable" title="Take off Skin of Cable"></center>

<center><img src="2_take_over_skin2.jpg" alt="Take off Skin of Cable" title="Take off Skin of Cable"></center>

<center><img src="2_take_over_skin3.jpg" alt="Take off Skin of Cable" title="Take off Skin of Cable"></center>

<h2 id="Places-the-Lines-as-T568A-T568B-Order">2.3. Places the Lines as T568A/T568B Order</h2><center><img src="4_place_order.jpg" alt="Places the Lines" title="Places the Lines"></center>

<center><img src="4_place_order2.jpg" alt="Places the Lines" title="Places the Lines"></center>

<h2 id="Cut-Cable-to-Make-Lines-Neat">2.4. Cut Cable to Make Lines Neat</h2><center><img src="3_cut_lines1.jpg" alt="Cut Cable to Make Lines Neat" title="Cut Cable to Make Lines Neat"></center>

<center><img src="3_cut_lines2.jpg" alt="Cut Cable to Make Lines Neat" title="Cut Cable to Make Lines Neat"></center>

<h2 id="Push-Lines-into-RJ45-Port">2.5. Push Lines into RJ45 Port</h2><center><img src="5_push_into_RJ45.jpg" alt="Push Lines into RJ45 Port" title="Push Lines into RJ45 Port"></center>

<center><img src="5_push_into_RJ45_3.jpg" alt="Push Lines into RJ45 Port" title="Push Lines into RJ45 Port"></center>

<h2 id="Use-Piller-to-Hold-Down-the-Metel-Sheets-on-RJ45">2.6. Use Piller to Hold Down the Metel Sheets on RJ45</h2><center><img src="6_Piller.jpg" alt="Use Piller to Hold Down" title="Use Piller to Hold Down"></center>

<center><img src="6_Piller_2.jpg" alt="Use Piller to Hold Down" title="Use Piller to Hold Down"></center>


<hr>
<p>References:</p>
<ul>
<li><a href="http://www.cables-solutions.com/difference-between-straight-through-and-crossover-cable.html" target="_blank" rel="external">Difference Between Straight Through and Crossover Cable</a></li>
<li><a href="http://jingyan.baidu.com/article/ce09321b756c062bff858f17.html" target="_blank" rel="external">How to make Network Cable</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I went Halifax to help a friend to setup Internet Cafe System, including the hardware and software. And I met the problem of make Internet Cables, i.e, Straight Through and Crossover and T568A/B color orders.&lt;/p&gt;
&lt;p&gt;There are two kinds of network cable that we already know, &lt;strong&gt;&lt;code&gt;Straight Through&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;Crossover&lt;/code&gt;&lt;/strong&gt; Cable. This article will give an summary of the differences and how to setup a connection in real by giving photos.&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Gaming Club Ops" scheme="https://morganwu277.github.io/categories/Tool-Skill/Gaming-Club-Ops/"/>
    
    
      <category term="Network" scheme="https://morganwu277.github.io/tags/Network/"/>
    
      <category term="Cable" scheme="https://morganwu277.github.io/tags/Cable/"/>
    
  </entry>
  
  <entry>
    <title>SSH Tricks</title>
    <link href="https://morganwu277.github.io/2017/05/18/SSH-Tricks/"/>
    <id>https://morganwu277.github.io/2017/05/18/SSH-Tricks/</id>
    <published>2017-05-18T19:13:39.000Z</published>
    <updated>2017-06-08T01:11:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>You sometimes would see somebody doing something cool with SSH(<a href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="external">Secure Shell</a>), like without password, or even without key, or even more, port forwarding to break the firewall restrictions.</p>
<p>This post will discuss ssh tricks of authentications methods and port forwarding approaches.</p>
<p>Three kinds of SSH authentication methods:</p>
<ul>
<li>Password</li>
<li>Public/private key pair</li>
<li>Host-based authentication</li>
</ul>
<p>There are three kinds of SSH Forwarding:</p>
<ul>
<li>Local Port Forwarding</li>
<li>Remote Reverse Forwarding</li>
<li>Dynamic Port Forwarding</li>
</ul>
<p>This post will make these stuff more clear.</p>
<a id="more"></a>
<h1 id="SSH-Authentication-Methods">1. SSH Authentication Methods</h1><p>We won’t talk about the password methods since it’s too easy.</p>
<h2 id="Public-Private-Keypair-free-password">1.1. Public/Private Keypair, free password</h2><ol>
<li>Step 1: Genrate Keys by typing <code>ssh-keygen</code> from you <code>server1</code>.<ul>
<li>It will generate <code>~/.ssh/id_rsa</code> and <code>~/.ssh/id_rsa.pub</code> key pairs which are private key/public keys of your <code>server1</code> of the user whom you’re currently logged as.</li>
<li>private key should be kept secret</li>
<li>public key is meant to be shared</li>
</ul>
</li>
<li>Step 2: Copy the content of public key to <code>remote</code> server’s <code>~/.ssh/authorized_keys</code>, by appending this file.</li>
<li>Step 3: Login from <code>server1</code> to <code>remote</code> server, you don’t need password now!</li>
</ol>
<h2 id="Host-based-Authentication">1.2. Host-based Authentication</h2><ul>
<li>Doesn’t need user credentials(password or key), actually we just write it in a configuration file, it’s kind of alias</li>
<li>Provides trust based on hostname and userid</li>
<li>Userid on both system has to be the same</li>
</ul>
<p>Here is an example that login into <code>server1</code> vagrant box:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Here we list the hostname and its config</span></div><div class="line">[09:51 PM morganwu@morgan-yinnut ~]$ cat ~/.ssh/config  |grep -A6 srv1 </div><div class="line">Host srv1</div><div class="line">    User vagrant</div><div class="line">    Port 2222</div><div class="line">    Hostname 127.0.0.1</div><div class="line">    IdentityFile /Users/morganwu/Developer/workspace/ssh_port_forward/server1/.vagrant/machines/default/virtualbox/private_key</div><div class="line">    StrictHostKeyChecking no</div><div class="line"></div><div class="line"><span class="comment"># Here we just ssh with an alias without username and hostname</span></div><div class="line">[09:51 PM morganwu@morgan-yinnut ~]$ ssh srv1</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</div><div class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</div><div class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</div><div class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</div><div class="line">It is also possible that a host key has just been changed.</div><div class="line">The fingerprint <span class="keyword">for</span> the ECDSA key sent by the remote host is</div><div class="line">SHA256:jYEhZ8yXtOJFowmQnMyA+bHshrhX7H30vVQF9UyND48.</div><div class="line">Please contact your system administrator.</div><div class="line">Add correct host key <span class="keyword">in</span> /Users/morganwu/.ssh/known_hosts to get rid of this message.</div><div class="line">Offending ECDSA key <span class="keyword">in</span> /Users/morganwu/.ssh/known_hosts:247</div><div class="line">Password authentication is disabled to avoid man-in-the-middle attacks.</div><div class="line">Keyboard-interactive authentication is disabled to avoid man-in-the-middle attacks.</div><div class="line">Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-112-generic x86_64)</div><div class="line"></div><div class="line"> * Documentation:  https://help.ubuntu.com/</div><div class="line"></div><div class="line">  System information as of Fri May 19 01:50:52 UTC 2017</div><div class="line"></div><div class="line">  System load:  0.28              Processes:           78</div><div class="line">  Usage of /:   3.6% of 39.34GB   Users logged <span class="keyword">in</span>:     0</div><div class="line">  Memory usage: 25%               IP address <span class="keyword">for</span> eth0: 10.0.2.15</div><div class="line">  Swap usage:   0%</div><div class="line"></div><div class="line">  Graph this data and manage this system at:</div><div class="line">    https://landscape.canonical.com/</div><div class="line"></div><div class="line">  Get cloud support with Ubuntu Advantage Cloud Guest:</div><div class="line">    http://www.ubuntu.com/business/services/cloud</div><div class="line"></div><div class="line">0 packages can be updated.</div><div class="line">0 updates are security updates.</div><div class="line"></div><div class="line">New release <span class="string">'16.04.2 LTS'</span> available.</div><div class="line">Run <span class="string">'do-release-upgrade'</span> to upgrade to it.</div><div class="line"></div><div class="line"></div><div class="line">Last login: Fri May 19 01:50:53 2017 from 10.0.2.2</div><div class="line">vagrant@vagrant-ubuntu-trusty-64:~$</div></pre></td></tr></table></figure></p>
<h1 id="SSH-Forwarding">2. SSH Forwarding</h1><h2 id="SSH-Local-Normal-Port-Forwarding">2.1. SSH Local Normal Port Forwarding</h2><p>Here is the scenario why we need Port Forwarding: bypass the private network, or using the <a href="https://en.wikipedia.org/wiki/Jump_server" target="_blank" rel="external">Jumpbox</a>.</p>
<center><img src="local_port_forward.png" alt="SSH Local Port Forwarding Scenario" title="SSH Local Port Forwarding Scenario"><br></center>

<p>Now we want to access web server on <code>box2 via box1</code>. Here is how we create a local port forward.</p>
<center><img src="create_local_port_forward.png" alt="Create a Tunnel from client to box 1" title="Create a Tunnel from client to box 1"></center>

<p>Now we can type <code>localhost:8000</code> from <code>your-box</code>, this will forward the request to <code>box-2:80</code> via <code>box-1</code> ssh tunnel created above!<br>If we have multiple <code>box-2</code> here, this is the <a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)" target="_blank" rel="external">load balancing</a> model.</p>
<p>We call this as <code>local port forwarding</code> instead of <code>remote port forwarding</code>, since the setup direction is the same as the resource access direction. This is also called the <code>normal tunnel</code> instead of the <code>reverse tunnel</code> via ssh. This can be done by following three steps:</p>
<ul>
<li>setup ssh connection from <code>your-box</code> to <code>box-1</code></li>
<li><code>box-1</code> forward the requets to <code>box-2</code></li>
<li>so you can access <code>box-2</code> from <code>your-box</code> now even <code>box-2</code> is in the internal network</li>
</ul>
<p>Run the command <code>ssh -L localport:DEST_HOST:DEST_PORT VIA_HOST</code> locally and then access local <code>localport</code> to get the <code>DEST_HOST:DEST_PORT</code> content.<br>This will open a <code>localport</code> listened locally, to serve all requests from local and then forward them to <code>DEST_HOST:DEST_PORT</code> by using the ssh tunnel from local to the <code>VIA_HOST</code>.</p>
<h3 id="Share-Your-SSH-Local-Forwarding">2.1.1. Share Your SSH Local Forwarding</h3><p>We could enable <code>localport</code> to be accessed by other machines by appending the <code>-g</code> switch.</p>
<p>Next we enable local port forwarding from <code>localhost:8000</code> to <code>ece.uwaterloo.ca:80</code> via <code>ecelinux4.uwaterloo.ca:22</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[11:23 PM morganwu@morgan-yinnut proxies]$ ssh -L 8000:ece.uwaterloo.ca:80 -g  m92wu@ecelinux4.uwaterloo.ca</div><div class="line">Last login: Thu May 18 23:23:43 2017 from cpebc4dfb93ed53-cmbc4dfb93ed50.cpe.net.cable.rogers.com</div><div class="line">ECE Department Linux NoMachine Server</div><div class="line"></div><div class="line">This server is ONLY to be used to access other Linux servers.</div><div class="line">Course software should NOT be run on this server.</div><div class="line"></div><div class="line">PLEASE USE ssh -X eceLinuxN TO LOG INTO OTHER LINUX SERVERS SUCH AS</div><div class="line">  eceLinux1, eceLinux2, eceLinux3, eceLinux5 .. eceLinux11 and run</div><div class="line">  course software there.</div><div class="line"></div><div class="line">*** THANK YOU TO WEEF <span class="keyword">for</span> purchasing this server! ***</div><div class="line">This machine is a NoMachine server with a 4-core 3.8GHz AMD FX CPU with 32G of ECC RAM</div><div class="line"></div><div class="line">The login password is synchronized with Nexus.</div><div class="line"></div><div class="line">Forward any questions to Eric <span class="keyword">in</span> E2-2357 or sysadmins@ecemail.uwaterloo.ca</div><div class="line"></div><div class="line">[m92wu@ecelinux4 ~]$</div></pre></td></tr></table></figure>
<p>Here lists the port information, we can see 8080 is bound to all inet interfaces.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[11:23 PM morganwu@morgan-yinnut proxies]$ netstat -na|grep tcp|grep 8000</div><div class="line">tcp4       0      0  *.8000                 *.*                    LISTEN     </div><div class="line">tcp6       0      0  *.8000                 *.*                    LISTEN</div></pre></td></tr></table></figure>
<p>Now let’s access the <code>ece.uwaterloo.ca:80</code> page from another private virtual machine on my local computer. We can see it could have access to that page now.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vagrant@vagrant-ubuntu-trusty-64:~$ curl 192.168.0.12:8000</div><div class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</div><div class="line">&lt;html&gt;&lt;head&gt;</div><div class="line">&lt;title&gt;302 Found&lt;/title&gt;</div><div class="line">&lt;/head&gt;&lt;body&gt;</div><div class="line">&lt;h1&gt;Found&lt;/h1&gt;</div><div class="line">&lt;p&gt;The document has moved &lt;a href=<span class="string">"https://ece.uwaterloo.ca/"</span>&gt;here&lt;/a&gt;.&lt;/p&gt;</div><div class="line">&lt;/body&gt;&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>Here is an image for demonstrating this:</p>
<center><img src="share_ssh_local_tunnel.png" alt="Share a Tunnel from Your Computer to Others" title="Share a Tunnel from Your Computer to Others"></center>

<h3 id="Use-Compression-via-this-tunnel">2.1.2. Use Compression via this tunnel</h3><p>By using <code>-C</code> together with <code>-L</code> option.</p>
<h2 id="SSH-Remote-Reverse-Port-Forwarding">2.2. SSH Remote Reverse Port Forwarding</h2><p>Local Port Forwarding has the same direction of SSH tunnel as the request forwarding, while Remote Reverse Forwarding does the opposite direction.</p>
<center><img src="remote_port_forward.png" alt="Create a Tunnel from your-box to box-1" title="Create a Tunnel from your-box to box-1"></center>

<p>So you setup a ssh tunnel from <code>your-box</code> to <code>box-1</code> which has a public address while <code>your-box</code> doesn’t. But you would like to access <code>your-box</code> from <code>box-2</code> which is outside. Now you can only do this via <code>box-1</code>.</p>
<p>If we have multiple <code>your-box</code> here, this is the so-called <code>reverse proxy</code> <a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)" target="_blank" rel="external">load balancing</a> model.</p>
<p>So our command format is <code>ssh -R VIA_LISTEN_PORT:DEST_HOST:DEST_PORT VIA_HOST</code>,<br>This command will:</p>
<ul>
<li>open a ssh tunnel from <code>DEST_HOST</code> to <code>VIA_HOST</code></li>
<li>listen a <code>VIA_LISTEN_PORT</code> on the <code>VIA_HOST</code></li>
<li>forward all requests from <code>VIA_HOST:VIA_LISTEN_PORT</code> to <code>DEST_HOST:DEST_PORT</code></li>
</ul>
<p>Also, the <code>-C</code> option will work here.</p>
<h2 id="SSH-Dynamic-Port-Forwarding">2.3. SSH Dynamic Port Forwarding</h2><p>In the <a href="#SSH-Local-Normal-Port-Forwarding" title="SSH-Local-Normal-Port-Forwarding">SSH-Local-Normal-Port-Forwarding</a>, we already know we can forward <code>localhost:8000</code> request to <code>remote_server:port</code> via a <code>remote public server</code>, but this is only for specific port.</p>
<p>What if we want to forward every kind of requests? This is the idea of dynamic port forwarding, which is also be called as a <code>proxy</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -D 9999 -C m92wu@ecelinux4.uwaterloo.ca</div></pre></td></tr></table></figure>
<p>The above command will forward every requests from localhost if you setup this socks proxy as the proxy of your client.</p>
<hr>
<p>References: </p>
<ul>
<li><a href="https://www.slideshare.net/zdennis/ssh-9115832" target="_blank" rel="external">https://www.slideshare.net/zdennis/ssh-9115832</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You sometimes would see somebody doing something cool with SSH(&lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Secure Shell&lt;/a&gt;), like without password, or even without key, or even more, port forwarding to break the firewall restrictions.&lt;/p&gt;
&lt;p&gt;This post will discuss ssh tricks of authentications methods and port forwarding approaches.&lt;/p&gt;
&lt;p&gt;Three kinds of SSH authentication methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;Public/private key pair&lt;/li&gt;
&lt;li&gt;Host-based authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are three kinds of SSH Forwarding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local Port Forwarding&lt;/li&gt;
&lt;li&gt;Remote Reverse Forwarding&lt;/li&gt;
&lt;li&gt;Dynamic Port Forwarding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post will make these stuff more clear.&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Network" scheme="https://morganwu277.github.io/categories/Tool-Skill/Network/"/>
    
    
      <category term="ssh" scheme="https://morganwu277.github.io/tags/ssh/"/>
    
      <category term="port forwarding" scheme="https://morganwu277.github.io/tags/port-forwarding/"/>
    
  </entry>
  
  <entry>
    <title>Read List</title>
    <link href="https://morganwu277.github.io/2017/05/16/Read-List/"/>
    <id>https://morganwu277.github.io/2017/05/16/Read-List/</id>
    <published>2017-05-16T18:14:54.000Z</published>
    <updated>2017-06-08T01:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Keep Updating to add new articles and papers to read <code>categories methodology style</code> </p>
<ul>
<li><a href="https://stephenholiday.com/notes/" target="_blank" rel="external">https://stephenholiday.com/notes/</a></li>
<li><a href="https://cs.stanford.edu/~matei/courses/2015/6.S897" target="_blank" rel="external">https://cs.stanford.edu/~matei/courses/2015/6.S897</a> </li>
</ul>
<p>Distributed System<br>If can’t find something <code>new to read</code>, consider these sites:</p>
<ul>
<li><a href="https://cs.stanford.edu/~matei/courses/2015/6.S897/" target="_blank" rel="external">https://cs.stanford.edu/~matei/courses/2015/6.S897/</a></li>
<li><a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="external">https://pdos.csail.mit.edu/6.824/schedule.html</a></li>
<li><a href="https://dancres.github.io/Pages/" target="_blank" rel="external">https://dancres.github.io/Pages/</a></li>
</ul>
<a id="more"></a>
<h1 id="Language">1. Language</h1><h2 id="Java">1.1. Java</h2><p><code>Java 8 Labmda, Streams</code></p>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/architect-lambdas-part1-2080972.html" target="_blank" rel="external">http://www.oracle.com/technetwork/articles/java/architect-lambdas-part1-2080972.html</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/architect-lambdas-part2-2081439.html" target="_blank" rel="external">http://www.oracle.com/technetwork/articles/java/architect-lambdas-part2-2081439.html</a></li>
<li><a href="https://www.ibm.com/developerworks/java/library/j-java-streams-1-brian-goetz/index.html" target="_blank" rel="external">https://www.ibm.com/developerworks/java/library/j-java-streams-1-brian-goetz/index.html</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html" target="_blank" rel="external">http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/architect-streams-pt2-2227132.html" target="_blank" rel="external">http://www.oracle.com/technetwork/articles/java/architect-streams-pt2-2227132.html</a></li>
</ul>
<h1 id="Network">2. Network</h1><p><code>BBR</code></p>
<ul>
<li><a href="http://queue.acm.org/detail.cfm?id=3022184" target="_blank" rel="external">http://queue.acm.org/detail.cfm?id=3022184</a></li>
<li><a href="https://www.ietf.org/proceedings/97/slides/slides-97-iccrg-bbr-congestion-control-02.pdf" target="_blank" rel="external">https://www.ietf.org/proceedings/97/slides/slides-97-iccrg-bbr-congestion-control-02.pdf</a></li>
<li><a href="https://www.zhihu.com/question/53559433" target="_blank" rel="external">https://www.zhihu.com/question/53559433</a></li>
<li><a href="https://www.zhihu.com/question/53858229" target="_blank" rel="external">https://www.zhihu.com/question/53858229</a></li>
</ul>
<h1 id="Recovery">3. Recovery</h1><p><code>BookKeeper and HedWig</code></p>
<ul>
<li><a href="http://dl.acm.org/citation.cfm?id=2433144" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=2433144</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/BOOKKEEPER/BookKeeper" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/BOOKKEEPER/BookKeeper</a></li>
<li><a href="http://bookkeeper.apache.org/" target="_blank" rel="external">http://bookkeeper.apache.org/</a></li>
<li><a href="http://blog.csdn.net/liuhong1123/article/details/8945456" target="_blank" rel="external">http://blog.csdn.net/liuhong1123/article/details/8945456</a></li>
<li><a href="http://dockone.io/article/78" target="_blank" rel="external">http://dockone.io/article/78</a></li>
</ul>
<h1 id="Streaming">4. Streaming</h1><p><code>Kafka: a Distributed Messaging System for Log Processing - LinkedIn 2011</code>, notes</p>
<ul>
<li><a href="http://people.csail.mit.edu/matei/courses/2015/6.S897/readings/kafka.pdf" target="_blank" rel="external">http://people.csail.mit.edu/matei/courses/2015/6.S897/readings/kafka.pdf</a></li>
</ul>
<h1 id="Container-amp-DevOps">5. Container &amp; DevOps</h1><p><code>Borg, Omega, and Kubernets</code></p>
<ul>
<li><a href="http://www.e-wilkes.com/john/papers/2016-Queue-Kubernetes.pdf" target="_blank" rel="external">http://www.e-wilkes.com/john/papers/2016-Queue-Kubernetes.pdf</a></li>
</ul>
<h1 id="Consistency-and-Locks">6. Consistency and Locks</h1><p><code>基于Redis的分布式锁到底安全么？</code></p>
<ul>
<li><a href="http://zhangtielei.com/posts/blog-redlock-reasoning.html" target="_blank" rel="external">http://zhangtielei.com/posts/blog-redlock-reasoning.html</a></li>
</ul>
<p><code>Consistency: From Chubby to Paxos and Raft</code> </p>
<h1 id="Cache">7. Cache</h1><p><code>Guava Cache</code></p>
<h1 id="OLTP-OLAP-Database">8. OLTP, OLAP, Database</h1><p><code>Hybrid Transactional/Analytical Processing: A Survey</code></p>
<ul>
<li><a href="http://delivery.acm.org/10.1145/3060000/3054784/p1771-ozcan.pdf" target="_blank" rel="external">http://delivery.acm.org/10.1145/3060000/3054784/p1771-ozcan.pdf</a></li>
</ul>
<p><code>Kudu: Storage for Fast Analytics on Fast Data</code></p>
<ul>
<li><a href="https://kudu.apache.org/kudu.pdf" target="_blank" rel="external">https://kudu.apache.org/kudu.pdf</a></li>
</ul>
<h1 id="Time-Series-Database">9. Time Series Database</h1><p><code>TSDB, OpenTSDB</code></p>
<ul>
<li><a href="http://btw2017.informatik.uni-stuttgart.de/slidesandpapers/E4-14-109/paper_web.pdf" target="_blank" rel="external">http://btw2017.informatik.uni-stuttgart.de/slidesandpapers/E4-14-109/paper_web.pdf</a></li>
<li>ftp://ftp.informatik.uni-stuttgart.de/pub/library/medoc.ustuttgart_fi/DIP-3729/DIP-3729.pdf</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Keep Updating to add new articles and papers to read &lt;code&gt;categories methodology style&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stephenholiday.com/notes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://stephenholiday.com/notes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cs.stanford.edu/~matei/courses/2015/6.S897&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cs.stanford.edu/~matei/courses/2015/6.S897&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Distributed System&lt;br&gt;If can’t find something &lt;code&gt;new to read&lt;/code&gt;, consider these sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cs.stanford.edu/~matei/courses/2015/6.S897/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cs.stanford.edu/~matei/courses/2015/6.S897/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pdos.csail.mit.edu/6.824/schedule.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://pdos.csail.mit.edu/6.824/schedule.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dancres.github.io/Pages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dancres.github.io/Pages/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Read &amp; Think" scheme="https://morganwu277.github.io/categories/Read-Think/"/>
    
      <category term="Knowledge Base" scheme="https://morganwu277.github.io/categories/Read-Think/Knowledge-Base/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka: a Distributed Messaging System for Log Processing - LinkedIn 2011</title>
    <link href="https://morganwu277.github.io/2017/05/14/Kafka-a-Distributed-Messaging-System-for-Log-Processing-LinkedIn-2011/"/>
    <id>https://morganwu277.github.io/2017/05/14/Kafka-a-Distributed-Messaging-System-for-Log-Processing-LinkedIn-2011/</id>
    <published>2017-05-14T16:07:06.000Z</published>
    <updated>2017-06-07T23:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Not complete yet.</p>
<blockquote>
<p><a href="https://kafka.apache.org/" target="_blank" rel="external">Kafka</a> is a Distributed Streaming platform. Kafka™ is used for building real-time data pipelines and streaming apps. It is <strong>horizontally scalable, fault-tolerant, wicked fast</strong>, and runs in production in thousands of companies. The Kafka site said it has three main functionalities:</p>
<ul>
<li><code>PUBLISH &amp; SUBSCRIBE</code> to streams of data like a messaging system</li>
<li><code>PROCESS</code> streams of data efficiently and in real time</li>
<li><code>STORE</code> streams of data safely in a distributed replicated cluster </li>
</ul>
</blockquote>
<hr>
<p>References: </p>
<ul>
<li><a href="http://people.csail.mit.edu/matei/courses/2015/6.S897/readings/kafka.pdf" target="_blank" rel="external">http://people.csail.mit.edu/matei/courses/2015/6.S897/readings/kafka.pdf</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Not complete yet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kafka&lt;/a&gt; is a Distributed Strea
    
    </summary>
    
      <category term="Read &amp; Think" scheme="https://morganwu277.github.io/categories/Read-Think/"/>
    
      <category term="Message Passing" scheme="https://morganwu277.github.io/categories/Read-Think/Message-Passing/"/>
    
    
      <category term="Kafka" scheme="https://morganwu277.github.io/tags/Kafka/"/>
    
      <category term="Message Queue" scheme="https://morganwu277.github.io/tags/Message-Queue/"/>
    
      <category term="Streaming" scheme="https://morganwu277.github.io/tags/Streaming/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://morganwu277.github.io/2017/04/29/hello-world/"/>
    <id>https://morganwu277.github.io/2017/04/29/hello-world/</id>
    <published>2017-04-30T03:07:00.000Z</published>
    <updated>2017-06-07T20:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h1 id="Quick-Start">1. Quick Start</h1><h2 id="Create-a-new-post">1.1. Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h2 id="Run-server">1.2. Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h2 id="Generate-static-files">1.3. Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h2 id="Deploy-to-remote-sites">1.4. Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
