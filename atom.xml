<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alice &amp;&amp; Bob</title>
  
  <subtitle>Alice &amp;&amp; Bob</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://morganwu277.github.io/"/>
  <updated>2018-07-02T21:14:30.000Z</updated>
  <id>https://morganwu277.github.io/</id>
  
  <author>
    <name>Morgan Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Terraform and Infrastructure as Code</title>
    <link href="https://morganwu277.github.io/2018/06/27/Terraform-and-Infrastructure-as-Code/"/>
    <id>https://morganwu277.github.io/2018/06/27/Terraform-and-Infrastructure-as-Code/</id>
    <published>2018-06-28T03:49:00.000Z</published>
    <updated>2018-07-02T21:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a start on Terraform operations against AWS to fulfill the thought of <a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code" target="_blank" rel="noopener">Infrastructure as Code</a></p><p>The best thing is, you can provision your server using command in parallel, quick, elegant and happily. And beyond that, if you make this one in a predictable way, think for a while, how much money you can save… Oh, my gosh!</p><p>So it has most of the features I desired for a tool to provision a server:</p><ul><li>Infrastructure as Code </li><li>Execution Plans </li><li>Resource Graph </li><li>Change Automation </li></ul><p>So, basically I want a tool to provision a server in a reliable and simple way. Better with <a href="https://en.wikipedia.org/wiki/Dependency_graph" target="_blank" rel="noopener">Dependency graph</a> feature, which is essentially the <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph" target="_blank" rel="noopener">DAG</a>. </p><p>So here is Terraform. Let’s start. </p><center><img src="terrform_aws.png" alt="Terraform and AWS" title="Terraform and AWS"></center><a id="more"></a><h1 id="Basic-Introduction">1. Basic Introduction</h1><p>One sentence to describe Terraform: provision your infrastructure in a desired sequence of components dependencies. </p><h2 id="Basic-Concept">1.1. Basic Concept</h2><ul><li><code>Provider</code>: <a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener">Providers</a> generally are an IaaS (e.g. AWS, GCP, Microsoft Azure, OpenStack), PaaS (e.g. Heroku), or SaaS services (e.g. Terraform Enterprise, DNSimple, CloudFlare). A provider is responsible for creating and managing resources. </li><li><code>Resource</code>: A resource might be a physical component such as an EC2 instance, or it can be a logical resource such as a Heroku application, which is inside a infrastructure, comes from a <code>provider</code>. </li></ul><h2 id="Basic-Commands">1.2. Basic Commands</h2><ul><li><code>terraform init</code>: init the local settings for next commands, eg. install the provider plugins</li><li><code>terraform apply</code>: shows the <code>execution plan</code> in a Git-like format with <code>+</code> or <code>-</code>, and wait for approval for execution</li><li><code>terraform show</code>: inspect the current state in <code>terraform.tfstate</code> file</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a start on Terraform operations against AWS to fulfill the thought of &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_Code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Infrastructure as Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The best thing is, you can provision your server using command in parallel, quick, elegant and happily. And beyond that, if you make this one in a predictable way, think for a while, how much money you can save… Oh, my gosh!&lt;/p&gt;
&lt;p&gt;So it has most of the features I desired for a tool to provision a server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infrastructure as Code &lt;/li&gt;
&lt;li&gt;Execution Plans &lt;/li&gt;
&lt;li&gt;Resource Graph &lt;/li&gt;
&lt;li&gt;Change Automation &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, basically I want a tool to provision a server in a reliable and simple way. Better with &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_graph&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dependency graph&lt;/a&gt; feature, which is essentially the &lt;a href=&quot;https://en.wikipedia.org/wiki/Directed_acyclic_graph&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DAG&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;So here is Terraform. Let’s start. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;terrform_aws.png&quot; alt=&quot;Terraform and AWS&quot; title=&quot;Terraform and AWS&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Terraform" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Terraform/"/>
    
    
      <category term="Terraform" scheme="https://morganwu277.github.io/tags/Terraform/"/>
    
      <category term="Infrastructure as Code" scheme="https://morganwu277.github.io/tags/Infrastructure-as-Code/"/>
    
  </entry>
  
  <entry>
    <title>AWS Go Through</title>
    <link href="https://morganwu277.github.io/2018/06/25/AWS-Go-Through/"/>
    <id>https://morganwu277.github.io/2018/06/25/AWS-Go-Through/</id>
    <published>2018-06-25T21:35:40.000Z</published>
    <updated>2018-06-28T04:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been used for AWS for a while, but always there are someone who want to touch this however don’t know how to start or what to follow. </p><p>Recently I read this link, and I was doing it all through and it was a good one to start. <a href="https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/" target="_blank" rel="noopener">So, you want to learn AWS? AKA, “How do I learn to be a Cloud Engineer?”</a></p><p>I won’t paste and tell you everything how to do it, but will point the ones that might block you or you might need to Google it. </p><center><img src="/2018/06/25/AWS-Go-Through/aws-arch.jpg" title="AWS Products"></center><a id="more"></a><p>Most of the words comes from the above link, I will add my own where necessary. </p><h1 id="Introduction">1. Introduction</h1><blockquote><p>So many people struggle with where to get started with AWS and cloud technologies in general. There is popular “How do I learn to be a Linux admin?” post that inspired me to write an equivalent for cloud technologies. This post serves as a guide of goals to grow from basic AWS knowledge to understanding and deploying complex architectures in an automated way. Feel free to pick up where you feel relevant based on prior experience.</p></blockquote><h2 id="Assumptions">1.1. Assumptions:</h2><blockquote><ul><li>You have basic-to-moderate Linux systems administration skills</li><li>You are at least familiar with programming/scripting. You don’t need to be a whiz but you should have some decent hands-on experience automating and programming.</li><li>You are willing to dedicate the time to overcome complex issues.</li><li>You have an AWS Account and a marginal amount of money to spend improving your skills.</li></ul></blockquote><h2 id="How-to-use-this-guide">1.2. How to use this guide:</h2><blockquote><ol><li>This is not a step by step how-to guide.</li><li>You should take each goal and “figure it out”. I have hints to guide you in the right direction.</li><li>Google is your friend. AWS Documentation is your friend. Stack Overflow is your friend.</li><li>Find out and implement the “right way”, not the quick way. Ok, maybe do the quick way first then refactor to the right way before moving on.</li><li>Shut down or de-provision as much as you can between learning sessions. You should be able to do everything in this guide for literally less than $50 using the AWS Free Tier. Rebuilding often will reinforce concepts anyway.</li><li>Skip ahead and read the Cost Analysis and Automation sections and have them in the back of your mind as you work through the goals.</li><li>Lastly, just get hands on, no better time to start then NOW.</li></ol></blockquote><h2 id="Project-Overview">1.3. Project Overview</h2><blockquote><p>This is NOT a guide on how to develop websites on AWS. This uses a website as an excuse to use all the technologies AWS puts at your fingertips. The concepts you will learn going through these exercises apply all over AWS.</p><p>This guide takes you through a maturity process from the most basic webpage to an extremely cheap scalable web application. The small app you will build does not matter. It can do anything you want, just keep it simple.</p><p>Need an idea? Here: Fortune-of-the-Day - Display a random fortune each page load, have a box at the bottom and a submit button to add a new fortune to the random fortune list.</p></blockquote><h1 id="Account-Basics">2. Account Basics</h1><blockquote><p>Create an IAM user for your personal use.</p></blockquote><p>It will deduct for 1$ for validation, don’t worry. You are not consuming anything. </p><blockquote><p>Set up MFA for your root user, turn off all root user API keys.</p></blockquote><ol><li>You need Google Authenticator, download it from your Android/iPhone app store. </li><li>Wait for a while and then a new token will be generated, you need type both.</li><li>After doing that, refresh the page, the green checkmark will be shown on aws IAM home page. </li></ol><blockquote><p>Set up Billing Alerts for anything over a few dollars.</p></blockquote><p>The linke is In the <code>Billing Alerts</code> Preferences link, and then click <a href="https://console.aws.amazon.com/cloudwatch/home" target="_blank" rel="noopener">Manage Billing Alerts</a> to setup the billing alarm using CloudWatch. I used <code>$10</code> as a threshold. </p><blockquote><p>Configure the AWS CLI for your user using API credentials.</p></blockquote><ol><li>Go to <code>IAM</code> service and create a new user, I use <code>admin</code>. Should be a programmable user. </li><li>Install <code>aws-cli</code> using <code>pip install</code></li><li>Configure <code>~/.aws/credentials</code> using <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[default]</div><div class="line">aws_access_key_id = xxxxxxxxxxxxxxxxxxxxx</div><div class="line">aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div><div class="line"></div><div class="line">[corp]</div><div class="line">aws_access_key_id = xxxxxxxxxxxxxxxxxxxxx</div><div class="line">aws_secret_access_key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div></pre></td></tr></table></figure></li></ol><p>Also configure the <code>~/.aws/config</code> using<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[default]</div><div class="line">output = json</div><div class="line">region = us-east-1</div></pre></td></tr></table></figure></p><ol><li>Use <code>aws --profile corp help</code> to test. </li></ol><blockquote><p>Checkpoint: You can use the AWS CLI to interrogate information about your AWS account. </p></blockquote><ol><li>Bind the <code>arn:aws:iam::aws:policy/IAMReadOnlyAccess</code> or type <code>iam</code> in the permission set filter in <code>admin</code>‘s permission set. You will find a readonly one.</li><li>Type <code>aws --profile corp iam get-user</code> to test.</li></ol><h1 id="Web-Hosting-Basics">3. Web Hosting Basics</h1><blockquote><p>Deploy a EC2 VM and host a simple static “Fortune-of-the-Day Coming Soon” web page.<br>Take a snapshot of your VM, delete the VM, and deploy a new one from the snapshot. Basically disk backup + disk restore.<br>Checkpoint: You can view a simple HTML page served from your EC2 instance.</p></blockquote><h2 id="Deploy-a-EC2-VM-and-put-a-simple-web-server">3.1. Deploy a EC2 VM and put a simple web server</h2><ol><li>Lauched with one free-tire Ubuntu 16.04 server, just select <code>free tier only</code> and then click into Ubuntu and then reveiw and finish. It will ask you to use an existing ssh keys or create a new pair. I choose to create a new pair and then download that. </li><li>Keep that new generated key safe. That’s the way to ssh into the new launched server.</li><li><code>chmod 400</code> to your new generated <code>pem</code> file. Eg, it could be <code>new-ec2-admin.pem</code> </li><li>Login into using <code>ssh -i new-ec2-admin.pem 34.205.74.0</code> or <code>ssh -i new-ec2-admin.pem ec2-34-205-74-0.compute-1.amazonaws.com</code>. You can get the login method from right click the ec2 machine, and then click <code>Connect</code>. Then use <code>sudo -i</code> to get root permission without password.</li><li>Install Nginx/Apached or other webserver you would like, even you can setup your own webserver using NodeJS or Python, etc. I am using <code>Python</code> since python is supported by default. So, just type <code>python3 -m http.server 8080</code> to start a small http server and will listen to 8080 port.</li><li>Open port for <code>8080</code> using security groups. Add a new inboud rule for <code>TCP port</code> of <code>8080</code> from anywhere, i.e., <code>0.0.0.0</code></li><li>Open your browser and access <code>http://34.205.74.0:8080/</code>, <code>Directory listing</code> page should come up.<center><img src="/2018/06/25/AWS-Go-Through/dir-list.png" title="Directory listing page"></center> </li><li>Add python server to auto start. Add <code>@reboot cd ~/ &amp;&amp; python3 -m http.server 8080  &gt; /dev/null 2&gt;&amp;1</code> by using <code>crontab -e</code>. </li><li>Reboot your server and testing if <code>http://34.205.74.0:8080/</code> could be accessed again. </li></ol><h2 id="Take-a-snapshot-and-recover-from-snapshot">3.2. Take a snapshot and recover from snapshot</h2><ol><li>Stop the <code>EC2 instance</code>.</li><li>Create a image from the stopped EC2. It could be a <code>HVM</code> image, or <code>ParaVirtualized</code>. The <code>HVM</code> can be launched with <code>t2.micro</code>, however, <code>ParaVirtualized</code> can’t, but able to be launched using <code>t1.micro</code> type.<br>It will create a snapshot and then create a image. </li><li>Add <code>EC2 permission</code> to your <code>aws-cli</code> user.</li><li><p>Run one new instance with the <code>image-id</code> created above, using next command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">aws --region us-east-1  \</div><div class="line">    --profile corp ec2 run-instances \</div><div class="line">    --image-id ami-04e6460ff83cc6750 \</div><div class="line">    --instance-type t2.micro \</div><div class="line">    --security-groups <span class="built_in">test</span>-sg \</div><div class="line">    --key-name aws-mw-corp  \</div><div class="line">    --count 1</div></pre></td></tr></table></figure></li><li><p>Access the <code>http://34.205.74.0:8080/</code>(use your own IP address) again, it should work by default.</p></li></ol><h1 id="Auto-Scaling">4. Auto Scaling</h1><blockquote><p>Create an AMI from that VM and put it in an autoscaling group so one VM always exists.</p><p>Put a Elastic Load Balancer infront of that VM and load balance between two Availability Zones (one EC2 in each AZ).</p><p>Checkpoint: You can view a simple HTML page served from both of your EC2 instances. You can turn one off and your website is still accessible.</p></blockquote><h1 id="External-Data">5. External Data</h1><p>Create a DynamoDB table and experiment with loading and retrieving data manually, then do the same via a script on your local machine.<br>Refactor your static page into your Fortune-of-the-Day website (Node, PHP, Python, whatever) which reads/updates a list of fortunes in the AWS DynamoDB table. (Hint: EC2 Instance Role)<br>Checkpoint: Your HA/AutoScaled website can now load/save data to a database between users and sessions</p><h1 id="Web-Hosting-Platform-as-a-Service">6. Web Hosting Platform-as-a-Service</h1><p>Retire that simple website and re-deploy it on Elastic Beanstalk.<br>Create a S3 Static Website Bucket, upload some sample static pages/files/images. Add those assets to your Elastic Beanstalk website.<br>Register a domain (or re-use and existing one). Set Route53 as the Nameservers and use Route53 for DNS. Make www.yourdomain.com go to your Elastic Beanstalk. Make static.yourdomain.com serve data from the S3 bucket.<br>Enable SSL for your Static S3 Website. This isn’t exactly trivial. (Hint: CloudFront + ACM)<br>Enable SSL for your Elastic Beanstalk Website.<br>Checkpoint: Your HA/AutoScaled website now serves all data over HTTPS. The same as before, except you don’t have to manage the servers, web server software, website deployment, or the load balancer.</p><h1 id="Microservices">7. Microservices</h1><p>Refactor your EB website into ONLY providing an API. It should only have a POST/GET to update/retrieve that specific data from DynamoDB. Bonus: Make it a simple REST API. Get rid of www.yourdomain.com and serve this EB as api.yourdomain.com<br>Move most of the UI piece of your EB website into your Static S3 Website and use Javascript/whatever to retrieve the data from your api.yourdomain.com URL on page load. Send data to the EB URL to have it update the DynamoDB. Get rid of static.yourdomain.com and change your S3 bucket to serve from www.yourdomain.com.<br>Checkpoint: Your EB deployment is now only a structured way to retrieve data from your database. All of your UI and application logic is served from the S3 Bucket (via CloudFront). You can support many more users since you’re no longer using expensive servers to serve your website’s static data.</p><h1 id="Serverless">8. Serverless</h1><p>Write a AWS Lambda function to email you a list of all of the Fortunes in the DynamoDB table every night. Implement Least Privilege security for the Lambda Role. (Hint: Lambda using Python 3, Boto3, Amazon SES, scheduled with CloudWatch)<br>Refactor the above app into a Serverless app. This is where it get’s a little more abstract and you’ll have to do a lot of research, experimentation on your own.<br>The architecture: Static S3 Website Front-End calls API Gateway which executes a Lambda Function which reads/updates data in the DyanmoDB table.<br>Use your SSL enabled bucket as the primary domain landing page with static content.<br>Create an AWS API Gateway, use it to forward HTTP requests to an AWS Lambda function that queries the same data from DynamoDB as your EB Microservice.<br>Your S3 static content should make Javascript calls to the API Gateway and then update the page with the retrieved data.<br>Once you have the “Get Fortune” API Gateway + Lambda working, do the “New Fortune” API.<br>Checkpoint: Your API Gateway and S3 Bucket are fronted by CloudFront with SSL. You have no EC2 instances deployed. All work is done by AWS services and billed as consumed.</p><h1 id="Cost-Analysis">9. Cost Analysis</h1><p>Explore the AWS pricing models and see how pricing is structured for the services you’ve used.<br>Answer the following for each of the main architectures you built:<br>Roughly how much would this have costed for a month?<br>How would I scale this architecture and how would my costs change?</p><h1 id="Architectures">10. Architectures</h1><p>Basic Web Hosting: HA EC2 Instances Serving Static Web Page behind ELB<br>Microservices: Elastic Beanstalk SSL Website for only API + S3 Static Website for all static content + DynamoDB Table + Route53 + CloudFront SSL<br>Serverless: Serverless Website using API Gateway + Lambda Functions + DynamoDB + Route53 + CloudFront SSL + S3 Static Website for all static content</p><h1 id="Automation">11. Automation</h1><p>!!! This is REALLY important !!!</p><p>These technologies are the most powerful when they’re automated. You can make a Development environment in minutes and experiment and throw it away without a thought. This stuff isn’t easy, but it’s where the really skilled people excel.<br>Automate the deployment of the architectures above. Use whatever tool you want. The popular ones are AWS CloudFormation or Teraform. Store your code in AWS CodeCommit or on GitHub. Yes, you can automate the deployment of ALL of the above with native AWS tools.<br>I suggest when you get each app-related section of the done by hand you go back and automate the provisioning of the infrastructure. For example, automate the provisioning of your EC2 instance. Automate the creation of your S3 Bucket with Static Website Hosting enabled, etc. This is not easy, but it is very rewarding when you see it work.</p><h1 id="Continuous-Delivery">12. Continuous Delivery</h1><p>As you become more familiar with Automating deployments you should explore and implement a Continuous Delivery pipeline.<br>Develop a CI/CD pipeline to automatically update a dev deployment of your infrastructure when new code is published, and then build a workflow to update the production version if approved. Travis CI is a decent SaaS tool, Jenkins has a huge following too, if you want to stick with AWS-specific technologies you’ll be looking at CodePipeline.</p><h1 id="Miscellaneous-Bonus">13. Miscellaneous / Bonus</h1><p>These didn’t fit in nicely anywhere but are important AWS topics you should also explore:</p><p>IAM: You should really learn how to create complex IAM Policies. You would have had to do basic roles+policies for for the EC2 Instance Role and Lambda Execution Role, but there are many advanced features.<br>Networking: Create a new VPC from scratch with multiple subnets (you’ll learn a LOT of networking concepts), once that is working create another VPC and peer them together. Get a VM in each subnet to talk to eachother using only their private IP addresses.<br>KMS: Go back and redo the early EC2 instance goals but enable encryption on the disk volumes. Learn how to encrypt an AMI.</p><h1 id="Final-Thoughts">14. Final Thoughts</h1><blockquote><p>I’ve been recently recruiting for Cloud Systems Engineers and Cloud Systems Administrators. We’ve interviewed over a dozen local people with relevant resume experience. Every single person we interviewed would probably struggle starting with the DynamoDB/AutoScaling work. I’m finding there are very few people that HAVE ACTUALLY DONE THIS STUFF. Many people are familiar with the concepts, but when pushed for details they don’t have answers or admit to just peripheral knowledge. You learn SO MUCH by doing.</p><p>If you can’t find an excuse or get support to do this as part of your job I would find a small but flashy/impressive personal project that you can build and show off as proof of your skills. Open source it on GitHub, make professional documentation, comment as much as is reasonable, and host a demo of the website. Add links to your LinkedIn, reference it on your resume, work it into interview answers, etc. When in a job interview you’ll be able to answer all kinds of real-world questions because you’ve been-there-done-that with most of AWS’ major services.</p><p>I’m happy to hear any feedback. I’m considering making THIS post my flashy/impressive personal project in the form of a GitHub repo with sample code for each step, architecture diagrams, etc.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been used for AWS for a while, but always there are someone who want to touch this however don’t know how to start or what to follow. &lt;/p&gt;
&lt;p&gt;Recently I read this link, and I was doing it all through and it was a good one to start. &lt;a href=&quot;https://www.reddit.com/r/sysadmin/comments/8inzn5/so_you_want_to_learn_aws_aka_how_do_i_learn_to_be/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;So, you want to learn AWS? AKA, “How do I learn to be a Cloud Engineer?”&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I won’t paste and tell you everything how to do it, but will point the ones that might block you or you might need to Google it. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/06/25/AWS-Go-Through/aws-arch.jpg&quot; title=&quot;AWS Products&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Cloud" scheme="https://morganwu277.github.io/categories/Cloud/"/>
    
      <category term="AWS" scheme="https://morganwu277.github.io/categories/Cloud/AWS/"/>
    
      <category term="Introduction" scheme="https://morganwu277.github.io/categories/Cloud/AWS/Introduction/"/>
    
    
      <category term="Cloud" scheme="https://morganwu277.github.io/tags/Cloud/"/>
    
      <category term="AWS" scheme="https://morganwu277.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>From Simple Mutex to Distributed Lock</title>
    <link href="https://morganwu277.github.io/2018/06/19/from-mutex-to-distributed-lock/"/>
    <id>https://morganwu277.github.io/2018/06/19/from-mutex-to-distributed-lock/</id>
    <published>2018-06-20T03:34:07.000Z</published>
    <updated>2018-06-21T02:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Lock</code> and <code>Mutex</code> are very basic ideas in every language and OS.<br>Recently, I think for a while about <code>Lock</code> / <code>Mutex</code>/ <code>SpinLock</code> / <code>Reentrant Lock</code> / <code>Distributed Lock</code>, and find something interesting. </p><center><img src="/2018/06/19/from-mutex-to-distributed-lock/go_lock.png" title="Golang Lock"></center><a id="more"></a><h1 id="Mutex">1. Mutex</h1><p><code>Mutex</code>(<code>Lock</code>) is easy, it locks() a critical code block and then will mutual exclusively do something, and after that will unlock() the critical code block, and everything goes on. </p><p>It keeps the <code>critical code block</code> running in the order as your wrote, but not the using the re-ordered sequence by <a href="https://en.wikipedia.org/wiki/Memory_ordering" target="_blank" rel="noopener">Memory Ordering</a>. </p><p>So what <code>Memory_ordering</code> will break then? Let’s call whatever it could break as <a href="https://en.wikipedia.org/wiki/Invariant_(computer_science)" target="_blank" rel="noopener">invariant</a> here right now.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">l := sync.Mutex&#123;&#125;</div><div class="line">l.Lock()</div><div class="line"><span class="comment">// critical code block, some `invariant`(s) holds and could be broken </span></div><div class="line">l.Unlock()</div></pre></td></tr></table></figure><p>By holding the lock, means I need some <code>invariant</code>(s) hold, and probably I will <code>break</code> these <code>invariant</code>(s) in the next few lines of <code>critical code block</code>.<br>But don’t worry, after <code>Unlock()</code> invocation, that means: </p><ol><li>I longer need these <code>invariant</code>(s) anymore, and </li><li>If I broke them in the critical code block, I have already restored these <code>invariant</code>(s) </li></ol><p>So, <code>Mutex</code> is a tool to help you to <code>confidently</code> keep the <code>invariant</code> as what it should be after critical code block, by preventing the <code>memory re-order</code>, either by Compiler or by OS at the runtime. </p><h1 id="SpinLock">2. SpinLock</h1><h2 id="Compare-and-Swap">2.1. Compare and Swap</h2><p>Compare and Swap, or <code>CAS</code>, is an easy way to implement synchronization mechanism. Here is the logic:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// needs atomic implementation</div><div class="line"><span class="keyword">function</span> cas(p : pointer to int, old : int, new : int) returns bool &#123;</div><div class="line">    <span class="keyword">if</span> *p ≠ old &#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    *p ← new</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>So it will compare if the current value is the old value:</p><ol><li>if not, means, <code>replaced by others</code>, i.e., <code>the lock is held by others</code>, will just return false</li><li>if yes, means, <code>not replaced by others yet</code>, i.e., <code>hold the lock</code>, will just replace using the new value</li></ol><p>Of course, the most import is the above <code>cas</code> function needs to be executed <code>atomically</code>, either using lock or implemented by hardware/CPU CompareAndSwap itself. </p><h3 id="CAS-and-Lock-Free-Data-Structure">2.1.1. CAS and Lock-Free Data Structure</h3><p>With CAS feature, we can implement some lock-free thread-safe data structure. Here is the <code>Enqueue()</code> method for a lock-free queue.<br><figure class="highlight pascal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Enqueue(x)</div><div class="line">q ← new <span class="keyword">record</span></div><div class="line">q^.value ← x</div><div class="line">q^.next ← NULL</div><div class="line">p ← tail</div><div class="line">oldp ← p</div><div class="line"><span class="keyword">repeat</span></div><div class="line"><span class="keyword">while</span> p^.next ≠ NULL</div><div class="line">p ← p^.next</div><div class="line"><span class="comment">// iterate until p^.next == NULL, which mens, </span></div><div class="line"><span class="comment">// p is the very last one element, and swap, p.next = q</span></div><div class="line"><span class="keyword">until</span> Compare&amp;Swap(p^.next, NULL, q) </div><div class="line"></div><div class="line">Compare&amp;Swap(tail, oldp, q)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">Dequeue()</div><div class="line"><span class="keyword">repeat</span></div><div class="line">p ← head</div><div class="line"><span class="keyword">if</span> p^.next = NULL</div><div class="line">error queue empty</div><div class="line"><span class="comment">// iterate until head == p, which means, </span></div><div class="line"><span class="comment">// p is the very head of this queue, and swap, head point to p.next</span></div><div class="line"><span class="keyword">until</span> Compare&amp;Swap(head, p, p^.next)</div><div class="line"></div><div class="line">return p^.next^.value</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p><ul><li>No lock used above, but the Queue data structure is thread safe </li><li><code>Enqueue</code> keeps checking the invariant <code>p.next == NULL</code>, or <code>tail</code> not changed </li><li><code>Dequeue</code> keeps checking the invariant <code>head == p</code>, or <code>head</code> not changed </li></ul><p>So, again, essentially point out that, concurrency model needs to protect <code>invariant</code> keep as it should be.</p><p>In a summary, it use a retry logic in loop until the <code>invariant</code> is satisfied, and once the <code>invariant</code> is satisfied, it immediately change the value to a new one, under the condition that, the <code>CAS</code> step is atomic!</p><p>So, if you want to implement a lock free data structure, put the <code>check-and-set</code> procedure using a Loop-CAS implementation. </p><h3 id="CAS-and-Optimistic-Lock-Update">2.1.2. CAS and Optimistic Lock Update</h3><p>With CAS feature, we can also implement optimistic lock.<br>For example, using SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Update</span> colume_A = <span class="keyword">value</span>, <span class="keyword">version</span> = previous_value+<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">version</span> = previous_value;</div></pre></td></tr></table></figure></p><p>to implement a <code>Compare and Swap</code> semantics. Plus a loop, we are good to implement the <code>Loop-CAS</code>, i.e, lock-free Update. </p><p>Here is an example of <code>Laravel</code>, <code>updated_at</code> will be automatically updated each time of update request to the row.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span><span class="params">($fromAccountId, $toAccountId, $balance)</span></span></div><div class="line">&#123;</div><div class="line">  $fromQuery = Account::whereId($fromAccountId);</div><div class="line">  <span class="keyword">if</span> (! $fromQuery-&gt;exists()) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidAccountException();</div><div class="line">  &#125;</div><div class="line">  $toQuery = Account::whereId($toAccountId);</div><div class="line">  <span class="keyword">if</span> (! $toQuery-&gt;exists()) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidAccountException();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// step 1, decrease money from $fromAccount</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    <span class="comment">// get the value of `updated_at`</span></div><div class="line">    $fromAccount = $fromQuery-&gt;first();</div><div class="line">    <span class="keyword">if</span> ($fromAccount-&gt;balance &lt; $amount) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InsufficientBalanceException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// if updated_at is not changed in the middle </span></div><div class="line">    <span class="comment">// will change the Account in DB</span></div><div class="line">    $updated = Account::whereId($fromAccountId)</div><div class="line">      -&gt;where(<span class="string">'updated_at'</span>, <span class="string">'='</span>, $fromAccount-&gt;updated_at)</div><div class="line">      -&gt;update([<span class="string">'balance'</span> =&gt; $fromAccount-&gt;balance - $amount]);</div><div class="line">  &#125; <span class="keyword">while</span> (! $updated);</div><div class="line"></div><div class="line">  <span class="comment">// step 2, add money into $toAccount</span></div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    $toAccount = $toQuery-&gt;first();    </div><div class="line">    $updated = Account::whereId($toAccountId)</div><div class="line">      -&gt;where(<span class="string">'updated_at'</span>, <span class="string">'='</span>, $toAccount-&gt;updated_at)</div><div class="line">      -&gt;update([<span class="string">'balance'</span> =&gt; $toAccount-&gt;balance + $amount]);</div><div class="line">  &#125; <span class="keyword">while</span> (! $updated);</div><div class="line"></div><div class="line">  <span class="comment">// step 3, save transaction record </span></div><div class="line">  $transaction = <span class="keyword">new</span> Transaction();</div><div class="line">  $transaction-&gt;from_account_id = $fromAccountId;</div><div class="line">  $transaction-&gt;to_account_id   = $toAccountId;</div><div class="line">  $transaction-&gt;amount          = $amount;</div><div class="line">  $transaction-&gt;save();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>The good thing is: lock free, with higher performance. </p><p>But the bad thing is, or not that bad, just not as good as Pessimistic Lock, it’s kind of Eventual Consistency.<br>If another thread read data in the middle time of step 2, it will read an inconsistent data state between the fromAccount and the toAccount.<br>Because during each step1, step2, step3, it ensure the invariant only inside these steps (update_at is not changed), but not across these steps (<code>toAccount.balance + fromAccount.balance == totalMoney</code>). </p><h2 id="SpinLock-Implementation-using-CAS">2.2. SpinLock Implementation using CAS</h2><p>If we put more eye into the Optimistic Lock example above, we can know step 2 is blocked by step 1, which is using a <code>Loop-CAS</code> model. </p><p>So what if we think step 1 as a <code>Lock()</code> method, which means, only step 1 is executed, step 2 could start. Here we got the idea of SpinLock() to use CAS.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> spinlock</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"runtime"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"sync/atomic"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> SpinLock <span class="keyword">uint32</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSpinLock</span><span class="params">()</span> <span class="title">sync</span>.<span class="title">Locker</span></span> &#123;</div><div class="line"><span class="keyword">var</span> lock SpinLock</div><div class="line"><span class="keyword">return</span> &amp;lock</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sl *SpinLock)</span> <span class="title">Lock</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// keep checking, until sl == 0, i.e, nobody locks it,</span></div><div class="line"><span class="comment">// and then change the sl = 1, i.e, lock it</span></div><div class="line"><span class="keyword">for</span> !atomic.CompareAndSwapUint32((*<span class="keyword">uint32</span>)(sl), <span class="number">0</span>, <span class="number">1</span>) &#123;</div><div class="line">runtime.Gosched()</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sl *SpinLock)</span> <span class="title">Unlock</span><span class="params">()</span></span> &#123;</div><div class="line">atomic.StoreUint32((*<span class="keyword">uint32</span>)(sl), <span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="When-to-SpinLock-When-to-Mutex">3. When to SpinLock? When to Mutex?</h1><p>Differences? </p><ul><li><code>SpinLock</code>: As you can see, SpinLock idea comes from Loop-CAS, which is <code>lock-free</code>, but kinda <code>busy checking</code>.</li><li><code>Mutex</code>: When <code>Lock()</code> invocation happens, however can’t get the lock, the thread/goroutine will be added to wait list of scheduler and thread/goroutine switch happens at this time.</li></ul><p>So <code>SpinLock</code> thinks that I should <code>very probably</code> get the lock in my scheduling CPU slot, and in a aggressive way. </p><p>What about <code>Mutex</code> scheduling? In Golang implementation, it’s:</p><ol><li>If Lock() happens and can’t get the lock, will be added to wait list,</li><li>For new young goroutine who already get the lock, will just let them run, since they already get the lock,</li><li>If the old goroutine has been wait for very long time, will give the lock to him and let him run, so it won’t wait for too long. By default, <code>starvationThresholdNs</code> is <code>1e6</code> nanoseconds (<code>1ms</code>). Normally it’s FIFO order, but if  <code>starvationThresholdNs</code> meet, will enter starvation mode. </li></ol><p>In a summary:</p><ol><li>Under <code>multi-core</code> CPU, if you think that you will quickly get the lock, then please use <code>SpinLock</code>, so that it doesn’t need context switch to get the lock and execute the code. <ol><li>the time to get the lock is short (<code>short task or low concurrency</code>)</li><li>the critical code block running time cost won’t be too much, i.e., can quickly do the shared variables computation and release the lock</li><li>the concurrency is not too much, or it will needs lots of context switches to release the lock</li></ol></li><li>Under <code>single-core</code> CPU, never use <code>SpinLock</code>, since it will try to use up the CPU slot, until context switch happens and then back to get the lock. <code>Context Switch</code> always happens in 1 Core CPU. But the above <code>SpinLock</code> code implementation is good, since it always yield the CPU to the other goroutines by using <code>runtime.Gosched()</code>. So the <code>SpinLock</code> implementation here is a bit like a <code>Mutex</code> but <code>lock-free</code>. </li><li>Under <code>multi-core</code> CPU, if you think your critical code block can’t complete in the assigned CPU slot, please try to use <code>Mutex</code>, so that it won’t waste up much time on getting the lock. <ol><li>the time to get the lock is long (<code>long task or high concurrency</code>)</li><li>the critical code block running time cost is little large, i.e, keeps computation on top of shared variables for a long time. So it’s important not to put <code>I/O</code> into critical code block.</li></ol></li></ol><p>To sum up: </p><ol><li><code>Single-core</code>: not use <code>SpinLock</code>, or at least yield the processor every time failed <code>CAS</code>. </li><li><code>Multi-core</code>, <code>short task or low concurrency</code>: use <code>SpinLock</code>.</li><li><code>Multi-core</code>, <code>long task or high concurrency</code>: use <code>Mutex</code>.</li><li><code>Don&#39;t use I/O in critical code block</code>, this should be a common knowledge. </li></ol><p>If <code>high concurrency</code> with <code>heavy I/O</code>, then better to use <code>goroutine</code> + <code>channel</code> solution.</p><h1 id="Reentrant-Lock-or-Recursive-Lock-why-not">4. Reentrant Lock or Recursive Lock, why not?</h1><p>TBD</p><h1 id="Distributed-Lock">5. Distributed Lock</h1><p>TBD</p><hr><p>Ref: </p><ol><li><a href="https://groups.google.com/forum/#!msg/golang-nuts/XqW1qcuZgKg/Ui3nQkeLV80J" target="_blank" rel="noopener">https://groups.google.com/forum/#!msg/golang-nuts/XqW1qcuZgKg/Ui3nQkeLV80J</a> </li><li><a href="https://en.wikipedia.org/wiki/Compare-and-swap" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Compare-and-swap</a> </li><li><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.8674&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.8674&amp;rep=rep1&amp;type=pdf</a></li><li><a href="https://medium.com/@aslrousta/pessimistic-vs-optimistic-locking-in-laravel-264ec0b1ba2" target="_blank" rel="noopener">https://medium.com/@aslrousta/pessimistic-vs-optimistic-locking-in-laravel-264ec0b1ba2</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Lock&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt; are very basic ideas in every language and OS.&lt;br&gt;Recently, I think for a while about &lt;code&gt;Lock&lt;/code&gt; / &lt;code&gt;Mutex&lt;/code&gt;/ &lt;code&gt;SpinLock&lt;/code&gt; / &lt;code&gt;Reentrant Lock&lt;/code&gt; / &lt;code&gt;Distributed Lock&lt;/code&gt;, and find something interesting. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/06/19/from-mutex-to-distributed-lock/go_lock.png&quot; title=&quot;Golang Lock&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Languages" scheme="https://morganwu277.github.io/categories/Languages/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/categories/Languages/Go/"/>
    
      <category term="Concurrency" scheme="https://morganwu277.github.io/categories/Languages/Go/Concurrency/"/>
    
    
      <category term="Concurrency" scheme="https://morganwu277.github.io/tags/Concurrency/"/>
    
      <category term="Lock" scheme="https://morganwu277.github.io/tags/Lock/"/>
    
      <category term="Mutex" scheme="https://morganwu277.github.io/tags/Mutex/"/>
    
      <category term="Reentrant Lock" scheme="https://morganwu277.github.io/tags/Reentrant-Lock/"/>
    
      <category term="Recursive Lock" scheme="https://morganwu277.github.io/tags/Recursive-Lock/"/>
    
      <category term="SpinLock" scheme="https://morganwu277.github.io/tags/SpinLock/"/>
    
      <category term="Distributed Lock" scheme="https://morganwu277.github.io/tags/Distributed-Lock/"/>
    
  </entry>
  
  <entry>
    <title>Setup Golang Dev Env in Sublime Text3</title>
    <link href="https://morganwu277.github.io/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/"/>
    <id>https://morganwu277.github.io/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/</id>
    <published>2018-05-30T06:46:21.000Z</published>
    <updated>2018-05-30T07:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I found I like Sublime Text more because of happy coding flow in Golang here.</p><p>Very much!!!<br>As usual, picture first!</p><center><img src="/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/gosublime.jpg" title="GoSublime with AutoCompletion"></center><a id="more"></a><h1 id="Setup-Go-Env">1. Setup Go Env</h1><ol><li>Install Go Env.<ul><li>install from official site: <a href="https://golang.org/doc/install" target="_blank" rel="noopener">https://golang.org/doc/install</a></li><li>install by homebrew in Mac: <a href="https://mnafian.github.io/2016/10/26/Install-Go-by-Homebrew-OSX.html" target="_blank" rel="noopener">https://mnafian.github.io/2016/10/26/Install-Go-by-Homebrew-OSX.html</a> </li></ul></li><li>Make sure you have <code>GOROOT</code> and <code>GOPATH</code> well-setup. </li><li>You should know basic ideas of go package mgmt, like:<ul><li><code>{src,pkg,bin}</code> under $GOPATH</li><li><code>go get</code> to download </li><li><code>go build</code> to build</li><li><code>go install</code> to install</li><li>etc …</li></ul></li></ol><h1 id="Setup-Sublime-Text-3">2. Setup Sublime Text 3</h1><ol><li>Install <a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime Text3</a></li><li>Install <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Sublime Text3 Package Control</a></li><li>Install GoSublime Package from <code>Install Package</code>, type <code>gosublime</code> there.</li></ol><p>Yes, you’re all done!</p><h1 id="AutoCompletion-in-GoSublime">3. AutoCompletion in GoSublime</h1><p>By default, GoSublime will make auto completion when using golang standard library code. If you want to make your own code able to be auto completed, you need to put compiled artifacts under <code>pkg</code> directory of your <code>$GOPATH</code>.</p><p>How to do that? Using <code>go get ./...</code>!</p><h2 id="Configuration-in-GoSublime">3.1. Configuration in GoSublime</h2><p>Using <code>super+..</code> (here we means hold super key and double hit dot key), go to <code>User Settings</code>, will open golang user settings config file.</p><p>Use the config like below, we use <code>gs_comp_lint</code> when <code>on_save</code> event happens. Of course, in <code>gs_comp_lint</code>, there is a list of commands, in which, we have <code>go get ./...</code> as one of them.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"env"</span>: &#123;</div><div class="line"><span class="string">"GOPAHT"</span>: <span class="string">"/Users/morganwu/Developer/workspace/go"</span>,</div><div class="line"><span class="string">"GOROOT"</span>: <span class="string">"/usr/local/opt/go/libexec"</span></div><div class="line">&#125;,</div><div class="line"><span class="comment">// enable comp-lint, this will effectively disable the live linter</span></div><div class="line"><span class="string">"comp_lint_enabled"</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line"><span class="comment">// list of commands to run</span></div><div class="line"><span class="string">"comp_lint_commands"</span>: [</div><div class="line"></div><div class="line"><span class="comment">// run `go get ./...` to install all current project's pkgs</span></div><div class="line">&#123;<span class="string">"cmd"</span>: [<span class="string">"go"</span>, <span class="string">"get"</span>, <span class="string">"./..."</span>]&#125;,</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// run `golint` on all files in the package</span></div><div class="line"><span class="comment">// "shell":true is required in order to run the command through your shell (to expand `*.go`)</span></div><div class="line"><span class="comment">// also see: the documentation for the `shell` setting in the default settings file ctrl+dot,ctrl+4</span></div><div class="line">&#123;<span class="string">"cmd"</span>: [<span class="string">"golint *.go"</span>], <span class="string">"shell"</span>: <span class="literal">true</span>&#125;,</div><div class="line"></div><div class="line"><span class="comment">// run go vet on the package</span></div><div class="line"><span class="comment">// &#123;"cmd": ["go", "vet"]&#125;,</span></div><div class="line"></div><div class="line"><span class="comment">// run `go install` on the package. GOBIN is set,</span></div><div class="line"><span class="comment">// so `main` packages shouldn't result in the installation of a binary</span></div><div class="line"><span class="comment">// &#123;"cmd": ["go", "install"]&#125;,</span></div><div class="line">],</div><div class="line"></div><div class="line"><span class="string">"on_save"</span>: [</div><div class="line"><span class="comment">// run comp-lint when you save,</span></div><div class="line"><span class="comment">// naturally, you can also bind this command `gs_comp_lint`</span></div><div class="line"><span class="comment">// to a key binding if you want</span></div><div class="line">&#123;<span class="string">"cmd"</span>: <span class="string">"gs_comp_lint"</span>&#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="Conclusion">4. Conclusion</h1><ol><li>Use <code>go get ./...</code> to recursively download and install all packages of current project.</li><li>Customize <code>on_save</code> event commands by using <code>User Settings</code>.</li></ol><hr><p>Ref: </p><ol><li><a href="https://github.com/DisposaBoy/GoSublime/blob/master/articles/golint.md" target="_blank" rel="noopener">https://github.com/DisposaBoy/GoSublime/blob/master/articles/golint.md</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I found I like Sublime Text more because of happy coding flow in Golang here.&lt;/p&gt;
&lt;p&gt;Very much!!!&lt;br&gt;As usual, picture first!&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/05/30/Setup-Golang-Dev-Env-in-Sublime-Text3/gosublime.jpg&quot; title=&quot;GoSublime with AutoCompletion&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Languages" scheme="https://morganwu277.github.io/categories/Languages/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/categories/Languages/Go/"/>
    
      <category term="Notes" scheme="https://morganwu277.github.io/categories/Languages/Go/Notes/"/>
    
    
      <category term="Golang" scheme="https://morganwu277.github.io/tags/Golang/"/>
    
      <category term="Development" scheme="https://morganwu277.github.io/tags/Development/"/>
    
      <category term="Setup" scheme="https://morganwu277.github.io/tags/Setup/"/>
    
  </entry>
  
  <entry>
    <title>nf_conntrack: table full, dropping packet</title>
    <link href="https://morganwu277.github.io/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/"/>
    <id>https://morganwu277.github.io/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/</id>
    <published>2018-05-26T21:07:31.000Z</published>
    <updated>2018-05-27T05:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I found an online server in monitoring channel, alert saying <code>Timtout connection</code> to xxx.xxx.com which is one of our production entrance servers and then the story began … </p><center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/packetloss.png" title="Packet Loss"></center><a id="more"></a><h1 id="Phenomenon-and-disk-issue">1. Phenomenon and disk issue?</h1><ol><li>It took me <code>over 4 seconds</code> to SSH connect to this production server. For other production servers can be connected in less than 1 second. I also notice there are 50% packet loss to the target server.</li><li>Since this entrance server is very lack of disk, initially I was thinking it’s <code>disk issue</code>, so I deleted some files and then restart the process. <code>However, doesn&#39;t help</code>. I started to think, it could be a network issue.</li><li>I noticed <code>kern.log</code> has error as next, and I steady confirmed it must be a network issue. <code>nf_conntrack: table full, dropping packets</code>. <center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/conntrack_error.jpg" title="Connection Track Error Log in Kernel"></center></li></ol><h1 id="Solve-the-problem">2. Solve the problem</h1><p>After Googling it, I knew that <code>conntrack</code> is for stateful firewall. </p><p>Pls read <a href="http://people.netfilter.org/pablo/docs/login.pdf" target="_blank" rel="noopener">Netfilter’s connection tracking system</a> if you are interested. It also include the <code>Netfilter</code> framework basic.</p><p>So, in one word, <code>conntrack</code> is created to record connection state to inspect into traffic and avoid DDoS security issue. </p><h2 id="Just-tell-me-how-to-solve-it">2.1. Just tell me how to solve it</h2><p>From the error above, we can know <code>conntrack table is full.</code> How to review the table size? By typing <code>cat /proc/sys/net/netfilter/nf_conntrack_count</code>. We can get the size.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@localhost:/<span class="comment"># cat /proc/sys/net/netfilter/nf_conntrack_count</span></div><div class="line">76390</div></pre></td></tr></table></figure></p><p>What’s the maximum size? You can get it by typing <code>cat /proc/sys/net/netfilter/nf_conntrack_max</code>. </p><p>Let’s just increase it. Recommended size: <code>CONNTRACK_MAX = RAMSIZE (in bytes) / 16384 / (ARCH / 32)</code>. Eg, I have 8GB RAM in x86_64 OS, so I made it as <code>8*1024^3/16384/2=262144</code>, which is of course larger as the <code>nf_conntrack_count</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sysctl -w net.netfilter.nf_conntrack_max=262144</div><div class="line"><span class="built_in">echo</span> <span class="string">"net.netfilter.nf_conntrack_max=262144"</span> &gt;&gt; /etc/sysctl.cnof</div></pre></td></tr></table></figure></p><p>Just after that, it works. Network latency becomes good now and no packet loss. </p><h2 id="What-if-it-really-exceed-this-max-limit">2.2. What if it really exceed this max limit?</h2><ul><li>Option 1. We can remove the module of <code>state</code>, but that will make iptables not providing with full compatible APIs.</li><li>Option 2. We can use <code>RAW</code> iptable without using <code>CONNTRACK</code> feature.<br>RAW table is only applied to <code>PREROUTING</code> and <code>OUTPUT</code> chain. Since it has the highest priority (<code>raw--&gt;mangle--&gt;nat--&gt;filter</code>), so it can handle the connection before tracking mangement. Once after we handle the connection using <code>RAW</code> table, we will skip <code>NAT table</code> and <code>ip_conntract</code> handler.  </li></ul><h2 id="How-to-do-without-track-state">2.3. How to do without track state?</h2><ol><li><p>Review of IPtables, <code>iptables</code> has 4 tables and 5 chains as below graph:</p><center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/iptables-5chain-4table.png" title="Iptables 4 Tables 5 Chains"></center><ol><li>Tables: categorized by different operations to data packets.<ul><li><code>raw</code>: highest priority, only appied to <code>PREROUTING</code> and <code>OUTPUT</code> chain. When we don’t need to do NAT, we can use RAW table to increase performance. </li><li><code>mangle</code>: modify certain data packet</li><li><code>nat</code>: NAT, port mapping, address mapping</li><li><code>filter</code>: filter</li></ul></li><li>Chains: categorized by different hooks. <ul><li><code>PREROUTING</code>: packet before going to route table</li><li><code>INPUT</code>: after packet passing route table, destination is current machine</li><li><code>FORWARDING</code>: after packet passing route table, destination is not current machine</li><li><code>OUTPUT</code>: packet comes from current machine and to outside </li><li><code>POSTROUTIONG</code>: packet before going to network interface <center><img src="/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/netfilter-hooks.png" title="Netfilter Hooks in Kernel"></center></li></ul></li></ol></li><li><p>Mark <code>UNTRACKED</code> connection will be accept:<br>CentOS: Change <code>/etc/sysconfig/iptables</code> file, and append <code>UNTRACKED</code> after line of <code>RH-Firewall-1-INPUT</code>.<br>To make it as <code>-A RH-Firewall-1-INPUT -m state --state RELATED,ESTABLISHED,UNTRACKED -j ACCEPT</code><br>Other Linux : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -A FORWARD -m state --state UNTRACKED -j ACCEPT</div></pre></td></tr></table></figure></li><li><p>Use <code>raw</code> table rules on these ports. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mark destination port and source port as NOTRACK</span></div><div class="line">$ sudo iptables -t raw -A PREROUTING -p tcp -m multiport --dport 80,81,82 -j NOTRACK</div><div class="line">$ sudo iptables -t raw -A PREROUTING -p tcp -m multiport --sport 80,81,82 -j NOTRACK</div><div class="line">$ iptables -t raw -A OUTPUT -p tcp -m multiport --dports 80,81,82 -j NOTRACK</div><div class="line">$ iptables -t raw -A OUTPUT -p tcp -m multiport --sports 80,81,82 -j NOTRACK</div></pre></td></tr></table></figure><p>If you have only one port, use </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ iptables -t raw -A PREROUTING -p tcp -m tcp --dport 80 -j NOTRACK</div><div class="line">$ iptables -t raw -A OUTPUT -p tcp -m tcp --sport 80 -j NOTRACK</div><div class="line">$ iptables -t raw -A PREROUTING -p tcp -m tcp --sport 80 -j NOTRACK</div><div class="line">$ iptables -t raw -A OUTPUT -p tcp -m tcp --dport 80 -j NOTRACK</div></pre></td></tr></table></figure></li></ol><h1 id="Conclusion">3. Conclusion</h1><ol><li><code>Timeout connection</code> can’t be a disk issue, if it’s disk issue, it will report <code>Server Internal Error</code> from monitoring probe. </li><li><code>Iptables 4 Table 5 Chains</code>: 4 table: raw–&gt;mangle–&gt;nat–&gt;filter . 5 Chain: PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING. </li><li>When we don’t need to do NAT, we can use <code>RAW table to increase performance</code>(eg. Web port). But we need extra DDoS protection method. Remember we need bidirectional <code>NOTRACK</code> setup on <code>RAW</code> table. </li><li>Use <code>sysctl -w net.netfilter.nf_conntrack_max=262144</code> to solve it immediately. Size calculation, pls refer to above equation.</li></ol><hr><p>Ref:</p><ol><li><a href="http://www.pc-freak.net/blog/resolving-nf_conntrack-table-full-dropping-packet-flood-message-in-dmesg-linux-kernel-log/" target="_blank" rel="noopener">http://www.pc-freak.net/blog/resolving-nf_conntrack-table-full-dropping-packet-flood-message-in-dmesg-linux-kernel-log/</a> </li><li><a href="http://people.netfilter.org/pablo/docs/login.pdf" target="_blank" rel="noopener">http://people.netfilter.org/pablo/docs/login.pdf</a></li><li><a href="https://wiki.mikejung.biz/Sysctl_tweaks#net.core.netdev_max_backlog" target="_blank" rel="noopener">https://wiki.mikejung.biz/Sysctl_tweaks#net.core.netdev_max_backlog</a> </li><li><a href="http://blog.51cto.com/wushank/1171768" target="_blank" rel="noopener">http://blog.51cto.com/wushank/1171768</a> </li><li><a href="http://www.361way.com/%E5%86%8D%E7%9C%8Bnf_conntrack-table-full%E9%97%AE%E9%A2%98/2404.html" target="_blank" rel="noopener">http://www.361way.com/%E5%86%8D%E7%9C%8Bnf_conntrack-table-full%E9%97%AE%E9%A2%98/2404.html</a>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today I found an online server in monitoring channel, alert saying &lt;code&gt;Timtout connection&lt;/code&gt; to xxx.xxx.com which is one of our production entrance servers and then the story began … &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/05/26/Solve-production-issue-of-nf-conntrack-table-full-dropping-packet/packetloss.png&quot; title=&quot;Packet Loss&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="iptables" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/iptables/"/>
    
    
      <category term="iptables" scheme="https://morganwu277.github.io/tags/iptables/"/>
    
      <category term="conntrack" scheme="https://morganwu277.github.io/tags/conntrack/"/>
    
  </entry>
  
  <entry>
    <title>Accounting</title>
    <link href="https://morganwu277.github.io/2018/04/16/Accounting/"/>
    <id>https://morganwu277.github.io/2018/04/16/Accounting/</id>
    <published>2018-04-16T19:55:15.000Z</published>
    <updated>2018-05-27T17:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Personal material, please leave. "> <label for="pass"> Personal material, please leave. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Personal material, please leave.
    
    </summary>
    
      <category term="Incorporation" scheme="https://morganwu277.github.io/categories/Incorporation/"/>
    
      <category term="Accounting" scheme="https://morganwu277.github.io/categories/Incorporation/Accounting/"/>
    
    
      <category term="Accouting" scheme="https://morganwu277.github.io/tags/Accouting/"/>
    
      <category term="Tax" scheme="https://morganwu277.github.io/tags/Tax/"/>
    
  </entry>
  
  <entry>
    <title>Go Summary</title>
    <link href="https://morganwu277.github.io/2018/03/02/Golang-Summary/"/>
    <id>https://morganwu277.github.io/2018/03/02/Golang-Summary/</id>
    <published>2018-03-02T05:12:46.000Z</published>
    <updated>2018-03-02T05:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a post of Golang Summary, for me to check out long time not writing program using Golang since 3 years ago. </p><center><img src="/2018/03/02/Golang-Summary/golangroutines.png" title="Golang Routine+Channel"></center><a id="more"></a><h1 id="Package">1. Package</h1><h2 id="Basic">1.1. Basic</h2><ul><li>Every Go program is made up of packages. Which means, the <code>basic organization unit</code> of Go program is <code>package</code>, not file. </li><li>Programs start running in package <code>main</code>.</li><li>By convention, the package name is the same as the last element(<code>sub-package</code>) of the import path.<br>For instance, the <code>math/rand</code> package comprises files that begin with the statement <code>package rand</code>. </li><li><p>Import packages using <code>factored import statement</code>. (variables declaration can also use <code>factored declare</code>) </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Now you have %g problems."</span>, math.Sqrt(<span class="number">7</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Not using next statements, since they should be highly in a <a href="https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29" target="_blank" rel="noopener">cohesion</a>: </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"math"</span></div></pre></td></tr></table></figure></li><li><p>By convention, a name starts with capital letter will be exported. Eg. <code>Pi</code> in <code>math</code> package.<br>This means, when using <code>other package functions/fields</code>, it always starts with <code>CapitalLetters</code>. </p></li></ul><h1 id="Functions">2. Functions</h1><h2 id="Basic-1">2.1. Basic</h2><ul><li><p>Two or more <code>consecutive</code> named function parameters share a same type, we can omit the type all but the last. <code>x int, y int</code> can be shorted to <code>x, y int</code>. Eg. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span></span> &#123;</div><div class="line"><span class="keyword">return</span> y, x</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>Naked return statements</code> should be used in only short function. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="keyword">int</span>)</span> <span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></div><div class="line">y = sum - x</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Variables">3. Variables</h1><h2 id="Basic-2">3.1. Basic</h2><ul><li><p><code>var</code> statement can be a package/function level</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i, j <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">"no!"</span> <span class="comment">// variables type can be taken from the initializer  </span></div><div class="line">fmt.Println(i, j, c, python, java)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>Short Variable</code> can only be used inside a function using <code>:=</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">var i, j int = 1, 2</div><div class="line">k := 3              // short variable </div><div class="line">c, python, java := true, false, &quot;no!&quot; // short variable </div><div class="line"></div><div class="line">fmt.Println(i, j, k, c, python, java)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Types">4. Types</h1><h2 id="Basic-3">4.1. Basic</h2><ul><li><p>Go Basic Types</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span></div><div class="line"></div><div class="line"><span class="keyword">string</span></div><div class="line"></div><div class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></div><div class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></div><div class="line"></div><div class="line"><span class="keyword">byte</span> <span class="comment">// alias for uint8</span></div><div class="line"></div><div class="line"><span class="keyword">rune</span> <span class="comment">// alias for int32</span></div><div class="line">     <span class="comment">// represents a Unicode code point</span></div><div class="line"></div><div class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></div></pre></td></tr></table></figure><p>The <code>int</code>, <code>uint</code>, and <code>uintptr</code> types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. Normally we use <code>int</code> unless you have a specific reason to use a sized or unsigned integer type. </p></li><li><code>Zero Values</code>: Variables will be assigned to Zero Values if no explicit initial value. Eg. <code>0</code> for numeric types, <code>false</code> for boolean type,  <code>&quot;&quot;</code> for strings. </li><li><code>T(v)</code> will convert value V to type T. <code>Explicit Type Conversion is required in Go</code>. </li></ul><h1 id="Constants">5. Constants</h1><h2 id="Basic-4">5.1. Basic</h2><ul><li><code>const</code> is used before <code>Constants</code> declaration. Type can be only <code>character/string/boolean/numeric values</code>. </li></ul><h1 id="Flow-control-statements-For-If-Switch-Defer">6. Flow control statements: For/If/Switch/Defer</h1><h2 id="Basic-5">6.1. Basic</h2><ul><li><p>For loop, the <code>init</code> and <code>post</code> statements are optional: </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">sum += i</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>or </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum := <span class="number">1</span></div><div class="line"><span class="keyword">for</span> ; sum &lt; <span class="number">1000</span>; &#123;</div><div class="line">sum += sum</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>for</code> is Go’s <code>while</code> without <code>;</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum := <span class="number">1</span></div><div class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;  <span class="comment">// just is while</span></div><div class="line">sum += sum</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>infinite loop</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>for loop with range</code>, can iterate the slices. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pow = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123; <span class="comment">// return with 2 values: index and corresponding value copy of data in that index</span></div><div class="line">fmt.Printf(<span class="string">"2**%d = %d\n"</span>, i, v)</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123; <span class="comment">// return only the index</span></div><div class="line">pow[i] = <span class="number">1</span> &lt;&lt; <span class="keyword">uint</span>(i) <span class="comment">// == 2**i</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> pow &#123; <span class="comment">// ignore the index, only need the value</span></div><div class="line">fmt.Printf(<span class="string">"%d\n"</span>, value)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>one short statement</code> before if condition, to make statements more closed for readable</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123; <span class="comment">// only one statement is allowed here</span></div><div class="line"><span class="keyword">return</span> v</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"%g &gt;= %g\n"</span>, v, lim)</div><div class="line">&#125; </div><div class="line"><span class="comment">// After this if-else statement, v is not accessible any more</span></div><div class="line"><span class="keyword">return</span> lim</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>switch</code> without break statement, but still can provide with a <code>short statement</code> before. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"runtime"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Print(<span class="string">"Go runs on "</span>)</div><div class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123; <span class="comment">// allow one short statement</span></div><div class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</div><div class="line">fmt.Println(<span class="string">"OS X."</span>)</div><div class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</div><div class="line">fmt.Println(<span class="string">"Linux."</span>) <span class="comment">// no need for break</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="comment">// freebsd, openbsd,</span></div><div class="line"><span class="comment">// plan9, windows...</span></div><div class="line">fmt.Printf(<span class="string">"%s."</span>, os)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>switch without condition</code> is the same as <code>switch true</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">t := time.Now()</div><div class="line"><span class="keyword">switch</span> &#123;</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">12</span>:</div><div class="line">fmt.Println(<span class="string">"Good morning!"</span>)</div><div class="line"><span class="keyword">case</span> t.Hour() &lt; <span class="number">17</span>:</div><div class="line">fmt.Println(<span class="string">"Good afternoon."</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Println(<span class="string">"Good evening."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>defer</code> function will be called once its enclosed function is returned. However, <code>deferred function parameters</code> will be eval inside the enclosed functions <code>immediately</code> at its declaration position. A stack will be generated when there is <code>defer</code> statements in go program and will be popped out using LIFO sequence. </p></li></ul><h1 id="Data-Structure-Pointer-Struct-Slice-Map">7. Data Structure: Pointer/Struct/Slice/Map</h1><h2 id="Basic-6">7.1. Basic</h2><ul><li><code>Pointer</code>: <code>*T</code> is pointer used to point to <code>type T</code>. <code>&amp; operator</code> will create a pointer that point to existing value. <code>* operator</code> will eval the value of the target variable. </li><li><p><code>Struct</code>: collections of fields. We can use <code>(*p).X</code> to access <code>struct pointer p</code>‘s field <code>X</code>. To make it simple, we can just use <code>p.X</code>, which is implicit dereference. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">X, Y <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> ( <span class="comment">// use factored declare statements</span></div><div class="line">v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// has type Vertex</span></div><div class="line">v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 is implicit</span></div><div class="line">v3 = Vertex&#123;&#125;      <span class="comment">// X:0 and Y:0</span></div><div class="line">)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    p := &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// has type *Vertex</span></div><div class="line">fmt.Println(v1, p, v2, v3)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>[n]T</code> means <code>an array of type T with n size</code>. E.g, <code>var a [10]int</code>, means <code>int a[10]</code> in Java. </p></li><li><code>[]T</code> means <code>a slice of type T with dynamic size</code>. E.g, <code>a[1:4]</code> create a slice, containing elements in a indexed from 1 to 3. </li><li><code>Slices does not store data, just describe a segment of the underlying array. They are more of array&#39;s references</code>. </li><li>Array syntax and slice syntax: <code>[3]bool{true, true, false}</code> is an array, <code>[]bool{true, true, false}</code> is an anonymous array but then referenced using a slice.</li><li><p><code>Slice default upper/lower boundary is array length/0.</code> E.g</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></div><div class="line"><span class="comment">// next 4 slices are equal </span></div><div class="line">a[<span class="number">0</span>:<span class="number">10</span>]</div><div class="line">a[:<span class="number">10</span>]</div><div class="line">a[<span class="number">0</span>:]</div><div class="line">a[:]</div></pre></td></tr></table></figure></li><li><p><code>nil slice</code>: capacity/length is 0, and there is not underlying array for this slice. E.g, <code>var s []int</code>. </p></li><li><p>Use <code>make([]slice, len, cap)</code> to create a slice. E.g, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a := make([]int, 5)  // len(a)=5</div><div class="line">b := make([]int, 0, 5) // len(b)=0, cap(b)=5</div></pre></td></tr></table></figure></li><li><p>Append elements to a slice and return with a <code>new generated slice</code>: <code>func append(s []T, vs ...T) []T</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></div><div class="line">printSlice(s)</div><div class="line"></div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">0</span>)<span class="comment">// append works on nil slices.</span></div><div class="line">printSlice(s)</div><div class="line"></div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>)<span class="comment">// The slice grows as needed.</span></div><div class="line">printSlice(s)</div><div class="line"></div><div class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// We can add more than one element at a time.</span></div><div class="line">printSlice(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>map[KeyType]ValueType</code> is used to map keys to values.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">Lat, Long <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Vertex)</div><div class="line">m[<span class="string">"Bell Labs"</span>] = Vertex&#123;</div><div class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123; <span class="comment">// styntax is like struct </span></div><div class="line"><span class="string">"Bell Labs"</span>: Vertex&#123;</div><div class="line"><span class="number">40.68433</span>, <span class="number">-74.39967</span>,</div><div class="line">&#125;,</div><div class="line"><span class="string">"Google"</span>: Vertex&#123;</div><div class="line"><span class="number">37.42202</span>, <span class="number">-122.08408</span>,</div><div class="line">&#125;,</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123; </div><div class="line"><span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;, <span class="comment">// Omit the Vertex type </span></div><div class="line"><span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</div><div class="line">&#125;</div><div class="line">fmt.Println(m[<span class="string">"Bell Labs"</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>map basic operations</code>:</p><ul><li>insert/update key: <code>m[key] = elem</code></li><li>get key: <code>elem = m[key]</code></li><li>delete key: <code>delete(m, key)</code></li><li>double assignment to check key existence: <code>elem, ok := m[key]</code> // ok will be true if exist, otherwise false</li><li></li></ul></li><li><code>Function Closure</code>: A closure is a function value that references variables from outside its body.<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// returns a closure</span></div><div class="line">sum := <span class="number">0</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// Each closure is bound to its own sum variable</span></div><div class="line">sum += x</div><div class="line"><span class="keyword">return</span> sum</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">pos, neg := adder(), adder()</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">fmt.Println(</div><div class="line">pos(i),</div><div class="line">neg(<span class="number">-2</span>*i),</div><div class="line">)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Method-and-Interface">8. Method and Interface</h1><h2 id="Basic-7">8.1. Basic</h2><ul><li><p><code>Method</code>: A function with a special <code>receiver</code> argument.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123; <span class="comment">// receiver's type declaration and method declaration must be in the same package</span></div><div class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">fmt.Println(v.Abs()) <span class="comment">// likes v receives the message of Abs, v is the receiver </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>Interface</code>: An <code>interface type</code> is defined as a set of method signatures. As long as some data structure implements all the methods declared int this <code>interface type</code>, it is an instance of this <code>interface type.</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</div><div class="line">Abs() <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> a Abser</div><div class="line">f := MyFloat(-math.Sqrt2)</div><div class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line"></div><div class="line">a = f  <span class="comment">// a MyFloat implements Abser, since MyFloat does have a method `Abs()`</span></div><div class="line">a = &amp;v <span class="comment">// a *Vertex implements Abser, since *Vertex does have a method `Abs()`</span></div><div class="line"></div><div class="line"><span class="comment">// In the following line, v is a Vertex (not *Vertex)</span></div><div class="line"><span class="comment">// and does NOT implement Abser.</span></div><div class="line">a = v</div><div class="line"></div><div class="line">fmt.Println(a.Abs())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> MyFloat <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(-f)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(f)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</div><div class="line">X, Y <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</div><div class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Interfaces are implemented implicitly. Implicit interfaces decouple the definition of an interface from its implementation, which could then appear in any package without prearrangement. In a word, you can define the interface/standard, everyone can implement it. This is a <code>pluggable thought into a language</code>.</p></li><li><code>Empty Interface</code>: interfaces which has 0 methods. They can be used to <code>process un-predictable</code> types. Eg. fmt.Println() accept <code>interface{}</code> parameters.</li><li><p><code>Type assertion</code>: provides access to an interface value’s underlying concrete value. using <code>t := i.(T)</code> to assert <code>interface i</code> does have a concrete <code>type T</code> and assign this type’s underly value to <code>variable t</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">"hello"</span></div><div class="line"></div><div class="line">s := i.(<span class="keyword">string</span>)</div><div class="line">fmt.Println(s)</div><div class="line"></div><div class="line">s, ok := i.(<span class="keyword">string</span>)</div><div class="line">fmt.Println(s, ok)</div><div class="line"></div><div class="line">f, ok := i.(<span class="keyword">float64</span>) <span class="comment">// no panic here, since we still have ok as false and f will be nil value of float64/type T</span></div><div class="line">fmt.Println(f, ok)</div><div class="line">f = i.(<span class="keyword">float64</span>) <span class="comment">//  panic: interface conversion: interface &#123;&#125; is string, not float64</span></div><div class="line">fmt.Println(f)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>Type switches</code>: permits several type assertions in series.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</div><div class="line"><span class="keyword">case</span> T:</div><div class="line">    <span class="comment">// here assert v has type T</span></div><div class="line"><span class="keyword">case</span> S:</div><div class="line">    <span class="comment">// here assert v has type S</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="comment">// no match; here v has the same type as i</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>For Example, </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">fmt.Printf(<span class="string">"Twice %v is %v\n"</span>, v, v*<span class="number">2</span>)</div><div class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">fmt.Printf(<span class="string">"%q is %v bytes long\n"</span>, v, <span class="built_in">len</span>(v))</div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Printf(<span class="string">"I don't know about type %T!\n"</span>, v)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">do(<span class="number">21</span>) <span class="comment">// output: Twice 21 is 42</span></div><div class="line">do(<span class="string">"hello"</span>) <span class="comment">// output:  "hello" is 5 bytes long</span></div><div class="line">do(<span class="literal">true</span>) <span class="comment">// output: I don't know about type bool!</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>Stringer</code> interface in <code>fmt</code> package. It has a method <code>String() string</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</div><div class="line">Name <span class="keyword">string</span></div><div class="line">Age  <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v (%v years)"</span>, p.Name, p.Age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := Person&#123;<span class="string">"Arthur Dent"</span>, <span class="number">42</span>&#125;</div><div class="line">z := Person&#123;<span class="string">"Zaphod Beeblebrox"</span>, <span class="number">9001</span>&#125;</div><div class="line">fmt.Println(a, z) <span class="comment">// output: Arthur Dent (42 years) Zaphod Beeblebrox (9001 years)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>error</code> interface in <code>fmt</code> package. it has a method <code>Error() string</code>. This is the so-called customized exception. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"math"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> ErrNegativeSqrt <span class="keyword">float64</span> <span class="comment">// we can wrap the value itself into this error and print info related to this obj inside the Error() method, this is a good practice</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e ErrNegativeSqrt)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"cannot Sqrt negative number: %v"</span>, <span class="keyword">float64</span>(e))</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="params">(<span class="keyword">float64</span>, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, ErrNegativeSqrt(x)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> math.Sqrt(<span class="keyword">float64</span>(x)), <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(Sqrt(<span class="number">2</span>))  <span class="comment">// output: 1.4142135623730951 &lt;nil&gt;</span></div><div class="line">fmt.Println(Sqrt(<span class="number">-3</span>)) <span class="comment">// output: 0 cannot Sqrt negative number: -3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Concurrency">9. Concurrency</h1><h2 id="Basic-8">9.1. Basic</h2><ul><li><code>Goroutine</code>: lightweight thread managed by the Go runtime. <code>go f(x, y, z)</code> starts a new goroutine running function f(x,y,z). The evaluation of parameters happens immediately, but execution happens later. </li><li><p><code>Chanel</code>: typed conduit through which you can send and receive values with the channel operator, <code>&lt;-</code>.<br><strong>The data flows in the direction of the arrow</strong>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ch &lt;- v    <span class="comment">// Send v to channel ch.</span></div><div class="line">v := &lt;-ch  <span class="comment">// Receive from ch, and</span></div><div class="line">           <span class="comment">// assign value to v.</span></div></pre></td></tr></table></figure><p>Create a channel before using it: <code>ch := make(chan int)</code>. </p></li><li><p><code>Range/Close a channel</code>, use <code>close(ch)</code> from producer side to close a channel to tell the receiver no more items produced.<br><code>v, ok := &lt;-ch</code>, the <code>ok</code> will be false if <code>ch is already closed</code>.<br><code>for i := range c</code> will get value from channel <code>continuously</code> until it’s closed  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">float64</span>)</span></span> &#123;</div><div class="line">x, y := <span class="number">0.0</span>, <span class="number">1.0</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line">c &lt;- x</div><div class="line">x, y = y, x+y</div><div class="line">&#125;</div><div class="line"><span class="built_in">close</span>(c)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">float64</span>, <span class="number">100</span>)</div><div class="line"><span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123; </div><div class="line">fmt.Println(i)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>select statement</code>: select statement lets a goroutine wait on multiple communication operations. It <code>blocks</code> until one of its cases can run, then it executes that case. It chooses <code>one at random if multiple are ready</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">x, y := <span class="number">0</span>, <span class="number">1</span></div><div class="line"><span class="keyword">for</span> &#123;<span class="comment">// this is a inf loop </span></div><div class="line"><span class="keyword">select</span> &#123;<span class="comment">// implicitly we do have a goroutine here, it waits on multiple channels</span></div><div class="line"><span class="keyword">case</span> c &lt;- x:</div><div class="line">x, y = y, x+y</div><div class="line"><span class="keyword">case</span> &lt;-quit:</div><div class="line">fmt.Println(<span class="string">"quit"</span>)</div><div class="line"><span class="keyword">return</span> <span class="comment">// this is quit condition for this inf loop</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="comment">// 1st goroutine </span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">fmt.Println(&lt;-c)</div><div class="line">&#125;</div><div class="line">quit &lt;- <span class="number">0</span> <span class="comment">// removing this line will get this program stuck</span></div><div class="line">&#125;()</div><div class="line">fibonacci(c, quit)<span class="comment">// 2nd goroutine, block next all statements</span></div><div class="line">quit &lt;- <span class="number">1</span> <span class="comment">// this statement will never be executed since the above statement blocks if `quit &lt;- 0` is removed</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p><code>Time elapsed channel</code>: <code>time.Tick</code> and <code>time.After</code>. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">tick := time.Tick(<span class="number">1000</span> * time.Millisecond) <span class="comment">// every 1 second, get a value from this channel</span></div><div class="line">boom := time.After(<span class="number">5000</span> * time.Millisecond) <span class="comment">// after 5 second, get a value from this channel</span></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> x := &lt;-tick:</div><div class="line">fmt.Println(<span class="string">"tick."</span>, x)</div><div class="line"><span class="keyword">case</span> x := &lt;-boom:</div><div class="line">fmt.Println(<span class="string">"BOOM!"</span>, x)</div><div class="line"><span class="keyword">return</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="comment">//fmt.Println("    .")</span></div><div class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Output:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">01</span> +<span class="number">0000</span> UTC m=+<span class="number">1.000000001</span></div><div class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">02</span> +<span class="number">0000</span> UTC m=+<span class="number">2.000000001</span></div><div class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">03</span> +<span class="number">0000</span> UTC m=+<span class="number">3.000000001</span></div><div class="line">tick. <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">04</span> +<span class="number">0000</span> UTC m=+<span class="number">4.000000001</span></div><div class="line">BOOM! <span class="number">2009</span><span class="number">-11</span><span class="number">-10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">05</span> +<span class="number">0000</span> UTC m=+<span class="number">5.000000001</span></div></pre></td></tr></table></figure></li><li><p><code>range/close</code> or <code>select/quit channel</code> or <code>Tick/After</code> to do the goroutine synchronization using channel.</p></li><li><code>sync.Mutex</code> has <code>Lock/Unlock</code> which can also provide <code>shared-memory mechanism synchronization</code>.<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// SafeCounter is safe to use concurrently.</span></div><div class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</div><div class="line">v   <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">mux sync.Mutex</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Inc increments the counter for the given key.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Inc</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">c.mux.Lock()</div><div class="line"><span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></div><div class="line">c.v[key]++</div><div class="line">c.mux.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Value returns the current value of the counter for the given key.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">c.mux.Lock()</div><div class="line"><span class="comment">// Lock so only one goroutine at a time can access the map c.v.</span></div><div class="line"><span class="keyword">defer</span> c.mux.Unlock()</div><div class="line"><span class="keyword">return</span> c.v[key]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">c := SafeCounter&#123;v: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)&#125;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> c.Inc(<span class="string">"somekey"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">time.Sleep(time.Second)</div><div class="line">fmt.Println(c.Value(<span class="string">"somekey"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h1 id="Build">10. Build</h1><h2 id="use-golang-docker-image-to-build">10.1. use golang docker image to build</h2><p>Use <code>golang:1.9</code> to build go program<br><a href="https://github.com/docker-library/docs/tree/master/golang#compile-your-app-inside-the-docker-container" target="_blank" rel="noopener">https://github.com/docker-library/docs/tree/master/golang#compile-your-app-inside-the-docker-container</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">APPNAME=passport</div><div class="line">BUILD_PATH=/usr/src/<span class="variable">$&#123;APPNAME&#125;</span></div><div class="line">GOLANG_IMG=<span class="string">"golang:1.9"</span></div><div class="line"></div><div class="line">docker run --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:<span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>"</span> -w <span class="variable">$&#123;BUILD_PATH&#125;</span> -e GOPATH=<span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>"</span> -e GOBIN=<span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>/bin"</span> -e CGO_ENABLED=0 -e GOOS=linux -e GOARCH=amd64 golang:1.9 go get -v &amp;&amp; go build -a -installsuffix cgo \</div><div class="line">-ldflags <span class="string">"-s -w"</span> \</div><div class="line">-o <span class="string">"<span class="variable">$&#123;BUILD_PATH&#125;</span>/<span class="variable">$&#123;APPNAME&#125;</span>"</span> .</div></pre></td></tr></table></figure></p><hr><p>References:</p><ul><li><a href="https://tour.golang.org/" target="_blank" rel="noopener">A Tour of Go</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a post of Golang Summary, for me to check out long time not writing program using Golang since 3 years ago. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2018/03/02/Golang-Summary/golangroutines.png&quot; title=&quot;Golang Routine+Channel&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Languages" scheme="https://morganwu277.github.io/categories/Languages/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/categories/Languages/Go/"/>
    
      <category term="Notes" scheme="https://morganwu277.github.io/categories/Languages/Go/Notes/"/>
    
    
      <category term="Book" scheme="https://morganwu277.github.io/tags/Book/"/>
    
      <category term="Reading Notes" scheme="https://morganwu277.github.io/tags/Reading-Notes/"/>
    
      <category term="Go" scheme="https://morganwu277.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Magics</title>
    <link href="https://morganwu277.github.io/2018/01/18/Nginx-Magics/"/>
    <id>https://morganwu277.github.io/2018/01/18/Nginx-Magics/</id>
    <published>2018-01-18T21:32:34.000Z</published>
    <updated>2018-05-26T21:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/2018/01/18/Nginx-Magics/nginx.png" title="Nginx Load Balancer"></center><p>This is a post for Nginx Magics and for you to quick get the configurations.<br>I put the links here to refer and put my own thoughts and comments.  </p><p>For more nginx settigns, pls refer my another markdown list:<br><a href="https://github.com/morganwu277/code_snippets/blob/master/nginx.md" target="_blank" rel="noopener">https://github.com/morganwu277/code_snippets/blob/master/nginx.md</a> </p><a id="more"></a><h1 id="Security">1. Security</h1><h2 id="Rate-Limiting">1.1. Rate Limiting</h2><p>Rate Limiting for hackers or crawlers but not search engines. </p><p>Refs: </p><ul><li>English: <ul><li><a href="https://www.nginx.com/blog/rate-limiting-nginx/" target="_blank" rel="noopener">https://www.nginx.com/blog/rate-limiting-nginx/</a> </li><li><a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_limit_req_module.html</a> </li><li><a href="https://lincolnloop.com/blog/rate-limiting-nginx/" target="_blank" rel="noopener">https://lincolnloop.com/blog/rate-limiting-nginx/</a> </li></ul></li><li>Chinese: <ul><li><a href="http://www.cnblogs.com/chenpingzhao/p/4971308.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenpingzhao/p/4971308.html</a></li></ul></li></ul><p>I don’t want to explain more on the rate limiting of Nginx, since it’s already there.</p><p>However, only simple rate limiting will comes with an issue: multiple users from one common gateway could be blocked, for example, they are in University network and shared a common external gateway IP address.</p><p>From server side’s angle, it can’t just use the IP address to do the rate limiting. Since there could be multiple none hackers under this same IP address.</p><p>All in all, only using IP address to do rate limiting is trivial and not safe. We should also combine with User-Agent or other fields and adapt this dynamically.<br>Also, the hackers/crawlers can still use VPN to avoid the so-called IP-based rate limiting. </p><p>We should have a Machine Learning algorithm that can dynamically output the rate limiting model and apply it to online rate limiting. Especially using tree-based model. </p><h2 id="IP-Address-Blocking-Behind-Proxies">1.2. IP Address Blocking Behind Proxies</h2><p>Use next inside your <code>location /</code> section:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">set_real_ip_from 103.21.244.0/22;</div><div class="line">set_real_ip_from 103.22.200.0/22;</div><div class="line">set_real_ip_from 103.31.4.0/22;</div><div class="line">set_real_ip_from 104.16.0.0/12;</div><div class="line">set_real_ip_from 108.162.192.0/18;</div><div class="line">set_real_ip_from 131.0.72.0/22;</div><div class="line">set_real_ip_from 141.101.64.0/18;</div><div class="line">set_real_ip_from 162.158.0.0/15;</div><div class="line">set_real_ip_from 172.64.0.0/13;</div><div class="line">set_real_ip_from 173.245.48.0/20;</div><div class="line">set_real_ip_from 188.114.96.0/20;</div><div class="line">set_real_ip_from 190.93.240.0/20;</div><div class="line">set_real_ip_from 197.234.240.0/22;</div><div class="line">set_real_ip_from 198.41.128.0/17;</div><div class="line">set_real_ip_from 2400:cb00::/32;</div><div class="line">set_real_ip_from 2405:8100::/32;</div><div class="line">set_real_ip_from 2405:b500::/32;</div><div class="line">set_real_ip_from 2606:4700::/32;</div><div class="line">set_real_ip_from 2803:f800::/32;</div><div class="line">set_real_ip_from 2c0f:f248::/32;</div><div class="line">set_real_ip_from 2a06:98c0::/29;</div><div class="line"></div><div class="line">   real_ip_header  X-Forwarded-For; </div><div class="line">   real_ip_recursive on;</div><div class="line">   deny 70.103.56.2;</div><div class="line">   deny 200.159.140.37;</div><div class="line">   deny 140.207.116.178;</div><div class="line">   deny 221.4.34.18;</div><div class="line">   deny 74.79.253.186;</div><div class="line">   deny 204.11.108.89;</div><div class="line">   deny 204.11.108.94;</div><div class="line">   deny 204.236.220.196;</div><div class="line">   deny 12.229.60.66;</div><div class="line">   deny 73.181.227.5;</div></pre></td></tr></table></figure></p><p>For more details: <a href="http://nginx.org/en/docs/http/ngx_http_realip_module.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_realip_module.html</a> </p><h1 id="Proxy">2. Proxy</h1><h2 id="Internet-Proxy">2.1. Internet Proxy</h2><p>To avoid network restrictions, such as <a href="https://en.wikipedia.org/wiki/Great_Firewall" target="_blank" rel="noopener">GFW</a>. </p><p><strong>REFs</strong></p><ul><li>Nginx Image comes from:<br><a href="https://cdn-1.wp.nginx.com/wp-content/uploads/2016/03/Python-NGINX-architecture-1024x596.png" target="_blank" rel="noopener">https://cdn-1.wp.nginx.com/wp-content/uploads/2016/03/Python-NGINX-architecture-1024x596.png</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/2018/01/18/Nginx-Magics/nginx.png&quot; title=&quot;Nginx Load Balancer&quot;&gt;&lt;/center&gt;

&lt;p&gt;This is a post for Nginx Magics and for you to quick get the configurations.&lt;br&gt;I put the links here to refer and put my own thoughts and comments.  &lt;/p&gt;
&lt;p&gt;For more nginx settigns, pls refer my another markdown list:&lt;br&gt;&lt;a href=&quot;https://github.com/morganwu277/code_snippets/blob/master/nginx.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/morganwu277/code_snippets/blob/master/nginx.md&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Nginx" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://morganwu277.github.io/tags/Nginx/"/>
    
      <category term="Rate Limiting" scheme="https://morganwu277.github.io/tags/Rate-Limiting/"/>
    
      <category term="Machine Learning" scheme="https://morganwu277.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Install Percona Monitoring and Management System</title>
    <link href="https://morganwu277.github.io/2017/12/26/Install-Percona-Monitoring-and-Management-System/"/>
    <id>https://morganwu277.github.io/2017/12/26/Install-Percona-Monitoring-and-Management-System/</id>
    <published>2017-12-26T19:03:06.000Z</published>
    <updated>2018-05-26T21:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I was exhausted about the <a href="https://bugs.mysql.com/bug.php?id=81899" target="_blank" rel="noopener">Page Cleaner in MySQL</a> issue, and in the end I just surrendered and installed this PMM and keep on monitoring. I thought I was able to solve everything via simple <code>show innodb engine status</code> and <code>show global variables/status</code>, etc.</p><p>But the reality showed me as a fool of wasting time on just viewing numbers flipping. I learned one thing from this: never try to hack it before you really fully master it, which is only <code>WAST OF TIME</code>. Time really matters.</p><p>This is a quick notes for you to quickly install PMM and start monitoring your MySQL.</p><p>As usual, picture always show first!</p><center><img src="/2017/12/26/Install-Percona-Monitoring-and-Management-System/mysql-pmm.png" title="Percona Monitoring and Management System"></center><p>Beautiful, uh? <span class="github-emoji" title="grinning" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f600.png?v8">&#x1f600;</span></p><a id="more"></a><h1 id="Architecture-Diagram">1. Architecture Diagram</h1><h1 id="Install-PMM-Server">2. Install PMM Server</h1><p>Server could install to any server, to be able to aggregate metrics and show web page with diagrams.</p><h2 id="Install-using-Docker">2.1. Install using Docker</h2><p>Before this you need a docker environment and add current user as docker group.<br>Please refer to: <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04" target="_blank" rel="noopener">How To Install and Use Docker on Ubuntu 16.04</a><br>After you install Docker in Ubuntu, please add <code>--iptables=false</code> to <code>ExecStart=/usr/bin/dockerd -H fd://</code> in file <code>/etc/systemd/system/multi-user.target.wants/docker.service</code>, or you can’t use UFW to control iptable rules as you would like <span class="github-emoji" title="disappointed_relieved" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f625.png?v8">&#x1f625;</span>. For more info, please review:<br><a href="https://github.com/moby/moby/issues/4737#issuecomment-232362106" target="_blank" rel="noopener">https://github.com/moby/moby/issues/4737#issuecomment-232362106</a></p><p>But from my own experiment, it shows me as if I configure <code>net.ipv4.ip_forward=1</code> in <code>/etc/sysctl.conf</code>, then it means IP FORWARD will be open itself, but not by Docker, so docker( <code>&gt; 1.13.x</code> ) won’t add a <code>iptables -P FORWARD DROP</code> by default, since Docker itself will think, FORWARD is not opened by me, if it’s opened by default, then it’s mean to be open there and Docker itself won’t change that behavior. </p><p>For other ways to install PMM server, eg. AWS, please refer to: <a href="https://www.percona.com/doc/percona-monitoring-and-management/deploy/index.html#installing-pmm-server" target="_blank" rel="noopener">Installing PMM Server</a></p><p>Let start! </p><ol><li><p>Pull the image of <code>pmm-server</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull percona/pmm-server:latest</div></pre></td></tr></table></figure></li><li><p>Create <code>pmm-data</code> container for persistent PMM data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker create \</div><div class="line">   -v /opt/prometheus/data \</div><div class="line">   -v /opt/consul-data \</div><div class="line">   -v /var/lib/mysql \</div><div class="line">   -v /var/lib/grafana \</div><div class="line">   --name pmm-data \</div><div class="line">   percona/pmm-server:latest /bin/<span class="literal">true</span></div></pre></td></tr></table></figure></li><li><p>Launch PMM Server</p></li></ol><p><code>METRICS_RETENTION</code> only keeps 1 week data.<br><code>METRICS_MEMORY</code> will make sure pmm server use up to <code>393216*3/2KB</code> = 576MB. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker run -d \</div><div class="line">  -p 8081:80 \</div><div class="line">  -eMETRICS_RETENTION=168h \</div><div class="line">  -eMETRICS_MEMORY=393216 \</div><div class="line">  --volumes-from pmm-data \</div><div class="line">  --name pmm-server \</div><div class="line">  --restart always \</div><div class="line">  percona/pmm-server:latest</div></pre></td></tr></table></figure><p>   the above <code>-p 8081:80</code> maps local 8081 port to container 80 port. </p><p>After above steps, you open your <code>${IP}:8081</code>, you should be able to see start page of <code>Percona Monitoring and Management</code>. </p><center><img src="/2017/12/26/Install-Percona-Monitoring-and-Management-System/pmm-init.png" title="Percona Monitoring and Management Initial Page"></center><p>For more, please refer to:<br><a href="https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.setting-up.html#additional-parameters" target="_blank" rel="noopener">https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.setting-up.html#additional-parameters</a></p><h1 id="Install-PMM-Client">3. Install PMM Client</h1><p>Client has to be install into the MySQL Server instance host. </p><h2 id="Ubuntu">3.1. Ubuntu</h2><ol><li><p>Configure Repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://repo.percona.com/apt/percona-release_0.1-4.$(lsb_release -sc)_all.deb</div><div class="line">sudo dpkg -i percona-release_0.1-4.$(lsb_release -sc)_all.deb</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-cache search percona</div></pre></td></tr></table></figure><p>You should be able to see next output: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">percona-xtrabackup-dbg - Debug symbols <span class="keyword">for</span> Percona XtraBackup</div><div class="line">percona-xtrabackup-test - Test suite <span class="keyword">for</span> Percona XtraBackup</div><div class="line">percona-xtradb-cluster-client - Percona XtraDB Cluster database client</div><div class="line">...</div></pre></td></tr></table></figure></li><li><p>Install Client </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install pmm-client</div></pre></td></tr></table></figure></li><li><p>Configure Client </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pmm-admin config --server 192.168.100.1:8081 <span class="comment"># here the port is your server port in PMM server, please notice the firewall rules</span></div><div class="line">OK, PMM server is alive.</div><div class="line"></div><div class="line">PMM Server      | 192.168.100.1</div><div class="line">Client Name     | ubuntu-amd641</div><div class="line">Client Address  | 192.168.200.1</div></pre></td></tr></table></figure></li><li><p>Add MySQL Instance to Monitor<br>Add the mysql instance by using <code>pmm-admin</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">pmm-admin add mysql --user root --password xxxxxxx </div><div class="line"><span class="comment">## plaese add `--disable-tablestats` if you do have lots of tables, like &gt; 300, or tablestats monotiring will take some time.</span></div><div class="line"></div><div class="line">pmm-admin list <span class="comment"># Please note, client address must be correct NIC IP, can't be an IP which pmm-server can't reach</span></div><div class="line">pmm-admin 1.5.3</div><div class="line"></div><div class="line">PMM Server      | ***.***.***.***:8081 </div><div class="line">Client Name     | ***.***.***.***</div><div class="line">Client Address  | ***.***.***.***</div><div class="line">Service Manager | linux-systemd</div><div class="line"></div><div class="line">-------------- ----------------------------- ----------- -------- ------------------------------------------- ------------------------------------------</div><div class="line">SERVICE TYPE   NAME                          LOCAL PORT  RUNNING  DATA SOURCE                                 OPTIONS                                   </div><div class="line">-------------- ----------------------------- ----------- -------- ------------------------------------------- ------------------------------------------</div><div class="line">mysql:queries  ***.***.***.***  -           YES      root:***@unix(/var/run/mysqld/mysqld.sock)  query_source=slowlog, query_examples=<span class="literal">true</span> </div><div class="line">linux:metrics  ***.***.***.***  42000       YES      -                                                                                     </div><div class="line">mysql:metrics  ***.***.***.***  42002       YES      root:***@unix(/var/run/mysqld/mysqld.sock)</div></pre></td></tr></table></figure></li></ol><p>For more commands for <code>pmm-admin</code>, please review:<br><a href="https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html#managing-pmm-client" target="_blank" rel="noopener">https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html#managing-pmm-client</a> </p><h1 id="Ports-and-Set-Firewall-Rules">4. Ports and Set Firewall Rules</h1><p>Next ports has to be opened on PMM Client host to PMM Server IP. </p><table><thead><tr><th>Port</th><th>Meaning</th></tr></thead><tbody><tr><td>42000</td><td>For PMM to collect <code>general system</code> metrics</td></tr><tr><td>42001</td><td>This port is used by a service which collects query performance data and makes it available to QAN</td></tr><tr><td>42002</td><td>For PMM to collect <code>MySQL server</code> metrics</td></tr><tr><td>42003</td><td>For PMM to collect MongoDB server metrics</td></tr><tr><td>42004</td><td>For PMM to collect ProxySQL server metrics</td></tr></tbody></table><p>These lines need to be executed in PMM client host, and <code>***.***.***.***</code> is PMM server host, to <code>only</code> enable fetching metrics by PMM Server.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ufw allow proto tcp from ***.***.***.*** to any port 42000</div><div class="line">ufw allow proto tcp from ***.***.***.*** to any port 42001</div><div class="line">ufw allow proto tcp from ***.***.***.*** to any port 42002</div><div class="line">ufw allow proto tcp from ***.***.***.*** to any port 42003</div><div class="line">ufw allow proto tcp from ***.***.***.*** to any port 42004</div></pre></td></tr></table></figure></p><p>This line needs to be executed in PMM Server host, and <code>***.***.***.***</code> is the PMM client host, to <code>only</code> enable client to access PMM Server 8081 port.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ufw allow proto tcp from ***.***.***.*** to any port 8081</div><div class="line">ufw reject proto tcp to any port 8081</div></pre></td></tr></table></figure></p><p>For more info, please refer to:<br><a href="https://www.percona.com/doc/percona-monitoring-and-management/glossary.terminology.html#term-ports" target="_blank" rel="noopener">https://www.percona.com/doc/percona-monitoring-and-management/glossary.terminology.html#term-ports</a></p><h1 id="Email-Alert-Configuration">5. Email Alert Configuration</h1><p>Go into docker instance and <code>vi /etc/grafana/grafana.ini</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># The full public facing url you use in browser, used for redirects and emails</div><div class="line"># If you use reverse proxy and sub path specify full url (with sub path)</div><div class="line">root_url = https://xxx.xxx.xxx/graph/ # This is your domain name</div><div class="line"></div><div class="line">#################################### SMTP / Emailing ##########################</div><div class="line">[smtp]</div><div class="line">enabled = true</div><div class="line">host = smtp.gmail.com:465</div><div class="line">user = username # without @gmail.com</div><div class="line"># If the password contains # or ; you have to wrap it with trippel quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;</div><div class="line">password = stwixlxwxnmimfsfsf @ this is your app password</div><div class="line">;cert_file =</div><div class="line">;key_file =</div><div class="line">skip_verify = false</div><div class="line">from_address = username@gmail.com</div><div class="line">from_name = Grafana</div><div class="line"># EHLO identity in SMTP dialog (defaults to instance_name)</div><div class="line">ehlo_identity = xxx.xxx.xxx # again your domain name</div></pre></td></tr></table></figure></p><p>NOTE: please do next things for your gmail: </p><ol><li>Enable IMAP/SMTP </li><li>Open 2 factor login for Google Account</li><li>Config app password for gmail and place above </li></ol><h1 id="Nginx-Forward-Port-and-Setup-HTTP-Auth">6. Nginx Forward Port and Setup HTTP Auth</h1><p>Actually we still need the HTTPS setup, but that’s beyond our topic here. </p><ol><li><p>Setup Nginx by using <code>apt-get install nginx</code> and then setup next site-conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80 ;</div><div class="line">        listen [::]:80 ;</div><div class="line">        server_name ***.***.domain_name;</div><div class="line">        <span class="built_in">return</span> 301 https://***.***.domain_name<span class="variable">$request_uri</span>;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">        listen 443 ssl;</div><div class="line">        listen [::]:443 ssl;</div><div class="line">        server_name ***.***.domain_name;</div><div class="line">        ssl_certificate /etc/nginx/ssl/self-domain.crt;</div><div class="line">        ssl_certificate_key /etc/nginx/ssl/self-domain.key;</div><div class="line"></div><div class="line">        access_log            /var/<span class="built_in">log</span>/nginx/pmm.access.log;</div><div class="line">        error_log            /var/<span class="built_in">log</span>/nginx/pmm.error.log;</div><div class="line"></div><div class="line">        auth_basic <span class="string">"Restricted Content"</span>;</div><div class="line">        auth_basic_user_file /etc/nginx/.htpasswd;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">                include /etc/nginx/proxy_params;</div><div class="line">                proxy_set_header       Authorization <span class="string">""</span>;</div><div class="line">                proxy_pass          http://localhost:8081;</div><div class="line">                proxy_read_timeout  90s;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Setup http auth </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> -n <span class="string">'user1:'</span> &gt;&gt; /etc/nginx/.htpasswd</div><div class="line"><span class="comment"># input password for `user1` twice here, as `pass1`</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"pass1\npass1\n"</span> | openssl passwd -apr1 -stdin &gt;&gt; /etc/nginx/.htpasswd</div></pre></td></tr></table></figure></li><li><p>Reload Nginx </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nginx -t </div><div class="line">nginx -s reload</div></pre></td></tr></table></figure></li></ol><h1 id="Highlights-and-Conclusion">7. Highlights and Conclusion</h1><ol><li><code>PMM</code> is powerful to monitor MySQL</li><li>Use <code>--iptables=false</code> if you install Docker into Ubuntu OS, which again, proves, CentOS is designed for Server.</li><li>We can use <code>openssl</code> to setup http password file</li><li>Use <code>proxy_set_header       Authorization &quot;&quot;;</code> to remove the http auth header</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I was exhausted about the &lt;a href=&quot;https://bugs.mysql.com/bug.php?id=81899&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Page Cleaner in MySQL&lt;/a&gt; issue, and in the end I just surrendered and installed this PMM and keep on monitoring. I thought I was able to solve everything via simple &lt;code&gt;show innodb engine status&lt;/code&gt; and &lt;code&gt;show global variables/status&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;But the reality showed me as a fool of wasting time on just viewing numbers flipping. I learned one thing from this: never try to hack it before you really fully master it, which is only &lt;code&gt;WAST OF TIME&lt;/code&gt;. Time really matters.&lt;/p&gt;
&lt;p&gt;This is a quick notes for you to quickly install PMM and start monitoring your MySQL.&lt;/p&gt;
&lt;p&gt;As usual, picture always show first!&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/12/26/Install-Percona-Monitoring-and-Management-System/mysql-pmm.png&quot; title=&quot;Percona Monitoring and Management System&quot;&gt;&lt;/center&gt;

&lt;p&gt;Beautiful, uh? &lt;span class=&quot;github-emoji&quot; title=&quot;grinning&quot; data-src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f600.png?v8&quot;&gt;&amp;#x1f600;&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Monitor" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/"/>
    
      <category term="Percona" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/Percona/"/>
    
    
      <category term="MySQL" scheme="https://morganwu277.github.io/tags/MySQL/"/>
    
      <category term="Percona" scheme="https://morganwu277.github.io/tags/Percona/"/>
    
      <category term="Monitoring" scheme="https://morganwu277.github.io/tags/Monitoring/"/>
    
  </entry>
  
  <entry>
    <title>Install Ganglia and Send Metrics to Graphite</title>
    <link href="https://morganwu277.github.io/2017/12/18/Install-Ganglia-Start/"/>
    <id>https://morganwu277.github.io/2017/12/18/Install-Ganglia-Start/</id>
    <published>2017-12-18T21:15:43.000Z</published>
    <updated>2018-06-19T02:48:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have been used many monitoring tools for over 4 years, but there has never been a tool which is so strongly strike my heart and meet my needs in the just right way. Most of them are focusing more on the so-called extensible back-end storage, but not many of them has really meet the requirement of monitoring out of box. Of course, that could be the secret of their business money making. </p><p>Anyway, most of this article follows <a href="https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/" target="_blank" rel="noopener">https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/</a> , just to give myself a quick notes to apply.</p><p>Long time that no pictures, I love pictures. Here is one for you to enjoy: </p><center><img src="/2017/12/18/Install-Ganglia-Start/Ganglia_my_cluster_Report.png" title="My Cluster Overview Performance"></center><a id="more"></a><p>This post assume you have a Ubuntu 16.04 OS, for CentOS, please note, the service name is a little different, but components should be the same:</p><ul><li>gmond + gmond-python modules</li><li>gmetad + rrdtool + rrdcache(optional) + web front</li></ul><h1 id="How-Ganlia-works">1. How Ganlia works?</h1><ol><li>Ganglia Monitoring Daemon(<code>gmond</code>) collect data from the server itself and then send to one Ganglia Meta Daemon(<code>gmetad</code>) server to aggregate the data. </li><li><code>gmetad</code> will save those data into <code>rrds</code> on disk. (flush to disk)<ol><li><code>gmetad</code> aggregation data could comes from a <code>gmond</code> data.</li><li>a lower level of <code>gmetad</code> could send data to a higher level of <code>gmetad</code> node to form a multi-level gmetad cluster, to form as a cluster environment, to make sure such monitoring system as scalable as <code>several thousands</code> of server nodes.</li></ol></li><li>Ganglia PHP Web Front-end will fetch <code>rrds</code> data and display on web page.</li></ol><h1 id="Install-Ganglia-Meta-Daemon-Node">2. Install Ganglia Meta Daemon Node</h1><h2 id="Update-System">2.1. Update System</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update -y sudo apt-get upgrade -y</div></pre></td></tr></table></figure><p>This is easy, I and you will skip this.</p><h2 id="Install-LAMP-Stack-on-Master-node-gmetad-node">2.2. Install LAMP Stack on Master node (gmetad node)</h2><p>Actally we don’t need even <code>mariadb</code> here. Only <code>PHP7</code> and <code>Apache2</code> related are required.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2 php7.0 libapache2-mod-php7.0 php7.0-mbstring php7.0-curl php7.0-zip php7.0-gd  php7.0-curl php7.0-mcrypt</div><div class="line">sudo apt-get install mariadb-server php7.0-mysql <span class="comment"># this is not required</span></div></pre></td></tr></table></figure></p><h2 id="Install-Gmetad-Node-Component">2.3. Install Gmetad Node Component</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install ganglia-monitor ganglia-monitor-python gmetad ganglia-webfrontend -y</div></pre></td></tr></table></figure><h2 id="Gmetad-Config-udpate">2.4. Gmetad Config udpate</h2><p>By default, using <code>data_source &quot;my cluster&quot; localhost</code> and <code>gridname &quot;MyGrid&quot;</code> as <code>localhost:8649</code> datasource and <code>MyGrid</code> grid.</p><h2 id="Ganglia-Web-Update">2.5. Ganglia-Web Update</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># vi /etc/apache2/sites-enabled/ganglia.conf</div><div class="line">Alias /ganglia /usr/share/ganglia-webfrontend</div><div class="line"></div><div class="line">&lt;Directory &quot;/usr/share/ganglia-webfrontend&quot;&gt;</div><div class="line">  AuthType Basic</div><div class="line">  AuthName &quot;Authentication Required&quot;</div><div class="line">  AuthUserFile &quot;/etc/apache2/sites-enabled/.htpasswd&quot;</div><div class="line">  Require valid-user</div><div class="line"></div><div class="line">AllowOverride All</div><div class="line">Order allow,deny</div><div class="line">Allow from all</div><div class="line">Deny from none</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure><p>Also, please generate one <code>/etc/apache2/sites-enabled/.htpasswd</code> using<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">htpasswd -c /etc/apache2/sites-enabled/.htpasswd &lt;admin_user&gt;</div></pre></td></tr></table></figure></p><h2 id="Install-rrdcached-to-solve-large-IOPS-issue">2.6. Install rrdcached to solve large IOPS issue</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install rrdcached -y</div></pre></td></tr></table></figure><p>After installing <code>rrdcached</code>, you will see a line<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEFAULT=/etc/default/rrdcached</div></pre></td></tr></table></figure></p><p>in <code>/etc/init.d/rrdcached</code>, which means start options are defined in file <code>/etc/default/rrdcached</code>. </p><h2 id="Configure-Update-After-Installing-rrdcached">2.7. Configure Update After Installing rrdcached</h2><ol><li><p>Change <code>BASE_OPTIONS</code> in <code>/etc/default/rrdcached</code><br>Change the last line from </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BASE_OPTIONS=&quot;-B&quot;</div></pre></td></tr></table></figure><p>into </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BASE_OPTIONS=&quot;-s www-data -m 664 -l unix:/tmp/rrdcached.sock  \</div><div class="line">              -s nogroup -m 777 -P FLUSH,STATS,HELP,FETCH -l unix:/tmp/rrdcached.limited.sock \</div><div class="line">              -b /var/lib/ganglia/rrds -B&quot;</div></pre></td></tr></table></figure><p>It means: </p><ul><li>for <code>www-data</code> user has <code>644</code> permission from <code>unix:/tmp/rrdcached.sock</code> sock, </li><li>but for <code>nogroup</code> users, it has <code>777</code> permission but <code>LIMITED</code> to Operations <code>FLUSH</code>, <code>STATS</code>, <code>HELP</code>, <code>FETCH</code>, maye the <code>FETCH</code> is not required, and via <code>unix:/tmp/rrdcached.limited.sock</code> socket,</li><li>and will flush all data into directory <code>/var/lib/ganglia/rrds</code></li></ul></li><li><p>Use <code>DAEMON_USER=nobody</code> to run the rrdcached.</p></li><li><p>Change <code>PIDFILE</code> path into <code>tmp</code> folder.</p></li><li><p>Remove the lines whih is already defined in <code>BASE_OPTIONS</code>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#SOCKFILE=/var/run/rrdcached.sock</div><div class="line">#BASE_PATH=/var/lib/rrdcached/db</div><div class="line">#SOCKGROUP=root</div><div class="line">#SOCKMODE=0660</div><div class="line">#DAEMON_GROUP=_rrdcached</div></pre></td></tr></table></figure></li><li><p>Change the permission of folders</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown -R nobody.nogroup /var/lib/ganglia/rrds</div><div class="line">chown -R nobody.nogroup /var/lib/rrdcached</div></pre></td></tr></table></figure></li><li><p>Config Gmetad and ganglia-web</p><ul><li>Add <code>export RRDCACHED_ADDRESS=&quot;unix:/tmp/rrdcached.limited.sock&quot;</code> into head of <code>/etc/init.d/gmetad</code></li><li><p>Use <code>nobody</code> to start <code>gmetad</code> in <code>/etc/init.d/gmetad</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  start)</div><div class="line">        <span class="built_in">echo</span> -n <span class="string">"Starting <span class="variable">$DESC</span>: "</span></div><div class="line">        sudo -u nobody sh -c <span class="string">"<span class="variable">$DAEMON</span>  --pid-file /tmp/<span class="variable">$NAME</span>.pid"</span></div><div class="line"><span class="comment">#       start-stop-daemon --start --quiet \</span></div><div class="line"><span class="comment">#               --exec $DAEMON -- --pid-file /var/run/$NAME.pid</span></div><div class="line"><span class="comment">#       echo "$NAME."</span></div><div class="line">        ;;</div></pre></td></tr></table></figure></li><li><p>Change <code>$conf[&#39;rrdcached_socket&#39;] = &quot;&quot;;</code> into <code>$conf[&#39;rrdcached_socket&#39;] = &quot;unix:/tmp/rrdcached.sock&quot;;</code> in <code>/usr/share/ganglia-webfrontend/conf_default.php</code></p></li></ul></li><li><p>Use <code>nobody</code> to start rrdcached<br>In <code>/etc/init.d/rrdcached</code> add a new line using <code>nobody</code> to start the <code>rrdcached</code>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="title">do_start</span></span> () &#123;</div><div class="line"><span class="comment">#    start_daemon -p $&#123;PIDFILE&#125; $&#123;DAEMON&#125; $&#123;RRDCACHED_OPTIONS&#125;</span></div><div class="line">    su nobody -c <span class="string">"<span class="variable">$&#123;DAEMON&#125;</span> -p <span class="variable">$&#123;PIDFILE&#125;</span> <span class="variable">$&#123;RRDCACHED_OPTIONS&#125;</span>"</span> -s /bin/sh</div><div class="line">    <span class="built_in">return</span> $?</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>After this change, reload and restart <code>rrdcached</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart rrdcached</div></pre></td></tr></table></figure></li><li><p>Restart rrdcached and check rrdcached process</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@db-master:/etc/init.d<span class="comment"># ps -ef|grep rrd</span></div><div class="line">nobody    6098     1  0 07:59 ?        00:00:00 /usr/bin/rrdcached -s www-data -m 664 -l unix:/tmp/rrdcached.sock -s nogroup -m 777 -P FLUSH,STATS,HELP,FETCH -l unix:/tmp/rrdcached.limited.sock -b /var/lib/ganglia/rrds -B -j /var/lib/rrdcached/journal/ -U nobody -p /tmp/rrdcached.pid</div></pre></td></tr></table></figure></li></ol><p>Ref: <a href="https://github.com/ganglia/monitor-core/wiki/Integrating-Ganglia-with-rrdcached" target="_blank" rel="noopener">https://github.com/ganglia/monitor-core/wiki/Integrating-Ganglia-with-rrdcached</a> </p><h1 id="Install-Ganglia-Monitor-Node">3. Install Ganglia Monitor Node</h1><h2 id="Installation-steps">3.1. Installation steps</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ganglia-monitor ganglia-monitor-python</div><div class="line">sudo systemctl start ganglia-monitor</div></pre></td></tr></table></figure><h2 id="Ganglia-Mode-Config-update">3.2. Ganglia Mode Config update</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/ganglia/gmond.conf</div></pre></td></tr></table></figure><p>Here is one sample, please read some comments below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div></pre></td><td class="code"><pre><div class="line">/* This configuration is as close to 2.5.x default behavior as possible</div><div class="line">   The values closely match ./gmond/metric.h definitions <span class="keyword">in</span> 2.5.x */</div><div class="line">globals &#123;</div><div class="line">  daemonize = yes</div><div class="line">  setuid = yes</div><div class="line">  user = ganglia</div><div class="line">  debug_level = 0</div><div class="line">  max_udp_msg_len = 1472</div><div class="line">  mute = no</div><div class="line">  deaf = no</div><div class="line">  allow_extra_data = yes</div><div class="line">  host_dmax = 86400 /*secs. Expires (removes from web interface) hosts <span class="keyword">in</span> 1 day */</div><div class="line">  host_tmax = 20 /*secs */</div><div class="line">  cleanup_threshold = 300 /*secs */</div><div class="line">  gexec = no</div><div class="line">  <span class="comment"># By default gmond will use reverse DNS resolution when displaying your hostname</span></div><div class="line">  <span class="comment"># Uncommeting following value will override that value.</span></div><div class="line">  override_hostname = <span class="string">"&#123;&#123; ansible_hostname &#125;&#125;"</span></div><div class="line">  <span class="comment"># If you are not using multicast this value should be set to something other than 0.</span></div><div class="line">  <span class="comment"># Otherwise if you restart aggregator gmond you will get empty graphs. 60 seconds is reasonable</span></div><div class="line">  send_metadata_interval = 60 /*secs */</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> * The cluster attributes specified will be used as part of the &lt;CLUSTER&gt;</div><div class="line"> * tag that will wrap all hosts collected by this instance.</div><div class="line"> */</div><div class="line">cluster &#123;</div><div class="line">  name = <span class="string">"my cluster"</span> /* this has to be matched with each gmond node and gmetad node.</div><div class="line">  owner = <span class="string">"unspecified"</span></div><div class="line">  latlong = <span class="string">"unspecified"</span></div><div class="line">  url = <span class="string">"unspecified"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">/* The host section describes attributes of the host, like the location */</div><div class="line">host &#123;</div><div class="line">  location = <span class="string">"unspecified"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Feel free to specify as many udp_send_channels as you like.  Gmond</div><div class="line">   used to only support having a single channel */</div><div class="line">udp_send_channel &#123;</div><div class="line">  <span class="comment">#bind_hostname = yes # Highly recommended, soon to be default.</span></div><div class="line">                       <span class="comment"># This option tells gmond to use a source address</span></div><div class="line">                       <span class="comment"># that resolves to the machine's hostname.  Without</span></div><div class="line">                       <span class="comment"># this, the metrics may appear to come from any</span></div><div class="line">                       <span class="comment"># interface and the DNS names associated with</span></div><div class="line">                       <span class="comment"># those IPs will be used to create the RRDs.</span></div><div class="line"><span class="comment">#  mcast_join = 239.2.11.71</span></div><div class="line">  host = xxx.xxx.xxx.xxx /* this must be your IP Address of Gmetad */</div><div class="line">  port = 8649</div><div class="line">  ttl = 1</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* You can specify as many udp_recv_channels as you like as well. */</div><div class="line"><span class="comment">#udp_recv_channel &#123;</span></div><div class="line"><span class="comment">#  mcast_join = 239.2.11.71</span></div><div class="line"><span class="comment">#  port = 8649</span></div><div class="line"><span class="comment">#  bind = 239.2.11.71</span></div><div class="line"><span class="comment">#  retry_bind = true</span></div><div class="line"><span class="comment">#  Size of the UDP buffer. If you are handling lots of metrics you really</span></div><div class="line"><span class="comment">#  should bump it up to e.g. 10MB or even higher.</span></div><div class="line"><span class="comment">#  buffer = 10485760</span></div><div class="line"><span class="comment">#&#125;</span></div><div class="line"></div><div class="line">/* You can specify as many tcp_accept_channels as you like to share</div><div class="line">   an xml description of the state of the cluster */</div><div class="line">tcp_accept_channel &#123; /* <span class="keyword">for</span> the node aggregation node, this needs to be open since gmetad will collect data from here, so locally. no need to open firewall rules. */</div><div class="line">  port = 8649</div><div class="line"><span class="comment">#  # If you want to gzip XML output</span></div><div class="line"><span class="comment">#  gzip_output = no</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Channel to receive sFlow datagrams */</div><div class="line"><span class="comment">#udp_recv_channel &#123;</span></div><div class="line"><span class="comment">#  port = 6343</span></div><div class="line"><span class="comment">#&#125;</span></div><div class="line"></div><div class="line">/* Optional sFlow settings */</div><div class="line"><span class="comment">#sflow &#123;</span></div><div class="line"><span class="comment"># udp_port = 6343</span></div><div class="line"><span class="comment"># accept_vm_metrics = yes</span></div><div class="line"><span class="comment"># accept_jvm_metrics = yes</span></div><div class="line"><span class="comment"># multiple_jvm_instances = no</span></div><div class="line"><span class="comment"># accept_http_metrics = yes</span></div><div class="line"><span class="comment"># multiple_http_instances = no</span></div><div class="line"><span class="comment"># accept_memcache_metrics = yes</span></div><div class="line"><span class="comment"># multiple_memcache_instances = no</span></div><div class="line"><span class="comment">#&#125;</span></div><div class="line"></div><div class="line">/* Each metrics module that is referenced by gmond must be specified and</div><div class="line">   loaded. If the module has been statically linked with gmond, it does</div><div class="line">   not require a load path. However all dynamically loadable modules must</div><div class="line">   include a load path. */</div><div class="line">modules &#123;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"core_metrics"</span></div><div class="line">  &#125;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"cpu_module"</span></div><div class="line">    path = <span class="string">"modcpu.so"</span></div><div class="line">  &#125;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"disk_module"</span></div><div class="line">    path = <span class="string">"moddisk.so"</span></div><div class="line">  &#125;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"load_module"</span></div><div class="line">    path = <span class="string">"modload.so"</span></div><div class="line">  &#125;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"mem_module"</span></div><div class="line">    path = <span class="string">"modmem.so"</span></div><div class="line">  &#125;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"net_module"</span></div><div class="line">    path = <span class="string">"modnet.so"</span></div><div class="line">  &#125;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"proc_module"</span></div><div class="line">    path = <span class="string">"modproc.so"</span></div><div class="line">  &#125;</div><div class="line">  module &#123;</div><div class="line">    name = <span class="string">"sys_module"</span></div><div class="line">    path = <span class="string">"modsys.so"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* The old internal 2.5.x metric array has been replaced by the following</div><div class="line">   collection_group directives.  What follows is the default behavior <span class="keyword">for</span></div><div class="line">   collecting and sending metrics that is as close to 2.5.x behavior as</div><div class="line">   possible. */</div><div class="line"></div><div class="line">/* This collection group will cause a heartbeat (or beacon) to be sent every</div><div class="line">   20 seconds.  In the heartbeat is the GMOND_STARTED data <span class="built_in">which</span> expresses</div><div class="line">   the age of the running gmond. */</div><div class="line">collection_group &#123;</div><div class="line">  collect_once = yes</div><div class="line">  time_threshold = 20</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"heartbeat"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* This collection group will send general info about this host*/</div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 1200</div><div class="line">  time_threshold = 1200</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_num"</span></div><div class="line">    title = <span class="string">"CPU Count"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_speed"</span></div><div class="line">    title = <span class="string">"CPU Speed"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"mem_total"</span></div><div class="line">    title = <span class="string">"Memory Total"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"swap_total"</span></div><div class="line">    title = <span class="string">"Swap Space Total"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"boottime"</span></div><div class="line">    title = <span class="string">"Last Boot Time"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"machine_type"</span></div><div class="line">    title = <span class="string">"Machine Type"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"os_name"</span></div><div class="line">    title = <span class="string">"Operating System"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"os_release"</span></div><div class="line">    title = <span class="string">"Operating System Release"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"location"</span></div><div class="line">    title = <span class="string">"Location"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* This collection group will send the status of gexecd <span class="keyword">for</span> this host</div><div class="line">   every 300 secs.*/</div><div class="line">/* Unlike 2.5.x the default behavior is to report gexecd OFF. */</div><div class="line">collection_group &#123;</div><div class="line">  collect_once = yes</div><div class="line">  time_threshold = 300</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"gexec"</span></div><div class="line">    title = <span class="string">"Gexec Status"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* This collection group will collect the CPU status info every 20 secs.</div><div class="line">   The time threshold is <span class="built_in">set</span> to 90 seconds.  In honesty, this</div><div class="line">   time_threshold could be <span class="built_in">set</span> significantly higher to reduce</div><div class="line">   unneccessary  network chatter. */</div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 20</div><div class="line">  time_threshold = 90</div><div class="line">  /* CPU status */</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_user"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"CPU User"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_system"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"CPU System"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_idle"</span></div><div class="line">    value_threshold = <span class="string">"5.0"</span></div><div class="line">    title = <span class="string">"CPU Idle"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_nice"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"CPU Nice"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_aidle"</span></div><div class="line">    value_threshold = <span class="string">"5.0"</span></div><div class="line">    title = <span class="string">"CPU aidle"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_wio"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"CPU wio"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_steal"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"CPU steal"</span></div><div class="line">  &#125;</div><div class="line">  /* The next two metrics are optional <span class="keyword">if</span> you want more detail...</div><div class="line">     ... since they are accounted <span class="keyword">for</span> <span class="keyword">in</span> cpu_system.</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_intr"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"CPU intr"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"cpu_sintr"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"CPU sintr"</span></div><div class="line">  &#125;</div><div class="line">  */</div><div class="line">&#125;</div><div class="line"></div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 20</div><div class="line">  time_threshold = 90</div><div class="line">  /* Load Averages */</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"load_one"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"One Minute Load Average"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"load_five"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"Five Minute Load Average"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"load_fifteen"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"Fifteen Minute Load Average"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* This group collects the number of running and total processes */</div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 80</div><div class="line">  time_threshold = 950</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"proc_run"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"Total Running Processes"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"proc_total"</span></div><div class="line">    value_threshold = <span class="string">"1.0"</span></div><div class="line">    title = <span class="string">"Total Processes"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* This collection group grabs the volatile memory metrics every 40 secs and</div><div class="line">   sends them at least every 180 secs.  This time_threshold can be increased</div><div class="line">   significantly to reduce unneeded network traffic. */</div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 40</div><div class="line">  time_threshold = 180</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"mem_free"</span></div><div class="line">    value_threshold = <span class="string">"1024.0"</span></div><div class="line">    title = <span class="string">"Free Memory"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"mem_shared"</span></div><div class="line">    value_threshold = <span class="string">"1024.0"</span></div><div class="line">    title = <span class="string">"Shared Memory"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"mem_buffers"</span></div><div class="line">    value_threshold = <span class="string">"1024.0"</span></div><div class="line">    title = <span class="string">"Memory Buffers"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"mem_cached"</span></div><div class="line">    value_threshold = <span class="string">"1024.0"</span></div><div class="line">    title = <span class="string">"Cached Memory"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"swap_free"</span></div><div class="line">    value_threshold = <span class="string">"1024.0"</span></div><div class="line">    title = <span class="string">"Free Swap Space"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 40</div><div class="line">  time_threshold = 300</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"bytes_out"</span></div><div class="line">    value_threshold = 4096</div><div class="line">    title = <span class="string">"Bytes Sent"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"bytes_in"</span></div><div class="line">    value_threshold = 4096</div><div class="line">    title = <span class="string">"Bytes Received"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"pkts_in"</span></div><div class="line">    value_threshold = 256</div><div class="line">    title = <span class="string">"Packets Received"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"pkts_out"</span></div><div class="line">    value_threshold = 256</div><div class="line">    title = <span class="string">"Packets Sent"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* Different than 2.5.x default since the old config made no sense */</div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 1800</div><div class="line">  time_threshold = 3600</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"disk_total"</span></div><div class="line">    value_threshold = 1.0</div><div class="line">    title = <span class="string">"Total Disk Space"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">collection_group &#123;</div><div class="line">  collect_every = 40</div><div class="line">  time_threshold = 180</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"disk_free"</span></div><div class="line">    value_threshold = 1.0</div><div class="line">    title = <span class="string">"Disk Space Available"</span></div><div class="line">  &#125;</div><div class="line">  metric &#123;</div><div class="line">    name = <span class="string">"part_max_used"</span></div><div class="line">    value_threshold = 1.0</div><div class="line">    title = <span class="string">"Maximum Disk Space Used"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">include (<span class="string">"/etc/ganglia/conf.d/*.conf"</span>)</div></pre></td></tr></table></figure></p><p>So, in a summary of this gmond conf:</p><ul><li><code>globals</code> section defines how long we retrieve the node info and remove the dead node. </li><li><code>udp_send_channel</code> section defines where to send the metrics</li><li><code>udp_receive_channel</code> section has to be open, if that’s the <code>gmetad</code> node, also, firewall of <code>udp/8649</code> needs to be open</li><li><code>tcp_receive_channel</code> section needs to be open, if that’s the aggreation node, which means <code>gmetad</code> fetch the <code>datasource</code> from this <code>node:8649</code> using <code>TCP</code> channel </li></ul><h1 id="Restart-the-services">4. Restart the services</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># restart gmond</span></div><div class="line">/etc/init.d/ganglia-monitor restart</div><div class="line"><span class="comment"># restart gmetad</span></div><div class="line">/etc/init.d/gmetad restart</div><div class="line"><span class="comment"># restart rrdcached</span></div><div class="line">/etc/init.d/rrdcached restart</div><div class="line"><span class="comment"># restart ganglia-web</span></div><div class="line">/etc/init.d/apache2 restart</div><div class="line"><span class="comment"># Enable all services</span></div><div class="line">systemctl <span class="built_in">enable</span> ganglia-monitor gmetad rrdcached apache2</div></pre></td></tr></table></figure><h1 id="Customized-Metrics-Monitoring">5. Customized Metrics Monitoring</h1><h2 id="Port-Metrics-to-Graphite">5.1. Port Metrics to Graphite</h2><p>So we can use Pager tool like <a href="http://cabotapp.com/" target="_blank" rel="noopener">cabot</a> to alert in using Slack/Email/Twillo, etc. </p><p>Won’t talk much about how to setup Cabot, but only port to to Graphite. As long as you already have it displayed into Graphite, you are good to use Cabot then. </p><p>The basic usage to send metrics to Graphite is<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GRAPHITE_HOST=<span class="string">"xxx.xxx.xxx.xxx"</span></div><div class="line">GRAPHITE_PORT=<span class="string">"2003"</span></div><div class="line">now=`date +%s`</div><div class="line">key=<span class="string">"foo.bar"</span></div><div class="line">value=<span class="string">"1.3"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$key</span> <span class="variable">$value</span> <span class="variable">$now</span>"</span> | nc <span class="variable">$GRAPHITE_HOST</span> <span class="variable">$GRAPHITE_PORT</span></div></pre></td></tr></table></figure></p><p>Then the <code>foo.bar</code> value is <code>1.3</code> in ganglia dashboard.</p><p>Next is the one used to collect <code>disk_free</code> disk left for all nodes.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">set</span> -e</div><div class="line"></div><div class="line">GRAPHITE_HOST=<span class="string">"xxx.xxx.xxx.xxx"</span></div><div class="line">GRAPHITE_PORT=<span class="string">"2003"</span></div><div class="line">KEY_PREFIX=<span class="string">"ganglia.servers."</span></div><div class="line">RRD_BASE=<span class="string">'/var/lib/ganglia/rrds/my cluster'</span></div><div class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$RRD_BASE</span>"</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">collect_rrd</span></span>() &#123;</div><div class="line">    rrd=<span class="variable">$1</span></div><div class="line">    update_date=$(rrdtool lastupdate <span class="variable">$rrd</span> |tail -1 |cut -d <span class="string">':'</span> -f1)</div><div class="line">    now=`date +%s`</div><div class="line">    delta=$((now-update_date))</div><div class="line">    <span class="keyword">if</span> [ <span class="variable">$delta</span> -lt 20 ]; <span class="keyword">then</span></div><div class="line">        <span class="comment"># got the data </span></div><div class="line">        key=$(<span class="built_in">echo</span> <span class="variable">$rrd</span>|sed -E <span class="string">'s/\.rrd//g'</span>|sed -E <span class="string">'s/\.\///g'</span>|tr <span class="string">'/'</span> <span class="string">'.'</span> )</div><div class="line">        key=<span class="string">"<span class="variable">$KEY_PREFIX</span><span class="variable">$key</span>"</span></div><div class="line">        value=$(rrdtool lastupdate <span class="variable">$rrd</span> |tail -1 |cut -d <span class="string">':'</span> -f2)</div><div class="line"><span class="comment">#        echo "key:$key, value:$value, ts: $update_date"</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$key</span> <span class="variable">$value</span> <span class="variable">$update_date</span>"</span> | nc <span class="variable">$GRAPHITE_HOST</span> <span class="variable">$GRAPHITE_PORT</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">disk_free_monitor</span></span>() &#123;</div><div class="line">    <span class="keyword">for</span> rrd <span class="keyword">in</span> `find . |grep disk_free_abs|grep -vE <span class="string">'(__Sum|token|run|dev|cgroup|var_lib_docker)'</span>`; <span class="keyword">do</span></div><div class="line">        collect_rrd <span class="variable">$rrd</span></div><div class="line">    <span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span>;</div><div class="line"><span class="keyword">do</span></div><div class="line">    disk_free_monitor</div><div class="line"><span class="comment">#     echo "sleep 15 seconds..."</span></div><div class="line">    sleep 15</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p><p>You probably need to add this <code>monitor.sh</code> into crontab so that it can be auto start after rebooting the machine.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># crontab -e</span></div><div class="line">@reboot  /root/monitor.sh &gt; /dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure></p><h2 id="Create-dashboard-graph-from-Graphite">5.2. Create dashboard graph from Graphite</h2><p>Finally I used<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">legendValue(removeAboveValue(ganglia.servers.*.disk_free_absolute_*,6),&quot;last&quot;)</div></pre></td></tr></table></figure></p><p>to create the graph from graph composer of Graphite. </p><center><img src="/2017/12/18/Install-Ganglia-Start/graph.png" title="Disk Free Graph"></center><p>The most <code>tricky</code> part is the functions that I got to use: </p><ul><li><code>removeAboveValue</code>: if some value are above the value, just remove the line from graph, because we only care about those disks that has lower value  </li><li><code>legendValue</code>: put the value into part of the legend, can quickly locate the value if some value is below a threshold</li></ul><center><img src="/2017/12/18/Install-Ganglia-Start/remove_above_value.png" title="Remove Above Value Function"></center><center><img src="/2017/12/18/Install-Ganglia-Start/lengend_value.png" title="Add Value into Legend"></center><p>Please try different functions as much as possible to understand what the underlying meaning.</p><h2 id="Add-Graphite-Check-from-Cabot">5.3. Add Graphite Check from Cabot</h2><p>Because <code>Cabot</code> has a strong connection to <code>Graphite</code>, so that’s why we have to put the metrics into <code>Graphite</code> firstly. Only by doing that, we are able to do the check from Cabot.</p><center><img src="/2017/12/18/Install-Ganglia-Start/cabot_disk_free.png" title="Cabot Disk Free Check"></center><p>References:</p><ul><li><a href="https://github.com/ganglia/monitor-core/wiki/Ganglia-Quick-Start" target="_blank" rel="noopener">Ganglia Quick Start</a></li><li><a href="https://github.com/ganglia/monitor-core/wiki/Ganglia-Quick-Start#introduction" target="_blank" rel="noopener">Ganglia Deaf and Mute</a></li><li><a href="https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/" target="_blank" rel="noopener">How to Install and Configure Ganglia Monitor on Ubuntu 16.04</a> </li><li><a href="https://adamo.wordpress.com/2015/05/27/gmond-occupying-100-of-the-cpu/" target="_blank" rel="noopener">Gmond 100% CPU usage</a>, just use <code>deaf=yes</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have been used many monitoring tools for over 4 years, but there has never been a tool which is so strongly strike my heart and meet my needs in the just right way. Most of them are focusing more on the so-called extensible back-end storage, but not many of them has really meet the requirement of monitoring out of box. Of course, that could be the secret of their business money making. &lt;/p&gt;
&lt;p&gt;Anyway, most of this article follows &lt;a href=&quot;https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/&lt;/a&gt; , just to give myself a quick notes to apply.&lt;/p&gt;
&lt;p&gt;Long time that no pictures, I love pictures. Here is one for you to enjoy: &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/12/18/Install-Ganglia-Start/Ganglia_my_cluster_Report.png&quot; title=&quot;My Cluster Overview Performance&quot;&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="Monitor" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/"/>
    
      <category term="Ganglia" scheme="https://morganwu277.github.io/categories/Tool-Skill/Monitor/Ganglia/"/>
    
    
      <category term="Gmetad" scheme="https://morganwu277.github.io/tags/Gmetad/"/>
    
      <category term="Gmond" scheme="https://morganwu277.github.io/tags/Gmond/"/>
    
      <category term="Ganlgia Monitor" scheme="https://morganwu277.github.io/tags/Ganlgia-Monitor/"/>
    
      <category term="Graphite" scheme="https://morganwu277.github.io/tags/Graphite/"/>
    
      <category term="Metrics" scheme="https://morganwu277.github.io/tags/Metrics/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB MEM Management</title>
    <link href="https://morganwu277.github.io/2017/11/24/MongoDB-MEM-Management/"/>
    <id>https://morganwu277.github.io/2017/11/24/MongoDB-MEM-Management/</id>
    <published>2017-11-25T00:18:18.000Z</published>
    <updated>2017-12-22T17:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>NEVER USE MONGODB ON PRODUCTION. </p><p>Here the guy also meet my problem: <a href="https://news.ycombinator.com/item?id=5704572" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=5704572</a> </p><p>This post is about MongoDB memory management mechanism.<br>All it’s using is Page Cache of System.</p><p>This is a good experience report: <a href="https://speakerdeck.com/mitsuhiko/a-year-of-mongodb" target="_blank" rel="noopener">https://speakerdeck.com/mitsuhiko/a-year-of-mongodb</a></p><p>This URL gives you more details<br><a href="https://www.mongodb.com/presentations/mongodb-memory-management-demystified" target="_blank" rel="noopener">https://www.mongodb.com/presentations/mongodb-memory-management-demystified</a></p><p>OK, this post is just for me to check commands to use, to management MongoDB. </p><a id="more"></a><h1 id="connect">1. connect</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo 127.0.0.1:20001/<span class="variable">$&#123;DB_NAME&#125;</span> -u <span class="variable">$&#123;USER_NAME&#125;</span> -p <span class="variable">$&#123;PASSWORD&#125;</span></div></pre></td></tr></table></figure><h1 id="db-working-set">2. db working set</h1><p>Use this to determine how much memory do you need of your working set under your current database.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt; &gt; db.runCommand(&#123;serverStatus: 1, workingSet: 1&#125;).tcmalloc.formattedString</div><div class="line">------------------------------------------------</div><div class="line">MALLOC:     7614540648 ( 7261.8 MiB) Bytes <span class="keyword">in</span> use by application</div><div class="line">MALLOC: +    236527616 (  225.6 MiB) Bytes <span class="keyword">in</span> page heap freelist</div><div class="line">MALLOC: +    657428112 (  627.0 MiB) Bytes <span class="keyword">in</span> central cache freelist</div><div class="line">MALLOC: +     53399376 (   50.9 MiB) Bytes <span class="keyword">in</span> transfer cache freelist</div><div class="line">MALLOC: +     17635000 (   16.8 MiB) Bytes <span class="keyword">in</span> thread cache freelists</div><div class="line">MALLOC: +     27570336 (   26.3 MiB) Bytes <span class="keyword">in</span> malloc metadata</div><div class="line">MALLOC:   ------------</div><div class="line">MALLOC: =   8607101088 ( 8208.4 MiB) Actual memory used (physical + swap)</div><div class="line">MALLOC: +    603160576 (  575.2 MiB) Bytes released to OS (aka unmapped)</div><div class="line">MALLOC:   ------------</div><div class="line">MALLOC: =   9210261664 ( 8783.6 MiB) Virtual address space used</div><div class="line">MALLOC:</div><div class="line">MALLOC:         326169              Spans <span class="keyword">in</span> use</div><div class="line">MALLOC:             56              Thread heaps <span class="keyword">in</span> use</div><div class="line">MALLOC:           8192              Tcmalloc page size</div><div class="line">------------------------------------------------</div><div class="line">Call ReleaseFreeMemory() to release freelist memory to the OS (via madvise()).</div><div class="line">Bytes released to the OS take up virtual address space but no physical memory.</div></pre></td></tr></table></figure></p><h1 id="db-stats">3. db.stats()</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; db.<span class="function"><span class="title">stats</span></span>()</div><div class="line">&#123;</div><div class="line"><span class="string">"db"</span> : <span class="string">"xxxx"</span>, // this has been covered due to classification info </div><div class="line"><span class="string">"collections"</span> : 4,</div><div class="line"><span class="string">"objects"</span> : 39817003,</div><div class="line"><span class="string">"avgObjSize"</span> : 113.20676571262784,</div><div class="line"><span class="string">"dataSize"</span> : 4507554130,</div><div class="line"><span class="string">"storageSize"</span> : 2112126976,</div><div class="line"><span class="string">"numExtents"</span> : 0,</div><div class="line"><span class="string">"indexes"</span> : 12,</div><div class="line"><span class="string">"indexSize"</span> : 2265329664,</div><div class="line"><span class="string">"ok"</span> : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NEVER USE MONGODB ON PRODUCTION. &lt;/p&gt;
&lt;p&gt;Here the guy also meet my problem: &lt;a href=&quot;https://news.ycombinator.com/item?id=5704572&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://news.ycombinator.com/item?id=5704572&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;This post is about MongoDB memory management mechanism.&lt;br&gt;All it’s using is Page Cache of System.&lt;/p&gt;
&lt;p&gt;This is a good experience report: &lt;a href=&quot;https://speakerdeck.com/mitsuhiko/a-year-of-mongodb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://speakerdeck.com/mitsuhiko/a-year-of-mongodb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This URL gives you more details&lt;br&gt;&lt;a href=&quot;https://www.mongodb.com/presentations/mongodb-memory-management-demystified&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.mongodb.com/presentations/mongodb-memory-management-demystified&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OK, this post is just for me to check commands to use, to management MongoDB. &lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://morganwu277.github.io/categories/Database/"/>
    
      <category term="NoSQL" scheme="https://morganwu277.github.io/categories/Database/NoSQL/"/>
    
      <category term="Document" scheme="https://morganwu277.github.io/categories/Database/NoSQL/Document/"/>
    
    
      <category term="MongoDB" scheme="https://morganwu277.github.io/tags/MongoDB/"/>
    
      <category term="Memory" scheme="https://morganwu277.github.io/tags/Memory/"/>
    
      <category term="PageCache" scheme="https://morganwu277.github.io/tags/PageCache/"/>
    
  </entry>
  
  <entry>
    <title>CloudFlare doesn&#39;t support ETag</title>
    <link href="https://morganwu277.github.io/2017/10/20/CloudFlare-doesn-t-support-ETag/"/>
    <id>https://morganwu277.github.io/2017/10/20/CloudFlare-doesn-t-support-ETag/</id>
    <published>2017-10-20T22:27:03.000Z</published>
    <updated>2017-11-01T04:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Because only Nignx &gt;= 1.3.3 have etag options.<br>How stupid of this blog….<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Because only Nignx &amp;gt;= 1.3.3 have etag options.&lt;br&gt;How stupid of this blog….&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Nginx" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/"/>
    
      <category term="Cache" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Nginx/Cache/"/>
    
    
      <category term="Nginx" scheme="https://morganwu277.github.io/tags/Nginx/"/>
    
      <category term="Cache" scheme="https://morganwu277.github.io/tags/Cache/"/>
    
      <category term="CloudFlare" scheme="https://morganwu277.github.io/tags/CloudFlare/"/>
    
  </entry>
  
  <entry>
    <title>My conf</title>
    <link href="https://morganwu277.github.io/2017/10/19/My-Fluentd-conf/"/>
    <id>https://morganwu277.github.io/2017/10/19/My-Fluentd-conf/</id>
    <published>2017-10-19T22:56:34.000Z</published>
    <updated>2017-11-17T03:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Personal material, please leave. "> <label for="pass"> Personal material, please leave. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Personal material, please leave.
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Logging" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Logging/"/>
    
    
      <category term="Fluentd" scheme="https://morganwu277.github.io/tags/Fluentd/"/>
    
  </entry>
  
  <entry>
    <title>Setup ElasticSearch, Fluentd, Kibana in Kubernetes</title>
    <link href="https://morganwu277.github.io/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/"/>
    <id>https://morganwu277.github.io/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/</id>
    <published>2017-10-18T17:05:32.000Z</published>
    <updated>2018-03-06T09:35:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Just a post about what we need to setup the <a href="https://www.elastic.co/" target="_blank" rel="noopener">ElasticSearch</a>/<a href="https://www.fluentd.org/" target="_blank" rel="noopener">Fluentd</a>/<a href="https://www.elastic.co/products/kibana" target="_blank" rel="noopener">Kibana</a>. For detailed and how do they work, please reference the official site.</p><p>Here is my final Kibana screenshot:</p><center><img src="/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/Kibana.png" title="Kibana Logging"></center><p>Beautiful, isn’t it?</p><p>This post will setup EFK tool chain in Kubernets. </p><a id="more"></a><h1 id="Setup-ElasticSearch-in-Kubernets">1. Setup ElasticSearch in Kubernets</h1><h2 id="Setup-ElasticSearch-ReplicationController">1.1. Setup ElasticSearch ReplicationController</h2><p>Here is ElasticSearch ReplicationController yaml, please note the volume is using <code>hostPath</code> because I’m using <code>nodeSelector</code> to deploy the ElasticSearch, which makes it sticky to the specific logging dedicated node.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">elasticsearch-logging-v1</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">    version:</span> <span class="string">v1</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  replicas:</span> <span class="number">2</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">    version:</span> <span class="string">v1</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">        version:</span> <span class="string">v1</span></div><div class="line">        <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      nodeSelector:</span></div><div class="line"><span class="attr">        logging:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - image:</span> <span class="string">gcr.io/google_containers/elasticsearch:v2.4.1</span></div><div class="line"><span class="attr">        name:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">1000</span><span class="string">m</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">        env:</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"ES_MAX_MEM"</span></div><div class="line"><span class="attr">            value:</span> <span class="string">"1500m"</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"ES_MIN_MEM"</span></div><div class="line"><span class="attr">            value:</span> <span class="string">"500m"</span></div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">9200</span></div><div class="line"><span class="attr">          name:</span> <span class="string">db</span></div><div class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">9300</span></div><div class="line"><span class="attr">          name:</span> <span class="string">transport</span></div><div class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">es-persistent-storage</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/data</span></div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">es-persistent-storage</span></div><div class="line"><span class="attr">        hostPath:</span> </div><div class="line"><span class="attr">          path:</span> <span class="string">/mnt/volume-sfo2-03/logging_data</span></div></pre></td></tr></table></figure></p><h2 id="Setup-ElasticSearch-Service">1.2. Setup ElasticSearch Service</h2><p>It’s the plain service yaml file in Kubernetes.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">Service</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">elasticsearch-logging</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line">    <span class="string">kubernetes.io/name:</span> <span class="string">"Elasticsearch"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="attr">  - port:</span> <span class="number">9200</span></div><div class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">    targetPort:</span> <span class="string">db</span></div><div class="line"><span class="attr">    nodePort:</span> <span class="number">31001</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">elasticsearch-logging</span></div></pre></td></tr></table></figure></p><h2 id="Accessing-ElasticSearch-Request">1.3. Accessing ElasticSearch Request</h2><p>Just for test, use curl command to issue a request:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># curl 127.0.0.1:31001</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span> : <span class="string">"Ogress"</span>,</div><div class="line">  <span class="string">"cluster_name"</span> : <span class="string">"kubernetes-logging"</span>,</div><div class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"fOjPK7t2TqeR-GlhqGhzag"</span>,</div><div class="line">  <span class="string">"version"</span> : &#123;</div><div class="line">    <span class="string">"number"</span> : <span class="string">"2.4.1"</span>,</div><div class="line">    <span class="string">"build_hash"</span> : <span class="string">"c67dc32e24162035d18d6fe1e952c4cbcbe79d16"</span>,</div><div class="line">    <span class="string">"build_timestamp"</span> : <span class="string">"2016-09-27T18:57:55Z"</span>,</div><div class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="string">"lucene_version"</span> : <span class="string">"5.5.2"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="Setup-Kibana-in-Kubernets">2. Setup Kibana in Kubernets</h1><h2 id="Setup-Kibana-Deployment">2.1. Setup Kibana Deployment</h2><p>Here is Kibana Deployment yaml file, we also make it sticky to logging node with <code>nodeSelector</code>. Make sure <code>KIBANA_BASE_URL</code> environment value is set to emtpy if you’re going to use <code>NodePort</code> to access Kibana. </p><p>Also, <code>Kibana</code> need to talk to <code>ElasticSearch</code> by using <code>http://elasticsearch-logging:9200</code>, so please make sure <a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns" target="_blank" rel="noopener"><code>kube-dns</code></a> works correctly before setting up the Kibana Service. </p><p>I will write another post about how <code>kube-dns</code> works. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  replicas:</span> <span class="number">1</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    matchLabels:</span></div><div class="line"><span class="attr">      k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      nodeSelector:</span></div><div class="line"><span class="attr">        logging:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">        image:</span> <span class="string">gcr.io/google_containers/kibana:v4.6.1</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">        env:</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"NODE_OPTIONS"</span> <span class="comment"># use this to control Kibana memory usage, and promote Kibana speed</span></div><div class="line"><span class="attr">            value:</span> <span class="string">"--max-old-space-size=100"</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"ELASTICSEARCH_URL"</span></div><div class="line"><span class="attr">            value:</span> <span class="string">"http://elasticsearch-logging:9200"</span></div><div class="line"><span class="attr">          - name:</span> <span class="string">"KIBANA_BASE_URL"</span></div><div class="line">            <span class="comment">#value: "/api/v1/proxy/namespaces/kube-system/services/kibana-logging"</span></div><div class="line"><span class="attr">            value:</span> <span class="string">""</span></div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="attr">        - containerPort:</span> <span class="number">5601</span></div><div class="line"><span class="attr">          name:</span> <span class="string">ui</span></div><div class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></div></pre></td></tr></table></figure><h2 id="Setup-Kibana-Service">2.2. Setup Kibana Service</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">Service</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">kibana-logging</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">kibana-logging</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line">    <span class="string">kubernetes.io/name:</span> <span class="string">"Kibana"</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="attr">  - port:</span> <span class="number">5601</span></div><div class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></div><div class="line"><span class="attr">    targetPort:</span> <span class="string">ui</span></div><div class="line"><span class="attr">    nodePort:</span> <span class="number">31000</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">kibana-logging</span></div></pre></td></tr></table></figure><h2 id="Accessing-Kibana-Service">2.3. Accessing Kibana Service</h2><p>Just for test, use curl command to issue a request:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># curl 127.0.0.1:31000</span></div><div class="line">&lt;script&gt;var hashRoute = <span class="string">'/app/kibana'</span>;</div><div class="line">var defaultRoute = <span class="string">'/app/kibana'</span>;</div><div class="line"></div><div class="line">var <span class="built_in">hash</span> = window.location.hash;</div><div class="line"><span class="keyword">if</span> (hash.length) &#123;</div><div class="line">  window.location = hashRoute + <span class="built_in">hash</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  window.location = defaultRoute;</div><div class="line">&#125;&lt;/script&gt;</div></pre></td></tr></table></figure></p><h1 id="Setup-Fluentd">3. Setup Fluentd</h1><p>This is the <code>MOST</code> complicated part.</p><p>Before setting up fluentd, we need to test fluentd.conf locally. You can setup fluentd in a VM to test.</p><h2 id="Install-Fluentd-Locally-or-in-a-VM">3.1. Install Fluentd Locally or in a VM</h2><p>Follow <a href="https://docs.fluentd.org/v0.12/articles/install-by-deb" target="_blank" rel="noopener">Installation Notes</a> here. </p><p>Please make sure you install the latest version, which is <code>v0.12.40</code>. </p><p>If you can’t get version of <code>v0.12.40</code> after your installation, please use <code>embeded gem</code> to install. Follow this <a href="https://docs.fluentd.org/v0.12/articles/install-by-gem" target="_blank" rel="noopener">post</a>. </p><p>Here is what I do have locally:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">morganwu@localhost:~$ /opt/td-agent/embedded/bin/gem list fluentd</div><div class="line"></div><div class="line">*** LOCAL GEMS ***</div><div class="line"></div><div class="line">fluentd (0.12.40)</div><div class="line">fluentd-ui (0.4.4)</div></pre></td></tr></table></figure></p><h2 id="Install-Fluentd-ElasticSearch-Plugin">3.2. Install Fluentd ElasticSearch Plugin</h2><p>Use the embedded gem to install <a href="https://github.com/uken/fluent-plugin-elasticsearch" target="_blank" rel="noopener"><code>fluent-plugin-elasticsearch</code></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install build-essential</div><div class="line">/opt/td-agent/embedded/bin/gem install fluent-plugin-elasticsearch -v 1.10.2</div></pre></td></tr></table></figure></p><h2 id="Workout-the-fluentd-conf-little-by-little">3.3. Workout the fluentd.conf little by little</h2><ol><li>Use <a href="http://rubular.com/" target="_blank" rel="noopener">a Ruby regular expression editor</a> for testing the reqular expression. </li><li>Use <a href="http://www.foragoodstrftime.com/" target="_blank" rel="noopener">For a Good Strftime</a> to test the time format. </li><li>Use <a href="https://docs.fluentd.org/v0.12/articles/filter_grep" target="_blank" rel="noopener">Fluetnd Documents</a> carefully. </li><li>Use <code>stdout</code> plugin to debug Fluentd conf. </li></ol><h2 id="Create-ConfigMap-in-Kubernetes">3.4. Create ConfigMap in Kubernetes</h2><p>Assume you do have a <code>fluentd.conf</code> now, let’s create one <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configmap/" target="_blank" rel="noopener">config map</a> for fluentd to use.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system create cm cm-fluentd-conf --from-file=td-agent.conf=./cm-fluentd-conf</span></div><div class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system get cm</span></div><div class="line">NAME              DATA      AGE</div><div class="line">cm-fluentd-conf   1         6d</div></pre></td></tr></table></figure></p><h2 id="Setup-Fluentd-DaemonSet">3.5. Setup Fluentd DaemonSet</h2><p>Please note, we are mounting the <code>cm-fluentd-conf</code> volume to <code>/etc/fluent/config.d</code> directory inside the container. </p><p>When we create the config map above, we specify <code>td-agent.conf=./cm-fluentd-conf</code>, which means inside the container, there will be a file <code>td-agent.conf</code> and it’s content comes from <code>./cm-fluentd-conf</code> provided above to create the config map. </p><p>Please note, it has the permission to read every logs in the <code>/var/log</code> directory. </p><p>To make it as <a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="noopener"><code>DaemonSet</code></a> to make sure it’s running on each server node. </p><p>We should make sure the <code>buffer_chunk_limit</code>*<code>buffer_chunk_size</code>(<a href="https://docs.fluentd.org/v0.12/articles/buffer-plugin-overview" target="_blank" rel="noopener">buffer-plugin-overview</a>) won’t exceed the limits of memory specified in the yaml file next.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></div><div class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">fluentd-es-v2.0.1</span></div><div class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></div><div class="line"><span class="attr">  labels:</span></div><div class="line"><span class="attr">    k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">    version:</span> <span class="string">v2.0.1</span></div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        k8s-app:</span> <span class="string">fluentd-es</span></div><div class="line">        <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></div><div class="line"><span class="attr">        version:</span> <span class="string">v2.0.1</span></div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">fluentd-es</span></div><div class="line"><span class="attr">        image:</span> <span class="string">gcr.io/google_containers/fluentd-elasticsearch:v2.0.1</span></div><div class="line"><span class="attr">        env:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">FLUENTD_ARGS</span></div><div class="line"><span class="attr">          value:</span> <span class="bullet">--no-supervisor</span> <span class="bullet">-q</span></div><div class="line"><span class="attr">        resources:</span></div><div class="line"><span class="attr">          limits:</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">512</span><span class="string">Mi</span></div><div class="line"><span class="attr">          requests:</span></div><div class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></div><div class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></div><div class="line"><span class="attr">        volumeMounts:</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">cm-fluentd-conf</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/fluent/config.d</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">        - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">          mountPath:</span> <span class="string">/var/lib/docker/containers</span></div><div class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></div><div class="line"><span class="attr">      volumes:</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">cm-fluentd-conf</span></div><div class="line"><span class="attr">        configMap:</span> </div><div class="line"><span class="attr">          name:</span> <span class="string">cm-fluentd-conf</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlog</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/log</span></div><div class="line"><span class="attr">      - name:</span> <span class="string">varlibdockercontainers</span></div><div class="line"><span class="attr">        hostPath:</span></div><div class="line"><span class="attr">          path:</span> <span class="string">/var/lib/docker/containers</span></div></pre></td></tr></table></figure></p><h1 id="Overview-the-deployed-components-in-Kubernetes">4. Overview the deployed components in Kubernetes</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[root@kubernetes-master logging]<span class="comment"># kubectl -n kube-system get rc,svc,cm,po</span></div><div class="line">NAME                          DESIRED   CURRENT   READY     AGE</div><div class="line">rc/elasticsearch-logging-v1   2         2         2         17d</div><div class="line"></div><div class="line">NAME                        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</div><div class="line">svc/elasticsearch-logging   10.254.59.190    &lt;nodes&gt;       9200:31001/TCP   20d</div><div class="line">svc/kibana-logging          10.254.148.174   &lt;nodes&gt;       5601:31000/TCP   25d</div><div class="line">svc/kube-dns                10.254.0.10      &lt;none&gt;        53/UDP,53/TCP    25d</div><div class="line">svc/kubernetes-dashboard    10.254.151.70    &lt;none&gt;        9090/TCP         26d</div><div class="line"></div><div class="line">NAME                 DATA      AGE</div><div class="line">cm/cm-fluentd-conf   1         6d</div><div class="line"></div><div class="line">NAME                                       READY     STATUS    RESTARTS   AGE</div><div class="line">po/elasticsearch-logging-v1-19r6r          1/1       Running   0          17d</div><div class="line">po/elasticsearch-logging-v1-7xcq4          1/1       Running   1          17d</div><div class="line">po/fluentd-es-v2.0.1-79350                 1/1       Running   0          6d</div><div class="line">po/fluentd-es-v2.0.1-kbhq2                 1/1       Running   0          6d</div><div class="line">po/fluentd-es-v2.0.1-rbmsv                 1/1       Running   0          6d</div><div class="line">po/fluentd-es-v2.0.1-rxvg2                 1/1       Running   4          6d</div><div class="line">po/fluentd-es-v2.0.1-sb8gc                 1/1       Running   1          6d</div><div class="line">po/kibana-logging-1532071719-69rd2         1/1       Running   0          3d</div><div class="line">po/kube-dns-v10-244463722-vmnr2            3/3       Running   0          7d</div><div class="line">po/kubernetes-dashboard-1786549131-m9r9r   1/1       Running   4          17d</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just a post about what we need to setup the &lt;a href=&quot;https://www.elastic.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ElasticSearch&lt;/a&gt;/&lt;a href=&quot;https://www.fluentd.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fluentd&lt;/a&gt;/&lt;a href=&quot;https://www.elastic.co/products/kibana&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kibana&lt;/a&gt;. For detailed and how do they work, please reference the official site.&lt;/p&gt;
&lt;p&gt;Here is my final Kibana screenshot:&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/10/18/Setup-ElasticSearch-Fluentd-Kibana/Kibana.png&quot; title=&quot;Kibana Logging&quot;&gt;&lt;/center&gt;

&lt;p&gt;Beautiful, isn’t it?&lt;/p&gt;
&lt;p&gt;This post will setup EFK tool chain in Kubernets. &lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Logging" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Logging/"/>
    
    
      <category term="Fluentd" scheme="https://morganwu277.github.io/tags/Fluentd/"/>
    
      <category term="ElasticSearch" scheme="https://morganwu277.github.io/tags/ElasticSearch/"/>
    
      <category term="Kibana" scheme="https://morganwu277.github.io/tags/Kibana/"/>
    
      <category term="Kubernetes" scheme="https://morganwu277.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>工作の思考</title>
    <link href="https://morganwu277.github.io/2017/07/16/%E5%B7%A5%E4%BD%9C%E3%81%AE%E6%80%9D%E8%80%83/"/>
    <id>https://morganwu277.github.io/2017/07/16/工作の思考/</id>
    <published>2017-07-16T18:52:18.000Z</published>
    <updated>2017-10-19T22:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" No pain, no gain. "> <label for="pass"> No pain, no gain. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+tNshhODwXpUqTfIz/Dp5ZLbqjkQjyDToPtbmXILheASXn9k9A2cZ7XeNjKOgUgYoADcStIvI0oMv29jFI2jaDvmQBTuVfGbpN+K8aeYooiQOHmMJKJ/4hgSmuUYKgcQeWcDr2oLBdvthKgpahXkUIw0MEGPDU6GOhjbIVdsUtu1gXHW6oH9882dKFiOqPPYhdwO7IHsKWXQlgYtqvlvdU7LU5jZPv7dmFHqDdgsYhSmCkhgpNTCpU59X+HG2xbNCtchqmyN5HQMX+P5cNzqU4frbcaEtjuudjit0GCi5VThMHuZUOXRrQIebqpf5kGmgqD40QsumH7t84ZhY/4qUz+9mxQ+UqkpnGnvKhaVYZ9o4t6SBNH3gdFJkokjoWNwZb8Kb6AqPeP5XT/5TPMn9Tygbwo6f5SPOqm3qfHEzwx2Mwb1yQEGxZR+nao+ML2CbOL5dbBhAPiPkDFhjf1XOj7y3wHe2bZQ8jO0djnUTO7tprWTJC3sQtVefx388qM3Zd1gp0oZxwHsv8vc9DEiBqeTo9YsE9bfHVlR9jPXnsOVPR9SOb0w/eALjpygKIFnwe0vQFwKkJJ8MffvuMvtCTPalIRQWtgcMU4A7Pj5Flev88cs5kW9Xmuv6bIWa5A8EuioIYboSVo4I+1wTgqvHjmGqgBpQ5F1mBG4qR8wcH7WlC6BWShcldCCaJh7u+fMphouMcZOzc5oJoipFV58nF15+JCcgxBg/OKXzBVKxAumxBuori7UVNcDMeItTxpn73Zfeu8SmcQJ8X3n1SmrIIvbQ2miEkNB7aedPb0QQq2kh4zMLIwBWegpFdihF0tcAxShmX9FNOa/l3O+fUgzR+seEJCgMzrIb8SjUOBGoWRP08N0Nm5jl9YpikPB5Gtfk/GKNHCsQkKQK4GkOisdEw6pFMzObRl7+04CtGiF2Vis4s8p8Fn/j6dWFYYqdADnujY/NDYs7Eb+sALVch4VrgVyFroirJE60iWL8U4hKJoawjngUxIDwZdGPRygYsDc1b1HpsYnJRl5gkJDUtGywXqR6BpxYwNyd9Kk9rgvv14sgo//smGO7jGXPeoQAqpIT1Nke9OqavLiqzzKTNvc1VHI8A/0aQbb3SueO5dA0DMPikvUoInDmmiC7q8a0DjHv5UHPAnAzqykvEGPW7lVi3xebJNdNUhYqtnrgVATDd78dVe/tC4NOeWmO5fCWDu6GlXeNOs8B7ouL78UOa0nM0wbYs6t2icYbWmYOCWo3hlkkG4mMBXMw91xZfPGExL/naY+hSxW3FrKC00uYZOU2LDSc059sCLHpp5Pu09d6nltHl6NSOph/rFm/QxdZ3uArs3EJuOQjAFUWHRCezCIb731C+3WxIUzULeUGq/y6LVbKqO7a4py1HtKyjpvBzpAo18dQI/i/WOcX/L3lwMIriU4EKhWk3Kjv19yl6sjc6/tCyqUguSdoBg51AcOV1lv1RXAA/RFMlEerMd+AJDb5gmGhUgDLo4s6CBWltObQ0TBvK2omIstqhEaoXBJLmZSSVWpqLkehAO9JQLsBHdKFUwu7WPkc3YmhU+g9azK/bn3FyJUHE9pgUEpRqb1Nj1k3w0hwK59So8GMk52Ar3+D4Y1/iQogA+xjRkJ839xT9mhO2v9zgb9ZpHTa89kHDj2CUznz6yF+J11XPef0pxqpitGSI52gtwU+9RT3qGhcnmLYtT+XoQIyiQAZehdzXSjv15Kyn2I9ZBJsP4d1Da1TvVgXkkteNs4zxzqMjeUVVqMXmB/LnoIiHu15aaUPcAhRiMrVJjI25VOnfy5BisAarzX5f4rHQMB1yzyPVRjqSU3b1ie5T5v/LTQGjIrQWwrGULy+B9pWFANsPV96wH16wyHkBhlgW1SOU3/aE3kkhF4XqT9IWCYMVe/utM89ujOnxktI1wYlCGHvZrjk6Iiz9TlH3bv51bCR6AIHzplAKL9D6WTBsj4tz8exqieB0T4OA70UQZwpTok/qJIW1BnjYJDODiuIGWXXaypdIfysp69ykVMbZfRDMap5GzFDQJCAr+neZbYmJAdyODQN4m0JyqVZ4uzkB+FMVdIa6gGyMoz4yGGUB3VtEqSvgfFoyBZsxZq4TB1KcIgSTAAATrqS3WKlH2G9cew0Cf7HsnXw+snCyM6uOQynkPGrBtIGN7fv0RLHBjaOELrL8T/OE1Bnq2IQkZK6DKAGg7arC5o+60hwPLGCDzSbGtXnoMhnVT3CuT090dk6zyD3k2g7L4vjldfDKzD+LamJm6Wfvls+vPQVOq8bKflI54Jqt4p2gTWUpY1cFYifXLO638edGMjAKaJMEbhGc1+UmoqqBKksjbWe79PDsdQhJwu+zkqaZDdTv9idy3jk9V+X4bCchnrKy5VLTnHsCMqKrHqnjHQT4+hauSWMY+cgslRE0MhYzUCR0/rf1V5mVKailCN4/QEWNOwbHLHOPsbKaIV60NAFLdhHwdzOsoTshsTvT7KWPqEwQ0wtPrfPZZw0mVXIGg+goyhz+J2O01P7J4CQeOZHOgZMcG1fyOoCdihRiuJgJ1BFDvjWkFg+yGDTVxJFGNaO6RfqetGVBP2IUy+1H2+htQ6hC4T5g0RxrdOpXpw8/MIh1bk8nI+OOhdk+2urFUZi7/Gmn9VR6hcvMsV35jzUBshahX+dLB0hYRZ34ebkoZneO+h7sBn1Tdr8qhcgDDSXV7XIutqWMDwHrWAuG9DHQ7QbRnpyX/3AI2VPLared7RnVxAFSX16FPOXLZ0G1zJcl0C2V4Q4UpT7XrMwOvcMNZYNDJsP+mDGifmE34wpnmWlh7szfgGTGVNvqV2nU3wnL/zS0bu5cn2vfVEY+RPiECpAXYc99+wXQfy9W7M1+6vghGPereJMInUCmTWFvO3emUyfNsPedDN+POA3cJqZepKcFRpDUpZstdH4Rdv2ZFQyeqi2zrDRTRFrSOa7voUKz+xcV3/JlC0dA/DVNwZFeotMbqg9I2K315mPlc+H3kM/wJ/yuqzuyGmQTU2gYfkX+YJlvqtD3GSdHd9i4wUTpiIJIoAGQLB5kWgPRy9Dwa3I4TuN9Euj4cI7I7mgP71l0n0YghQPencaN94jexgok5jXB9u255GjjAbktXaroOyptjUuKCPRrBauD9csMrpNQ/U3Giz0LDBNc2IWS82nzle1vm7KGI9SCz8OVNPZ8AQlg215BvZH8vRG19z8eZhcnV0Qm5o6kc3jdtOG0bJgmUV5LpFbxix0wVuagjdEXehJgjALStJd65p550UidEzqIBcMRWItVozCKuB5iTi+fZW5mm2+qFYKPUoVzh0CREJhcmdRNVac84ldd1tHGqI2sneSiO10AKn2dII7ZLF2miWaDBg2TGc/tYmdIb2tcBPeGxIyl69KW2cAE42q1dVq42iHGORaDmOhNlLhIHEAUjJtZ7FTfAom+y+EM4OyqMPV2NSr8T3PKAFH0fqQdqdiOCpZJ9bZKotQ/wNPCUO7NEWaw0ld4UhfbCxd5Wzn4VbrlsmYOVO29Rg+0nwYLxzuS3zyLM9k7GA400fcLOW9Jp0ajrqF9rDCHCyxIrrcMuVhn0B87CArwTjRFOtNEMnGrjEl0EKIVyjHTf1zJjkVVfyC9ykA9GoG1GbniXj3tS1/kd6vdoG/kjhIJwpNxdqLVaYqv2o7FxJ3CorJK8xRQfz3EMoA+Il2izGEzIXChkBUTUFfrUo6Y0t70rqHKjOgMOILKSWstvR17zql0F414fqpbNBYgrsDJvlyUHySYGdPaW2MTe/8ghzXdp0Qp7bReKVWG56f6JzSSXwyp4kgfv+aUJ+S9dXr1YDej6AvoVrbCFOGAMNqFaePL34+n3aidxtj3F6qd/rnF8Jpw/HS2R8Wr7eTr8bT8+Zq6UZkb8cGEFQZre1glvKAtTyjATcRjis0Dio3wfI08UXlsEJRHu7i8qYzb0T4AIZ2cRmZ4323UhlTceLIOhNUwgNcMB3ICzBj8A/KaGed2Q4D4Zid0EjPAWG5yD6pmKTjzdWiM+zAucSbGRjqK3av9GfxQkftlPH6li1b197djxhz9MZs4wP9/+SiVJ//D84GzES/X9pZvwybR1YDtuF6QHTbpFW8n51ptwDgvyqnCQNWU5pkIudcjwXPOEcsFd2EU3/ZRwqDIJFx4333t69RCAF0hW4VKxso98s0ij2IRNMryMSaDB7+fdWH52k3mfU/XaG1AsZpWCytaALVx6Z2piU0cyMrw9Puj5mtvAq46WZAvGE7jiR20NAfc8EciJ2k844FR9JLmHSPJci3x3JHmagKb3tSg0+B2BmcQmlhjR+u6t5XllnaYsbxy95QZBH1uHzPam8qOm+VlkFPsErrhNfaR7Xs1gyYrGGnZM4RmNxnOrrMqlUotgDwOmuEoIuyzhmuFoGqwQ/6kgLjKwajOk+2bMXgm2bB7Qu//LHUCs1C28xCFre4PeM8Zo3oIJbtZl/ZVui8qXIMZrObm173s+lDmaKeLfvs9hBPZ0oGbrno7oe+U8KXuoca6jw8ICjnT3nSvr5jgD6SPFVOtOQbFGNUtC14xFzXjp9C1geron8LhiEzCP/DaoOp1W6lT/UJNDOu0ZvO3V/X9YLukXkqHf9sCTFJ9WenmpoidE4z8nbGwUq5HOevAbpTsYC1JX0Hsh5Ijlyic990OXpmuEiEstI0EGlag+cMACDVMdDgYxKaBpxk406/luc9Hq5EHDD6yRhGpdxcSP773smjwq9rnDD7LR6dkx90Tcv5XAnBdDUpCQsXEZ7ed3WB3KkVbEhfFamiJg9mTfdZChP9/AUC+65QHxn5kWxN9XmT88opUZzXeUSYWrNAVb6n57mxIxs4KVfZcGIuUTjsJ3iS/vZldx7nc7BvzmHja3uYP6dFxre5lAw1fw+8Njct5i38jJbJ3CgT3/APITPASC3YrO+edXr7eSbYMc0pcw54tkT3Avn1AbE1P3F0BK/G6lLpBfFH1VSsBU1M2+8VBJuBj/08lC2iMMHzZ3Ug/seNDGu8xYmfHDdVah+JU+xYQWIvV1s4J/GVGheBRYnclr55fMjrkshq3eVMLtrfs0cdXc4fVF0YFrG7/Iw7j4j6IGZM2jg0N/GaYohm6fDTPMdY7J5f24aoDSCaUZwFIBia6JnrqeWDJT6a6X52MroSqRM8uPQ5tmkfYgVj2MmZabEK2eT8J5Yvwas+PvHCE/UXWIcrnm8Vfc6y5Ce9KtJKpbVV/V42xED+Sw+Mvhq3WPplsby+1Q3qP6pvl6I4dRd5deuHKBnJ4iyaqAUSWa40R03cYlpl03DHNxAjF8eLL5J0colgk7SG8SKB9d8NxYfF4EpTzl22MBZp3OWk+Ho45uG4wco/tvnpVhcc09YPDGPMJfxij8KZA92A2X8w23X1q1ftHI3aKezlQoMX+Sd/3H1Re/pP01NyRVSLvFKBA3f1yFrW7/1eHaE00XqDFluzqX7GtQspX63Gv45YYKVXyskcOWPvvnQV3hhPbMwqohPw++gPH57Gt85627Ppp9JEwisCHje1q+kII1Pn9b2tL1qtK+FgvbDxB+HByNvOXh2NzmlHHUlcX8FB1jqJkJwj1JrBtgDNUPpzoB1qOZorZLfAYlUlZ5Fh7HO+wQ2v2aznqUsMyyWZ9JG5jsGIYUo7R/NSVK0zMrlvL8NKN5A3kPeAFQb01gVClnXRlm0263ePkIVfIb9VUKBh3aP04sNdZwJPx1iixW8Zgq/Y6Q3XXIObYJI47S90BVz+AlCix7utpWLeDj2HkZQ6+3eIyD9dQf5w6bK0s+opo9l1efRvElX9xHfbGoSTjwcT33/qdUPpUh+WkX1XbjFB3k6pCDJi3WHyuB5YLRvcdPhIoqkWK/bfwNjdljuOGNaQx3FBvTimX+SAdrfS52iEOxVcEYtwRwHJL9JKAEtGmBFKYXRGfrUXgKmWaAZPCfftVzDazBCIS8T5ScplQpin7yi3zkS+Ic541TOqs5KXtGnRU0YsyrN6gR2IkTnCsEaRQ7Rf109Mk23HJF4UPjsvsfw60C9Iy6Hjk2LdPRb6xG2lRruJB8tTSNEDXASowhvZ0L9AXc35/UqgeneBgNR30MQ24lMVaqT35UXZWpOhUDksAEwsBrEVUk0NVWmBqI9uyRuzDhI/dL53eIBTo8xSOTKORlJImcfk8KXRM8bLEQzli1M/8JRm7rdw2lt2yP0Jl8QL9Q55wMtD+31zgZ9pxdvkZ2iIwSlLq9FD+DT+eusm6rWaAGJ0DfPHdX4sGu9PuFTOFGkH62TLOEMfL69IPNKxm/bNwLwIAS6MuVYWGw40lLkiAo44yn7lnFNrtmVtrDknZkVRrTbFpFN+WyJhK9soCLJqBceLpXJR6z4XqFeP0GWuWzvmkPmQSJD/R+K4fe3OinHKvXplJ9hkwRHVcxHrVvrPGn3/SuvsyZtznC/Y4q0M57bJDgnU8T2hmn/blJtvq7VsAlIzF0wSbw1UJEQL8/TM1gGr4CWbnTGoWHyVvfuJo1VdRZ3RP4J9OVCJQ6yFgWVpVbXY/haQSmjSPPDn34Lg/uldeXWJ7k00Vj1l27vUF795ab6fuo3tx2k95YnPXHpcHdnGD2OLtvYIdmzA9zwYcFxF1Kt3qSiYkRD2nM05XJKNQu0V7zh8NxaF2mu4VWU3oWYvH2/VOoatbQTNj/ztE2WXib7PL6vtoAoQcix/Cfc8vQs20xYRAFinDOgEsDXY6U1c9xBPgoDUUIhSINIzt4fKCqQ40GhMdUlXZ+UW3U9xdbDVJUiV/46cRfKfuY6ha8smdrseP73I0+K8o/QapaBUcb3Nfc4Chvs/qF5/Hj6paujmwJBn+HSFGSV0D3uln3NHKvlM8koIcnHoEAFuYyl2yZcMvBIfXXlm9DTkuCuxW </div>]]></content>
    
    <summary type="html">
    
      No pain, no gain.
    
    </summary>
    
      <category term="职场" scheme="https://morganwu277.github.io/categories/%E8%81%8C%E5%9C%BA/"/>
    
      <category term="合作" scheme="https://morganwu277.github.io/categories/%E8%81%8C%E5%9C%BA/%E5%90%88%E4%BD%9C/"/>
    
    
      <category term="工作" scheme="https://morganwu277.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="为人处事" scheme="https://morganwu277.github.io/tags/%E4%B8%BA%E4%BA%BA%E5%A4%84%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Redis Scan Too Slow in Django Application</title>
    <link href="https://morganwu277.github.io/2017/07/16/Django-Redis-Scan-Too-Long/"/>
    <id>https://morganwu277.github.io/2017/07/16/Django-Redis-Scan-Too-Long/</id>
    <published>2017-07-16T06:32:46.000Z</published>
    <updated>2017-07-16T03:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I met an issue that one of our APIs of the online production servers is very slow due to <code>redis scan</code>. </p><p>From next graph generated by NewRelic, we found AVERAGE <code>response time</code> is 2930ms while <code>redis scan</code> could take 2680ms, which is 2680/2930 = 91.4% portion of the total time. </p><center><img src="/2017/07/16/Django-Redis-Scan-Too-Long/redis-scan-slow.png" title="Redis Scan Too Slow"></center><p>Why redis scan cost this much? From our local environment, we never noticed such huge performance issue. </p><a id="more"></a><h1 id="Locate-the-culprit">1. Locate the culprit</h1><h2 id="Phenomenon">1.1. Phenomenon</h2><p>After that I dug into the source code and found next code snippet in our Django Application and this is the only code of this API to access <code>redis</code>, so this must be the culprit of this issue. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</div><div class="line"></div><div class="line">// ...... more code <span class="keyword">is</span> ommitted here</div><div class="line"></div><div class="line">cache.delete_pattern(CACHE_KEY)</div></pre></td></tr></table></figure><p>From the above code, we could know that redis is treated as a cache server here.</p><p>So what does <code>delete_pattern</code> do on the earth? So I traced the code and in the end found next <code>delete_pattern</code> definition from <code>django_redis.client.default.DefaultClient#delete_pattern</code>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_pattern</span><span class="params">(self, pattern, version=None, prefix=None, client=None)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Remove all keys matching pattern.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="keyword">if</span> client <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        client = self.get_client(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    pattern = self.make_key(pattern, version=version, prefix=prefix)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> client.scan_iter(pattern): // please note here</div><div class="line">            client.delete(key)</div><div class="line">            count += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count</div><div class="line">    <span class="keyword">except</span> _main_exceptions <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">raise</span> ConnectionInterrupted(connection=client, parent=e)</div></pre></td></tr></table></figure><p>The code calls <code>client.scan_iter(pattern)</code> to get next cursor and try to delete that key of the cursor. </p><h2 id="Redis-scan">1.2. Redis scan</h2><p>From the official site of <a href="https://redis.io/commands/scan" target="_blank" rel="noopener">redis scan</a>, we can combine <code>MATCH</code> and <code>COUNT</code> in the <code>SCAN</code> command.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">redis 127.0.0.1:6379&gt; scan 0 MATCH *11*</div><div class="line">1) <span class="string">"288"</span></div><div class="line">2) 1) <span class="string">"key:911"</span></div><div class="line">redis 127.0.0.1:6379&gt; scan 288 MATCH *11*</div><div class="line">1) <span class="string">"224"</span></div><div class="line">2) (empty list or <span class="built_in">set</span>)</div><div class="line">redis 127.0.0.1:6379&gt; scan 224 MATCH *11*</div><div class="line">1) <span class="string">"80"</span></div><div class="line">2) (empty list or <span class="built_in">set</span>)</div><div class="line">redis 127.0.0.1:6379&gt; scan 80 MATCH *11*</div><div class="line">1) <span class="string">"176"</span></div><div class="line">2) (empty list or <span class="built_in">set</span>)</div><div class="line">redis 127.0.0.1:6379&gt; scan 176 MATCH *11* COUNT 1000</div><div class="line">1) <span class="string">"0"</span></div><div class="line">2)  1) <span class="string">"key:611"</span></div><div class="line">    2) <span class="string">"key:711"</span></div><div class="line">    3) <span class="string">"key:118"</span></div><div class="line">    4) <span class="string">"key:117"</span></div><div class="line">    5) <span class="string">"key:311"</span></div><div class="line">    6) <span class="string">"key:112"</span></div><div class="line">    7) <span class="string">"key:111"</span></div><div class="line">    8) <span class="string">"key:110"</span></div><div class="line">    9) <span class="string">"key:113"</span></div><div class="line">   10) <span class="string">"key:211"</span></div><div class="line">   11) <span class="string">"key:411"</span></div><div class="line">   12) <span class="string">"key:115"</span></div><div class="line">   13) <span class="string">"key:116"</span></div><div class="line">   14) <span class="string">"key:114"</span></div><div class="line">   15) <span class="string">"key:119"</span></div><div class="line">   16) <span class="string">"key:811"</span></div><div class="line">   17) <span class="string">"key:511"</span></div><div class="line">   18) <span class="string">"key:11"</span></div><div class="line">redis 127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p><p>The above command returned me with a <code>0</code> means, in the first line of response, there is no more data to scan. If not <code>0</code>, the number is next cursor to be used to scan. </p><blockquote><p>It is important to note that the MATCH filter is applied <strong><code>after</code></strong> elements are retrieved from the collection, just before returning data to the client. </p></blockquote><p>This means, firstly it will retrieve the data, and then will use a filter to match the retrieved data.<br>Does this means there could be multiple back-and-forth between the client and server, and which will cost the huge latency of this redis scan? If that’s true, we just need an extra easy <code>COUNT</code> parameter. </p><h1 id="Validation-in-local-environment">2. Validation in local environment</h1><h2 id="KEYS-number">2.1. KEYS number</h2><p>How many keys are there in our online production redis server?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379[10]&gt; INFO</div><div class="line"><span class="comment"># more code is ommitted here</span></div><div class="line">db10:keys=6986,expires=6986,avg_ttl=40118300</div></pre></td></tr></table></figure></p><p>From above code, we can know there are nearly 7000 keys in our server. </p><h2 id="Client-Server-latency">2.2. Client-Server latency</h2><p>I simply use the <code>ping</code> command to get the latency and it’s 3.5 ms. Due to classified cause, sensitive info is hidden.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[xxx@xxxx.xxx.xxx.xxx ~]$ ping xxxx.com</div><div class="line">PING xxxx.com (xx.xx.xx.xx) 56(84) bytes of data.</div><div class="line">64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=1 ttl=58 time=3.58 ms</div><div class="line">64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=2 ttl=58 time=3.46 ms</div><div class="line">--- xxxx.com ping statistics ---</div><div class="line">2 packets transmitted, 2 received, 0% packet loss, time 3004ms</div><div class="line">rtt min/avg/max/mdev = 3.461/3.498/3.585/0.050 ms</div></pre></td></tr></table></figure></p><h2 id="Simulate-the-Network-Latency-Locally">2.3. Simulate the Network Latency Locally</h2><p>From this <a href="http://bencane.com/2012/07/16/tc-adding-simulated-network-latency-to-your-linux-server/" target="_blank" rel="noopener">post</a>, I successfully simulated the network latency.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@localhost:~ $ sudo tc qdisc add dev lo root netem delay 2ms </div><div class="line">(venv) vagrant@localhost:~ $ ping 127.0.0.1</div><div class="line">PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.</div><div class="line">64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=4.34 ms</div><div class="line">--- 127.0.0.1 ping statistics ---</div><div class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</div><div class="line">rtt min/avg/max/mdev = 4.348/4.348/4.348/0.000 ms</div></pre></td></tr></table></figure></p><p>So I made the <code>lo</code> NIC as slow as around 4.3 ms. </p><h2 id="Measure-the-time-of-cleaning-the-cache-before-and-after-setting-the-delay">2.4. Measure the time of cleaning the cache before and after setting the delay</h2><p>Since this is a Django application, so I can use Django Shell to try to execute the clean cache statement, which as a result operate the local redis server.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@localhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all")'</span></div><div class="line"></div><div class="line">real    0m8.404s</div><div class="line">user    0m0.944s</div><div class="line">sys     0m0.696s</div></pre></td></tr></table></figure></p><p>What if we don’t set the delay option, what’s would the timing metric be?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@lcoalhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete("view_cache:dispatch:123456789:category_slug:all")'</span></div><div class="line"></div><div class="line">real    0m4.366s</div><div class="line">user    0m0.800s</div><div class="line">sys     0m0.648s</div></pre></td></tr></table></figure></p><p>From the above test, we can see that before and after will make a huge difference as large as 4 seconds !!! And this is under the network latency of 4.3 ms. If the network latency is around 3.5 ms, the total time of cleaning cache could be as large as 3 seconds, which is very close the above phenomenon!</p><p>Now, we can get a conclusion: network latency will influence too much on the <code>redis scan</code> performance. <code>SCAN</code> will call the redis multiple times back-and-forth, which in the end, cause a large <code>redis scan</code> time. </p><p>How to solve the problem? Use the <code>COUNT</code> parameter!</p><h1 id="Solve-the-problem">3. Solve the problem</h1><h2 id="Estimation-of-deleting-time-again">3.1. Estimation of deleting time again</h2><p>From the definition of <code>delete_pattern</code> method, we can see it just <code>scan_iter</code> the redis using the default <code>COUNT</code> which is 10. Let’s give an estimation here:</p><ol><li>The <code>Redis Scan</code> use a sequential scan with <code>COUNT</code> as 10, there will be 6986/10 = 700 times to scan. </li><li>Each scan costs at least 1 ping time, which is 3.5 ms.</li><li>In total, 3.5*700 = 2450 ms, which is close to the 2680 ms of the phenomenon above. Interesting.  </li></ol><p>From above estimation, we are more confident of our guess now, and using the <code>COUNT</code> must be the solution!</p><p>But the <code>delete_pattern</code> method provided by the default client doesn’t use <code>COUNT</code> parameter, so what I can do is to create a new Redis Client which is inherited from the default Client and override this <code>delete_pattern</code> method to use the <code>COUNT</code> parameter.</p><p>Here is my code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="comment"># Compatibility with redis-py 2.10.x+</span></div><div class="line"><span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> ConnectionError</div><div class="line"><span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> ResponseError</div><div class="line"><span class="keyword">from</span> django_redis.exceptions <span class="keyword">import</span> ConnectionInterrupted, CompressorError</div><div class="line"><span class="keyword">from</span> django_redis.client <span class="keyword">import</span> DefaultClient</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> redis.exceptions <span class="keyword">import</span> TimeoutError, ResponseError</div><div class="line">    _main_exceptions = (TimeoutError, ResponseError, ConnectionError, socket.timeout)</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    _main_exceptions = (ConnectionError, socket.timeout)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheClient</span><span class="params">(DefaultClient)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_pattern</span><span class="params">(self, pattern, itersize=None, version=None, prefix=None, client=None)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Remove all keys matching pattern.</div><div class="line">        """</div><div class="line"></div><div class="line">        <span class="keyword">if</span> client <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            client = self.get_client(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">        pattern = self.make_key(pattern, version=version, prefix=prefix)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> client.scan_iter(pattern, count=itersize): // have a itersize here</div><div class="line">                client.delete(key)</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">return</span> count</div><div class="line">        <span class="keyword">except</span> _main_exceptions <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">raise</span> ConnectionInterrupted(connection=client, parent=e)</div></pre></td></tr></table></figure></p><p>When I call the code, I make sure to pass the <code>itersize</code> very large, say, 10,000 to eliminate too many back-and-forth RPC calls. </p><h2 id="Enable-the-customized-redis-client-class">3.2. Enable the customized redis client class</h2><p>Of course we need to enable this client in our <code>settings/local.py</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">CACHES = &#123;</div><div class="line">    'default': &#123;</div><div class="line">        'BACKEND': 'django_redis.cache.RedisCache',</div><div class="line">        # redis server</div><div class="line">        'LOCATION':</div><div class="line">        os.environ.get('NOJ_REDIS_CACHE_URL', 'redis://localhost:6379/10'),</div><div class="line">        'OPTIONS': &#123;</div><div class="line">            'PARSER_CLASS': 'redis.connection.HiredisParser',</div><div class="line">            'CLIENT_CLASS': 'common.cache_client.CacheClient' // enable the customized redis client class</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="Test-after-fixing">3.3. Test after fixing</h2><p>I added a <code>10000</code> after my <code>delete_pattern</code> call.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(venv) vagrant@localhost:~ $ time python manage.py shell -c <span class="string">'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all",10000)'</span> </div><div class="line"></div><div class="line">real    0m4.021s</div><div class="line">user    0m0.784s</div><div class="line">sys     0m0.612s</div></pre></td></tr></table></figure></p><p>The time now is very close to the time before setting the network latency, which means, <code>delete_pattern</code> won’t be a performance issue anymore, since it only has one RPC call now. </p><p>Cheers, bro!</p><h1 id="Conclusion">4. Conclusion</h1><ul><li>Don’t be afraid of the library source code, just dig into it.</li><li>Use <code>tc</code> command to simulate the network latency.</li><li><code>MATCH</code> in<code>Redis Scan</code> is to filter on top of the retrieved data. </li><li>Default <code>COUNT</code> of <code>Redis Scan</code> is 10. </li><li>Use <code>python manage.py shell</code> to execute ad-hoc test.</li><li>Use <code>ping</code> to get network latency. </li><li>Use <code>INFO</code> to get redis statistical information. </li></ul><hr><p><strong>References</strong></p><ul><li><a href="https://redis.io/commands/scan" target="_blank" rel="noopener">Redis Scan</a></li><li><a href="http://bencane.com/2012/07/16/tc-adding-simulated-network-latency-to-your-linux-server/" target="_blank" rel="noopener">tc: Adding simulated network latency to your Linux server</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently I met an issue that one of our APIs of the online production servers is very slow due to &lt;code&gt;redis scan&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;From next graph generated by NewRelic, we found AVERAGE &lt;code&gt;response time&lt;/code&gt; is 2930ms while &lt;code&gt;redis scan&lt;/code&gt; could take 2680ms, which is 2680/2930 = 91.4% portion of the total time. &lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/2017/07/16/Django-Redis-Scan-Too-Long/redis-scan-slow.png&quot; title=&quot;Redis Scan Too Slow&quot;&gt;&lt;/center&gt;

&lt;p&gt;Why redis scan cost this much? From our local environment, we never noticed such huge performance issue. &lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://morganwu277.github.io/categories/Database/"/>
    
      <category term="NoSQL" scheme="https://morganwu277.github.io/categories/Database/NoSQL/"/>
    
      <category term="In-Memory" scheme="https://morganwu277.github.io/categories/Database/NoSQL/In-Memory/"/>
    
    
      <category term="Django" scheme="https://morganwu277.github.io/tags/Django/"/>
    
      <category term="Redis" scheme="https://morganwu277.github.io/tags/Redis/"/>
    
      <category term="Scan" scheme="https://morganwu277.github.io/tags/Scan/"/>
    
      <category term="Performance" scheme="https://morganwu277.github.io/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Debug Ansible and Tiny Introduction of PlayBook</title>
    <link href="https://morganwu277.github.io/2017/06/29/Debug-Ansible/"/>
    <id>https://morganwu277.github.io/2017/06/29/Debug-Ansible/</id>
    <published>2017-06-29T18:18:34.000Z</published>
    <updated>2018-07-03T20:07:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.ansible.com" target="_blank" rel="noopener">Ansible</a> is a popular dev-ops tools for us to execute ad-hoc commands immediately on large mounts of machines in parallel which accelerate our working speed.  </p><p>It’s simple but powerful and compatible with different OS platforms. Even more, it has lots of pre-defined modules for us to use, which significantly make the dream of <strong>reusing Dev-Ops</strong> scripts come true. </p><p>However, when you’re goging to use this fantastic tool, how to debug when you’re executing the ansible play-book with flow of commands? It looks like a unstoppable flow.</p><a id="more"></a><p>So we need two things for debugging ansible playbook: </p><ul><li>Stoppable </li><li>Print Debug Message </li></ul><p>This article will also give some tiny intro about play-book. For more info, please review the official documents. </p><h1 id="Stoppable">1. Stoppable</h1><p>So, here we have a trick, using the <a href="http://docs.ansible.com/ansible/fail_module.html" target="_blank" rel="noopener">fail</a> module to stop the execution process.</p><p>Add next code snippet at wherever you want to stop. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more is here</span></div><div class="line"></div><div class="line">- name: <span class="string">"STOP ME"</span></div><div class="line">  fail: msg=<span class="string">"This is the debugging stop"</span></div><div class="line">  when: 1==1</div></pre></td></tr></table></figure><p>After that, you could see the message like below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more is here ... </span></div><div class="line"></div><div class="line">TASK [pre-ansible : STOP ME] ******************************************************</div><div class="line">fatal: [node-1-master]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</div><div class="line">fatal: [node-2-slave-1]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</div><div class="line">fatal: [lcoj-judger]: FAILED! =&gt; &#123;<span class="string">"changed"</span>: <span class="literal">false</span>, <span class="string">"failed"</span>: <span class="literal">true</span>, <span class="string">"msg"</span>: <span class="string">"This is the debugging stop"</span>&#125;</div><div class="line"></div><div class="line">NO MORE HOSTS LEFT *************************************************************</div><div class="line">to retry, use: --<span class="built_in">limit</span> @cluster.retry</div><div class="line"></div><div class="line">PLAY RECAP *********************************************************************</div><div class="line">lcoj-judger                : ok=5    changed=1    unreachable=0    failed=1   </div><div class="line">node-1-master              : ok=5    changed=1    unreachable=0    failed=1   </div><div class="line">node-2-slave-1             : ok=5    changed=1    unreachable=0    failed=1</div></pre></td></tr></table></figure></p><h1 id="Dry-Run-with-check">2. Dry Run with --check</h1><p>Next won’t execute the whole playbook, but will give a run through.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook foo.yml --check</div></pre></td></tr></table></figure></p><h1 id="Print-Debugging-Message-with-Var">3. Print Debugging Message with Var</h1><p>Of course you can print debug message with the <code>fail</code> module. However, it has a born behavior: stop the process, which maybe unexpected.</p><p>Here we use the <a href="http://docs.ansible.com/ansible/debug_module.html" target="_blank" rel="noopener">debug</a> module to print statements during execution.</p><p>Next is an example of printing the <code>eth1</code> address of each nodes in the inventory file. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more is here...</span></div><div class="line"></div><div class="line">- debug:</div><div class="line">    msg: <span class="string">"hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4.address &#125;&#125; &#123;&#123;item&#125;&#125;"</span></div><div class="line">  with_items: <span class="string">"&#123;&#123; groups['all'] &#125;&#125;"</span></div></pre></td></tr></table></figure><p>Here is the output of such debug msg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">TASK [pre-ansible : debug] *****************************************************</div><div class="line">ok: [node-2-slave-1] =&gt; (item=node-1-master) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></div><div class="line">&#125;</div><div class="line">ok: [node-2-slave-1] =&gt; (item=node-2-slave-1) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></div><div class="line">&#125;</div><div class="line">ok: [node-2-slave-1] =&gt; (item=lcoj-judger) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></div><div class="line">&#125;</div><div class="line">ok: [node-1-master] =&gt; (item=node-1-master) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></div><div class="line">&#125;</div><div class="line">ok: [node-1-master] =&gt; (item=node-2-slave-1) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></div><div class="line">&#125;</div><div class="line">ok: [node-1-master] =&gt; (item=lcoj-judger) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></div><div class="line">&#125;</div><div class="line">ok: [lcoj-judger] =&gt; (item=node-1-master) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-1-master"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.10 node-1-master"</span></div><div class="line">&#125;</div><div class="line">ok: [lcoj-judger] =&gt; (item=node-2-slave-1) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"node-2-slave-1"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.11 node-2-slave-1"</span></div><div class="line">&#125;</div><div class="line">ok: [lcoj-judger] =&gt; (item=lcoj-judger) =&gt; &#123;</div><div class="line">    <span class="string">"item"</span>: <span class="string">"lcoj-judger"</span>, </div><div class="line">    <span class="string">"msg"</span>: <span class="string">"hosts mapping is: 192.168.33.12 lcoj-judger"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>In your play-book, please setup the <code>gather_facts</code> to be <code>true</code>. In this way, we can print the <code>ipv4.adderss</code> of this host.<br>And the <code>pre-ansible</code> is the role where the above code snippet lies in. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">  gather_facts: <span class="literal">true</span></div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - pre-ansible</div><div class="line">  tags:</div><div class="line">    - pre-ansible</div></pre></td></tr></table></figure><p>Also, this <code>debug</code> module with msg can print an object with all its field values. So if our <code>msg</code> above changes to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4 &#125;&#125; &#123;&#123;item&#125;&#125;"</span></div></pre></td></tr></table></figure></p><p>it will print more message. </p><h2 id="Register-the-response-and-then-print-using-debug-msg">3.1. Register the response and then print using debug msg</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  tasks:</div><div class="line">    - name: Get OS Version</div><div class="line">      become: <span class="literal">true</span></div><div class="line">      shell: <span class="string">"echo `cat /etc/os-release | grep PRETTY_NAME`"</span></div><div class="line">      register: res</div><div class="line">    - debug:</div><div class="line">        msg: <span class="string">"&#123;&#123; res.stdout &#125;&#125;"</span> <span class="comment"># we have to add double quote here</span></div></pre></td></tr></table></figure><p>It will print msg like below:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ok: [localhost.domain] =&gt; &#123;</div><div class="line">    <span class="string">"msg"</span>: <span class="string">"PRETTY_NAME=\"Ubuntu 16.04.1 LTS\""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="Intro-about-Play-Book">4. Intro about Play-Book</h1><p>In the section of <a href="#Print-Debugging-Message-with-Var">Print Debugging Message with Var</a>, we already saw one easy <code>play</code>, here is another playbook with only one play. Please remember we do have <code>---</code> at the first line. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- hosts: webservers</div><div class="line">  vars:</div><div class="line">    http_port: 80</div><div class="line">    max_clients: 200</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">  - name: ensure apache is at the latest version</div><div class="line">    yum: name=httpd state=latest</div><div class="line"></div><div class="line">  - name: write the apache config file</div><div class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</div><div class="line">    notify:</div><div class="line">    - restart apache</div><div class="line"></div><div class="line">  - name: ensure apache is running (and <span class="built_in">enable</span> it at boot)</div><div class="line">    service: name=httpd state=started enabled=yes</div><div class="line"></div><div class="line">  handlers:</div><div class="line">    - name: restart apache</div><div class="line">      service: name=httpd state=restarted</div></pre></td></tr></table></figure><h2 id="Roles">4.1. Roles</h2><p>With Roles, we can <strong>reuse</strong> the tasks commands. For example, next play, we will execute the play with roles <code>pre-ansible</code>. Of course, we can execute more roles, just append the role directory name under <code>roles</code> field.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">  gather_facts: <span class="literal">true</span></div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - pre-ansible</div></pre></td></tr></table></figure></p><p>Here is a glance of directory structure, we can see <code>pre-ansible</code> directory in the <code>roles</code> directory.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[03:38 PM morganwu@promote noj-deploy]$ tree  -L 2</div><div class="line">.</div><div class="line">├── ansible.cfg</div><div class="line">├── cluster.yml</div><div class="line">├── group_vars</div><div class="line">│   └── all.yml</div><div class="line">├── inventory.me</div><div class="line">├── roles</div><div class="line">│   ├── common</div><div class="line">│   ├── docker</div><div class="line">│   ├── etcd</div><div class="line">│   ├── flannel</div><div class="line">│   ├── kubernetes</div><div class="line">│   ├── kubernetes-addons</div><div class="line">│   ├── leetcode</div><div class="line">│   ├── leetcode-backend</div><div class="line">│   ├── master</div><div class="line">│   ├── nginx</div><div class="line">│   ├── node</div><div class="line">│   ├── opencontrail</div><div class="line">│   ├── opencontrail-provision</div><div class="line">│   └── pre-ansible</div><div class="line">├── setup.sh</div><div class="line">└── setup_leetcode.sh</div></pre></td></tr></table></figure></p><h3 id="Use-Condition-when-Choosing-Roles">4.1.1. Use Condition when Choosing Roles</h3><p>We even can use condition expression when choosing specific roles,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- hosts:</div><div class="line">    - etcd</div><div class="line">    - masters</div><div class="line">    - nodes</div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - &#123; role: flannel, when: networking == <span class="string">'flannel'</span> &#125;</div><div class="line">  tags:</div><div class="line">    - network-service-install</div></pre></td></tr></table></figure></p><p>This will only execute the roles of <code>flannel</code> when the <code>networking</code> varialbe is <code>flannel</code>. </p><h2 id="Tags">4.2. Tags</h2><p>With <code>Tags</code>, we can run <strong>specific</strong> <code>play</code> and it makes our dev-ops work more flexible, in a non-linear style. </p><p>We will still using the example above. Here we have defined a tag <code>pre-ansible</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">  gather_facts: <span class="literal">true</span></div><div class="line">  sudo: yes</div><div class="line">  roles:</div><div class="line">    - pre-ansible</div><div class="line">  tags:</div><div class="line">    - pre-ansible</div></pre></td></tr></table></figure></p><p>When we execute playbook with <code>--tags</code>, it will only execute this play and skip all other plays without this specific tag.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags=pre-ansible</div></pre></td></tr></table></figure></p><h3 id="Execute-Multiple-Tags">4.2.1. Execute Multiple Tags</h3><p>If you want to execute multiple tags once, just append with more tag name at the <code>--tags</code>, eg. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags=<span class="string">"pre-ansible,etcd,docker"</span></div></pre></td></tr></table></figure><p>This will execute the <code>pre-ansible</code>, <code>etcd</code>, <code>docker</code> tags. </p><h2 id="Var-String-in-a-condition">4.3. Var/String in a condition</h2><p>Here is an example <code>inventory_hostname</code> is a varaible, but “codential” and “node-1-master” are all strings. </p><p>The most important here is: the condition in the when, we use <code>&#39;</code> to wrap up. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- include:</span> <span class="string">frontend.yml</span></div><div class="line"><span class="attr">  when:</span> <span class="string">'(inventory_hostname in groups["codential"]) or (inventory_hostname == groups["nodes"][0])'</span></div><div class="line"><span class="attr">  vars:</span></div><div class="line"><span class="attr">    service_port:</span> <span class="number">8001</span></div><div class="line"><span class="attr">    node_port:</span> <span class="string">'<span class="template-variable">&#123;&#123; cfg[env].node_port_frontend &#125;&#125;</span>'</span></div><div class="line"></div><div class="line"><span class="attr">- name:</span> <span class="string">register</span> <span class="string">nginx</span> <span class="string">proxy</span></div><div class="line"><span class="attr">  become:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  when:</span> <span class="string">'inventory_hostname  == "node-1-master"'</span></div><div class="line"><span class="attr">  include:</span> <span class="string">roles/leetcode/tasks/register-nginx-proxy.yml</span></div><div class="line"><span class="attr">  vars:</span></div><div class="line"><span class="attr">    service_port:</span> <span class="number">8001</span></div><div class="line"><span class="attr">    node_port:</span> <span class="string">'<span class="template-variable">&#123;&#123; cfg[env].node_port_frontend &#125;&#125;</span>'</span></div><div class="line"><span class="attr">    nginx_template:</span> <span class="string">"frontend/<span class="template-variable">&#123;&#123; env &#125;&#125;</span>-nginx-conf.j2"</span></div><div class="line"><span class="attr">    nginx_conf:</span> <span class="string">"/etc/nginx/conf.d/<span class="template-variable">&#123;&#123; namespace &#125;&#125;</span>-<span class="template-variable">&#123;&#123; env &#125;&#125;</span>.conf"</span></div><div class="line"><span class="attr">    iptables_comment:</span> <span class="string">"<span class="template-variable">&#123;&#123; namespace &#125;&#125;</span>-<span class="template-variable">&#123;&#123; env &#125;&#125;</span>-node-port"</span></div></pre></td></tr></table></figure><p>Extra to learn: iptables related diagram: </p><center><img src="/2017/06/29/Debug-Ansible/iptables.gif" title="Iptables"></center><p>From <a href="https://cesarti.files.wordpress.com/2012/02/iptables.gif" target="_blank" rel="noopener">https://cesarti.files.wordpress.com/2012/02/iptables.gif</a></p><h1 id="Execute-SUDO-commands-without-NO-PASSWORD-settings">5. Execute SUDO commands, without NO_PASSWORD settings</h1><p>Last but not the least, however sometimes very useful. Is for Ad-Hoc command in Ansible. </p><p>We all know it’s possible to execute <a href="http://docs.ansible.com/ansible/latest/intro_adhoc.html" target="_blank" rel="noopener">ad-hoc</a> ansible command for bunch of servers. But problems will come when you need to execute sudo command, the command from the server side will always be waiting for inputing the password to be continued.</p><p>We can use <code>--sudo</code>/<code>-b</code> to solve this. However, you have to make sure all the users in the <code>nodes</code> server list has the <code>same password</code> here. If you provide with the <code>ansible_sudo_pass</code> password in <code>inventory</code> file.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">host1 ansible_ssh_host=xxx.xxx.xxx.xxx ansible_ssh_port=22 ansible_ssh_user=user1 ansible_ssh_pass=password1 ansible_sudo_pass=password1</div></pre></td></tr></table></figure></p><p>If we don’t have <code>ansible_sudo_pass</code>, then we need to provide with the <code>SUDO password</code> at the runtime.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is the command, append using --sudo or we can use -b --become-user=&lt;username&gt; </span></div><div class="line">[05:16 PM morganwu@morgan-yinnut my-deploy]$ ansible -i inventory.me nodes -m shell -a <span class="string">'curl -L https://toolbelt.treasuredata.com/sh/install-ubuntu-xenial-td-agent2.sh | sh'</span> --sudo</div><div class="line">SUDO password: </div><div class="line">node1 | SUCCESS | rc=0 &gt;&gt;</div><div class="line">==============================</div><div class="line"> td-agent Installation Script </div><div class="line">==============================</div><div class="line">This script requires superuser access to install apt packages.</div><div class="line">You will be prompted <span class="keyword">for</span> your password by sudo.</div><div class="line">OK</div><div class="line">Ign:1 http://apt.newrelic.com/debian newrelic InRelease</div><div class="line">Hit:2 http://apt.newrelic.com/debian newrelic Release</div><div class="line">Hit:3 http://mirrors.linode.com/ubuntu xenial InRelease</div><div class="line">Get:4 http://mirrors.linode.com/ubuntu xenial-updates InRelease [102 kB]</div><div class="line">Get:5 http://mirrors.linode.com/ubuntu xenial-backports InRelease [102 kB]</div><div class="line">Get:6 http://packages.treasuredata.com/2/ubuntu/xenial xenial InRelease [2,578 B]</div><div class="line">Get:8 http://security.ubuntu.com/ubuntu xenial-security InRelease [102 kB]</div><div class="line">Get:9 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib amd64 Packages [399 B]</div><div class="line">Get:10 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib i386 Packages [399 B]</div><div class="line">Ign:11 https://get.docker.com/ubuntu docker InRelease</div><div class="line">Hit:12 https://get.docker.com/ubuntu docker Release</div><div class="line">Fetched 310 kB <span class="keyword">in</span> 0s (381 kB/s)</div><div class="line">Reading package lists...</div><div class="line">Reading package lists...</div><div class="line">Building dependency tree...</div><div class="line">Reading state information...</div><div class="line">The following NEW packages will be installed:</div><div class="line">  td-agent</div><div class="line">0 upgraded, 1 newly installed, 0 to remove and 137 not upgraded.</div><div class="line"><span class="comment"># More output comes here</span></div></pre></td></tr></table></figure></p><h1 id="Conclusion">6. Conclusion</h1><p>Ansible is easy but powerful with lots of pre-defined modules. </p><ul><li>We can use <code>fail</code> module to stop execution process ann use <code>debug</code> module to print message with variables. </li><li><code>Roles</code> are designed for <code>task</code> reuuse.</li><li><code>Tags</code> are designed to execute the specific <code>Play</code>(s) in one playbook.</li><li>Use <code>--sudo</code> to execute sudo commands in ad-hoc style.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.ansible.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ansible&lt;/a&gt; is a popular dev-ops tools for us to execute ad-hoc commands immediately on large mounts of machines in parallel which accelerate our working speed.  &lt;/p&gt;
&lt;p&gt;It’s simple but powerful and compatible with different OS platforms. Even more, it has lots of pre-defined modules for us to use, which significantly make the dream of &lt;strong&gt;reusing Dev-Ops&lt;/strong&gt; scripts come true. &lt;/p&gt;
&lt;p&gt;However, when you’re goging to use this fantastic tool, how to debug when you’re executing the ansible play-book with flow of commands? It looks like a unstoppable flow.&lt;/p&gt;
    
    </summary>
    
      <category term="Tool &amp; Skill" scheme="https://morganwu277.github.io/categories/Tool-Skill/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/"/>
    
      <category term="Ansible" scheme="https://morganwu277.github.io/categories/Tool-Skill/DevOps/Ansible/"/>
    
    
      <category term="Ansible" scheme="https://morganwu277.github.io/tags/Ansible/"/>
    
      <category term="Debug" scheme="https://morganwu277.github.io/tags/Debug/"/>
    
      <category term="DevOps" scheme="https://morganwu277.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Exercises</title>
    <link href="https://morganwu277.github.io/2017/06/13/Leetcode-Exercise/"/>
    <id>https://morganwu277.github.io/2017/06/13/Leetcode-Exercise/</id>
    <published>2017-06-13T21:09:45.000Z</published>
    <updated>2017-12-14T22:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a leetcode algorithm list for me to track my thought and solutions. </p><a id="more"></a><h1 id="Two-Sum">1. Two-Sum</h1><p>Problem Description: <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">1. Two-Sum</a> </p><h2 id="Golang">1.1. Golang</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</div><div class="line">    size := <span class="built_in">len</span>(nums)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</div><div class="line">        <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; size; j++ &#123;</div><div class="line">            <span class="keyword">if</span> nums[i] + nums[j] == target &#123;</div><div class="line">                result := []<span class="keyword">int</span>&#123;i, j&#125;</div><div class="line">                sort.Slice(result, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">                    <span class="keyword">return</span> result[i] &lt;= result[j]</div><div class="line">                &#125;)</div><div class="line">                <span class="keyword">return</span> result</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Java">1.2. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">int</span> [] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">if</span>(numbers==<span class="keyword">null</span>||numbers.length&lt;<span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(!map.containsKey(target-numbers[i]))&#123;</div><div class="line">                map.put(numbers[i],i);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                res[<span class="number">0</span>]= map.get(target-numbers[i]);</div><div class="line">                res[<span class="number">1</span>]= i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Path-Sum">2. Path Sum</h1><p>Problem Description: <a href="https://leetcode.com/problems/path-sum" target="_blank" rel="noopener">112. Path Sum</a></p><h2 id="Java-1">2.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    Test if there is a path from current node to leaf node</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (sum == root.val) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        sum = sum - root.val; <span class="comment">// take value from current root node</span></div><div class="line">        <span class="keyword">return</span> hasPathSum(root.left, sum) || hasPathSum(root.right, sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Reverse-Words-in-a-String">3. Reverse Words in a String</h1><p>Problem Description: <a href="https://leetcode.com/problems/reverse-words-in-a-string" target="_blank" rel="noopener">151. Reverse Words in a String</a></p><h2 id="Java-2">3.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        s = s.trim();</div><div class="line">        <span class="keyword">if</span>(s.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        String[] str_arr = s.split(<span class="string">"\\s+"</span>);</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = str_arr.length-<span class="number">1</span>; i&gt;<span class="number">0</span>; i--) &#123;</div><div class="line">            sb.append(str_arr[i] + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        sb.append(str_arr[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Combine-Two-Tables">4. Combine Two Tables</h1><p>Problem Description: <a href="https://leetcode.com/problems/combine-two-tables" target="_blank" rel="noopener">175. Combine Two Tables</a></p><h2 id="MySQL">4.1. MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Write your MySQL query statement below</div><div class="line">select p.FirstName, p.LastName, a.City, a.State from Person as p </div><div class="line">  left join Address as a </div><div class="line">  on </div><div class="line">  p.PersonId = a.PersonId;</div></pre></td></tr></table></figure><h1 id="Fizz-Buzz">5. Fizz Buzz</h1><p>Problem Description: <a href="https://leetcode.com/problems/fizz-buzz/" target="_blank" rel="noopener">412. Fizz Buzz</a></p><h2 id="Java-3">5.1. Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">multiple</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> modValue)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> i%modValue==<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fizzBuzz</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</div><div class="line">            String str = String.valueOf(i);</div><div class="line">            <span class="keyword">if</span>(multiple(i,<span class="number">3</span>) &amp;&amp; multiple(i,<span class="number">5</span>)) &#123;</div><div class="line">                list.add(<span class="string">"FizzBuzz"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(multiple(i,<span class="number">3</span>) &amp;&amp; !multiple(i,<span class="number">5</span>)) &#123;</div><div class="line">                list.add(<span class="string">"Fizz"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!multiple(i,<span class="number">3</span>) &amp;&amp; multiple(i,<span class="number">5</span>)) &#123;</div><div class="line">                list.add(<span class="string">"Buzz"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                list.add(str);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a leetcode algorithm list for me to track my thought and solutions. &lt;/p&gt;
    
    </summary>
    
      <category term="Read &amp; Think" scheme="https://morganwu277.github.io/categories/Read-Think/"/>
    
      <category term="Algorithm" scheme="https://morganwu277.github.io/categories/Read-Think/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://morganwu277.github.io/tags/algorithm/"/>
    
      <category term="leetcode" scheme="https://morganwu277.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Simple Swift Intro</title>
    <link href="https://morganwu277.github.io/2017/06/12/Simple-Swift-Intro/"/>
    <id>https://morganwu277.github.io/2017/06/12/Simple-Swift-Intro/</id>
    <published>2017-06-13T03:24:27.000Z</published>
    <updated>2017-06-13T03:24:27.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Emoji File Name under MacOSX</title>
    <link href="https://morganwu277.github.io/2017/06/09/Emoji-File-Name-under-MacOSX/"/>
    <id>https://morganwu277.github.io/2017/06/09/Emoji-File-Name-under-MacOSX/</id>
    <published>2017-06-09T22:58:31.000Z</published>
    <updated>2017-06-09T23:30:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently was too busy on small stuff that I can’t focus on myself on the real thing I need to tackle. Annoying… </p><p>Anyway, I still find something fun which also stimulate my mind!</p><p><img src="https://www.webpagefx.com/tools/emoji-cheat-sheet/graphics/emojis/grin.png" alt=""></p><p>Interesting! Ah!</p><a id="more"></a><center><img src="emoji_file_name1.png" alt="Emoji File Name under MacOSX" title="Emoji File Name under MacOSX"></center><center><img src="emoji_file_name2.png" alt="Emoji File Name under MacOSX Terminal" title="Emoji File Name under MacOSX Terminal"></center><p>Here is my code of generating this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash </span></div><div class="line"></div><div class="line"><span class="built_in">set</span> -e </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..20&#125;</div><div class="line"><span class="keyword">do</span> </div><div class="line">    filename=<span class="string">'👍 '</span></div><div class="line">    <span class="keyword">for</span> (( j=1;j&lt;=<span class="variable">$i</span>;j++ ))</div><div class="line">    <span class="keyword">do</span></div><div class="line">        filename+=<span class="string">'👍 '</span></div><div class="line">    <span class="keyword">done</span></div><div class="line">    <span class="built_in">echo</span> <span class="variable">$filename</span></div><div class="line">    touch <span class="string">"<span class="variable">$filename</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p><p><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">More about Emoji…</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently was too busy on small stuff that I can’t focus on myself on the real thing I need to tackle. Annoying… &lt;/p&gt;
&lt;p&gt;Anyway, I still find something fun which also stimulate my mind!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.webpagefx.com/tools/emoji-cheat-sheet/graphics/emojis/grin.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Interesting! Ah!&lt;/p&gt;
    
    </summary>
    
      <category term="Fun" scheme="https://morganwu277.github.io/categories/Fun/"/>
    
      <category term="Code" scheme="https://morganwu277.github.io/categories/Fun/Code/"/>
    
      <category term="Mac OSX" scheme="https://morganwu277.github.io/categories/Fun/Code/Mac-OSX/"/>
    
    
      <category term="Emoji" scheme="https://morganwu277.github.io/tags/Emoji/"/>
    
      <category term="Mac OSX" scheme="https://morganwu277.github.io/tags/Mac-OSX/"/>
    
  </entry>
  
</feed>
