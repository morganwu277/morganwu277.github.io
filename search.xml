<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx Magics]]></title>
    <url>%2F2018%2F01%2F18%2FNginx-Magics%2F</url>
    <content type="text"><![CDATA[This is a post for Nginx Magics and for you to quick get the configurations.I put the links here to refer and put my own thoughts and comments. 1. Security1.1. Rate LimitingRate Limiting for hackers or crawlers but not search engines. Refs: English: https://www.nginx.com/blog/rate-limiting-nginx/ http://nginx.org/en/docs/http/ngx_http_limit_req_module.html https://lincolnloop.com/blog/rate-limiting-nginx/ Chinese: http://www.cnblogs.com/chenpingzhao/p/4971308.html I don’t want to explain more on the rate limiting of Nginx, since it’s already there. However, only simple rate limiting will comes with an issue: multiple users from one common gateway could be blocked, for example, they are in University network and shared a common external gateway IP address. From server side’s angle, it can’t just use the IP address to do the rate limiting. Since there could be multiple none hackers under this same IP address. All in all, only using IP address to do rate limiting is trivial and not safe. We should also combine with User-Agent or other fields and adapt this dynamically.Also, the hackers/crawlers can still use VPN to avoid the so-called IP-based rate limiting. We should have a Machine Learning algorithm that can dynamically output the rate limiting model and apply it to online rate limiting. Especially using tree-based model. 1.2. IP Address Blocking Behind ProxiesUse next inside your location / section:12345678910111213141516171819202122232425262728293031323334set_real_ip_from 103.21.244.0/22;set_real_ip_from 103.22.200.0/22;set_real_ip_from 103.31.4.0/22;set_real_ip_from 104.16.0.0/12;set_real_ip_from 108.162.192.0/18;set_real_ip_from 131.0.72.0/22;set_real_ip_from 141.101.64.0/18;set_real_ip_from 162.158.0.0/15;set_real_ip_from 172.64.0.0/13;set_real_ip_from 173.245.48.0/20;set_real_ip_from 188.114.96.0/20;set_real_ip_from 190.93.240.0/20;set_real_ip_from 197.234.240.0/22;set_real_ip_from 198.41.128.0/17;set_real_ip_from 2400:cb00::/32;set_real_ip_from 2405:8100::/32;set_real_ip_from 2405:b500::/32;set_real_ip_from 2606:4700::/32;set_real_ip_from 2803:f800::/32;set_real_ip_from 2c0f:f248::/32;set_real_ip_from 2a06:98c0::/29; real_ip_header X-Forwarded-For; real_ip_recursive on; deny 70.103.56.2; deny 200.159.140.37; deny 140.207.116.178; deny 221.4.34.18; deny 74.79.253.186; deny 204.11.108.89; deny 204.11.108.94; deny 204.236.220.196; deny 12.229.60.66; deny 73.181.227.5; For more details: http://nginx.org/en/docs/http/ngx_http_realip_module.html 2. Proxy2.1. Internet ProxyTo avoid network restrictions, such as GFW. REFs Nginx Image comes from:https://cdn-1.wp.nginx.com/wp-content/uploads/2016/03/Python-NGINX-architecture-1024x596.png]]></content>
      <categories>
        <category>Tools &amp; Skill</category>
        <category>DevOps</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Rate Limiting</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Percona Monitoring and Management System]]></title>
    <url>%2F2017%2F12%2F26%2FInstall-Percona-Monitoring-and-Management-System%2F</url>
    <content type="text"><![CDATA[Recently I was exhausted about the Page Cleaner in MySQL issue, and in the end I just surrendered and installed this PMM and keep on monitoring. I thought I was able to solve everything via simple show innodb engine status and show global variables/status, etc. But the reality showed me as a fool of wasting time on just viewing numbers flipping. I learned one thing from this: never try to hack it before you really fully master it, which is only WAST OF TIME. Time really matters. This is a quick notes for you to quickly install PMM and start monitoring your MySQL. As usual, picture always show first! Beautiful, uh? &#x1f600; 1. Architecture Diagram2. Install PMM ServerServer could install to any server, to be able to aggregate metrics and show web page with diagrams. 2.1. Install using DockerBefore this you need a docker environment and add current user as docker group.Please refer to: How To Install and Use Docker on Ubuntu 16.04After you install Docker in Ubuntu, please add --iptables=false to ExecStart=/usr/bin/dockerd -H fd:// in file /etc/systemd/system/multi-user.target.wants/docker.service, or you can’t use UFW to control iptable rules as you would like &#x1f625;. For more info, please review:https://github.com/moby/moby/issues/4737#issuecomment-232362106 But from my own experiment, it shows me as if I configure net.ipv4.ip_forward=1 in /etc/sysctl.conf, then it means IP FORWARD will be open itself, but not by Docker, so docker( &gt; 1.13.x ) won’t add a iptables -P FORWARD DROP by default, since Docker itself will think, FORWARD is not opened by me, if it’s opened by default, then it’s mean to be open there and Docker itself won’t change that behavior. For other ways to install PMM server, eg. AWS, please refer to: Installing PMM Server Let start! Pull the image of pmm-server 1docker pull percona/pmm-server:latest Create pmm-data container for persistent PMM data 1234567docker create \ -v /opt/prometheus/data \ -v /opt/consul-data \ -v /var/lib/mysql \ -v /var/lib/grafana \ --name pmm-data \ percona/pmm-server:latest /bin/true Launch PMM Server METRICS_RETENTION only keeps 1 week data.METRICS_MEMORY will make sure pmm server use up to 393216*3/2KB = 576MB. 12345678docker run -d \ -p 8081:80 \ -eMETRICS_RETENTION=168h \ -eMETRICS_MEMORY=393216 \ --volumes-from pmm-data \ --name pmm-server \ --restart always \ percona/pmm-server:latest the above -p 8081:80 maps local 8081 port to container 80 port. After above steps, you open your ${IP}:8081, you should be able to see start page of Percona Monitoring and Management. For more, please refer to:https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.setting-up.html#additional-parameters 3. Install PMM ClientClient has to be install into the MySQL Server instance host. 3.1. Ubuntu Configure Repo 1234wget https://repo.percona.com/apt/percona-release_0.1-4.$(lsb_release -sc)_all.debsudo dpkg -i percona-release_0.1-4.$(lsb_release -sc)_all.debsudo apt-get updatesudo apt-cache search percona You should be able to see next output: 1234percona-xtrabackup-dbg - Debug symbols for Percona XtraBackuppercona-xtrabackup-test - Test suite for Percona XtraBackuppercona-xtradb-cluster-client - Percona XtraDB Cluster database client... Install Client 1sudo apt-get install pmm-client Configure Client 123456pmm-admin config --server 192.168.100.1:8081 # here the port is your server port in PMM server, please notice the firewall rulesOK, PMM server is alive.PMM Server | 192.168.100.1Client Name | ubuntu-amd641Client Address | 192.168.200.1 Add MySQL Instance to MonitorAdd the mysql instance by using pmm-admin 1234567891011121314151617pmm-admin add mysql --user root --password xxxxxxx ## plaese add `--disable-tablestats` if you do have lots of tables, like &gt; 300, or tablestats monotiring will take some time.pmm-admin list # Please note, client address must be correct NIC IP, can't be an IP which pmm-server can't reachpmm-admin 1.5.3PMM Server | ***.***.***.***:8081 Client Name | ***.***.***.***Client Address | ***.***.***.***Service Manager | linux-systemd-------------- ----------------------------- ----------- -------- ------------------------------------------- ------------------------------------------SERVICE TYPE NAME LOCAL PORT RUNNING DATA SOURCE OPTIONS -------------- ----------------------------- ----------- -------- ------------------------------------------- ------------------------------------------mysql:queries ***.***.***.*** - YES root:***@unix(/var/run/mysqld/mysqld.sock) query_source=slowlog, query_examples=true linux:metrics ***.***.***.*** 42000 YES - mysql:metrics ***.***.***.*** 42002 YES root:***@unix(/var/run/mysqld/mysqld.sock) For more commands for pmm-admin, please review:https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html#managing-pmm-client 4. Ports and Set Firewall RulesNext ports has to be opened on PMM Client host to PMM Server IP. Port Meaning 42000 For PMM to collect general system metrics 42001 This port is used by a service which collects query performance data and makes it available to QAN 42002 For PMM to collect MySQL server metrics 42003 For PMM to collect MongoDB server metrics 42004 For PMM to collect ProxySQL server metrics These lines need to be executed in PMM client host, and ***.***.***.*** is PMM server host, to only enable fetching metrics by PMM Server.12345ufw allow proto tcp from ***.***.***.*** to any port 42000ufw allow proto tcp from ***.***.***.*** to any port 42001ufw allow proto tcp from ***.***.***.*** to any port 42002ufw allow proto tcp from ***.***.***.*** to any port 42003ufw allow proto tcp from ***.***.***.*** to any port 42004 This line needs to be executed in PMM Server host, and ***.***.***.*** is the PMM client host, to only enable client to access PMM Server 8081 port.12ufw allow proto tcp from ***.***.***.*** to any port 8081ufw reject proto tcp to any port 8081 For more info, please refer to:https://www.percona.com/doc/percona-monitoring-and-management/glossary.terminology.html#term-ports 5. Email Alert ConfigurationGo into docker instance and vi /etc/grafana/grafana.ini:123456789101112131415161718# The full public facing url you use in browser, used for redirects and emails# If you use reverse proxy and sub path specify full url (with sub path)root_url = https://xxx.xxx.xxx/graph/ # This is your domain name#################################### SMTP / Emailing ##########################[smtp]enabled = truehost = smtp.gmail.com:465user = username # without @gmail.com# If the password contains # or ; you have to wrap it with trippel quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;password = stwixlxwxnmimfsfsf @ this is your app password;cert_file =;key_file =skip_verify = falsefrom_address = username@gmail.comfrom_name = Grafana# EHLO identity in SMTP dialog (defaults to instance_name)ehlo_identity = xxx.xxx.xxx # again your domain name NOTE: please do next things for your gmail: Enable IMAP/SMTP Open 2 factor login for Google Account Config app password for gmail and place above 6. Nginx Forward Port and Setup HTTP AuthActually we still need the HTTPS setup, but that’s beyond our topic here. Setup Nginx by using apt-get install nginx and then setup next site-conf 1234567891011121314151617181920212223242526server &#123; listen 80 ; listen [::]:80 ; server_name ***.***.domain_name; return 301 https://***.***.domain_name$request_uri;&#125;server &#123; listen 443 ssl; listen [::]:443 ssl; server_name ***.***.domain_name; ssl_certificate /etc/nginx/ssl/self-domain.crt; ssl_certificate_key /etc/nginx/ssl/self-domain.key; access_log /var/log/nginx/pmm.access.log; error_log /var/log/nginx/pmm.error.log; auth_basic "Restricted Content"; auth_basic_user_file /etc/nginx/.htpasswd; location / &#123; include /etc/nginx/proxy_params; proxy_set_header Authorization ""; proxy_pass http://localhost:8081; proxy_read_timeout 90s; &#125;&#125; Setup http auth 123echo -n 'user1:' &gt;&gt; /etc/nginx/.htpasswd# input password for `user1` twice here, as `pass1`echo "pass1\npass1\n" | openssl passwd -apr1 -stdin &gt;&gt; /etc/nginx/.htpasswd Reload Nginx 12nginx -t nginx -s reload 7. Highlights and Conclusion PMM is powerful to monitor MySQL Use --iptables=false if you install Docker into Ubuntu OS, which again, proves, CentOS is designed for Server. We can use openssl to setup http password file Use proxy_set_header Authorization &quot;&quot;; to remove the http auth header]]></content>
      <categories>
        <category>Tools &amp; Skill</category>
        <category>Monitor</category>
        <category>Percona</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Percona</tag>
        <tag>Monitoring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Ganglia - Start]]></title>
    <url>%2F2017%2F12%2F18%2FInstall-Ganglia-Start%2F</url>
    <content type="text"><![CDATA[I have been used many monitoring tools for over 4 years, but there has never been a tool which is so strongly strike my heart and meet my needs in the just right way. Most of them are focusing more on the so-called extensible back-end storage, but not many of them has really meet the requirement of monitoring out of box. Of course, that could be the secret of their business money making. Anyway, most of this article follows https://hostpresto.com/community/tutorials/how-to-install-and-configure-ganglia-monitor-on-ubuntu-16-04/ , just to give myself a quick notes to apply. For more will become later in seperate posts, topics like: how to read graphs ganglia level architecture setup to monitor over 1000 servers cached data to reduce IO on disk to promote disk performance RRD file format structure analysis Long no pictures, I love pictures. Here is one for you to enjoy: This post assume you have a Ubuntu 16.04 OS, for CentOS, please note, the service name is a little different, but components should be the same: gmond + gmond-python modules gmetad + rrdtool + rrdcache(optional) + web front 1. Pre-Install1.1. Update System1sudo apt-get update -y sudo apt-get upgrade -y This is easy, I and you will skip this. 1.2. Install LAMP Stack on Master node (gmetad node)Actally we don’t need even mariadb here. Only PHP7 and Apache2 related are required.12sudo apt-get install apache2 php7.0 libapache2-mod-php7.0 php7.0-mbstring php7.0-curl php7.0-zip php7.0-gd php7.0-curl php7.0-mcryptsudo apt-get install mariadb-server php7.0-mysql # this is not required 2. Install Ganglia Monitor NodeHow Ganlia works: Ganglia Monitoring Daemon(gmond) collect data from the server itself and then send to one Ganglia Meta Daemon(gmetad) server to aggregate the data. gmetad will save those data into rrds on disk. (flush to disk) gmetad aggregation data could comes from a gmond data. a lower level of gmetad could send data to a higher level of gmetad node to form a multi-level gmetad cluster, to form as a cluster environment, to make sure such monitoring system as scalable as several thousands of server nodes. Ganglia PHP Web Front-end will fetch rrds data and display on web page. 2.1. Installation steps12sudo apt-get install ganglia-monitor ganglia-monitor-pythonsudo vim /etc/ganglia/gmond.conf 1sudo systemctl start ganglia-monitor 3. Install Ganglia Meta Daemon Node1apt-get install ganglia-monitor ganglia-monitor-python gmetad ganglia-webfrontend 4. Customized Metrics MonitoringReferences: Ganglia Quick Start Ganglia Deaf and Mute How to Install and Configure Ganglia Monitor on Ubuntu 16.04 Gmond 100% CPU usage, just use deaf=yes]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>Monitor</category>
        <category>Ganglia</category>
      </categories>
      <tags>
        <tag>Gmetad</tag>
        <tag>Gmond</tag>
        <tag>Ganlgia Monitor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB MEM Management]]></title>
    <url>%2F2017%2F11%2F24%2FMongoDB-MEM-Management%2F</url>
    <content type="text"><![CDATA[NEVER USE MONGODB ON PRODUCTION. Here the guy also meet my problem: https://news.ycombinator.com/item?id=5704572 This post is about MongoDB memory management mechanism.All it’s using is Page Cache of System. This is a good experience report: https://speakerdeck.com/mitsuhiko/a-year-of-mongodb This URL gives you more detailshttps://www.mongodb.com/presentations/mongodb-memory-management-demystified OK, this post is just for me to check commands to use, to management MongoDB. 1. connect1mongo 127.0.0.1:20001/$&#123;DB_NAME&#125; -u $&#123;USER_NAME&#125; -p $&#123;PASSWORD&#125; 2. db working setUse this to determine how much memory do you need of your working set under your current database.1234567891011121314151617181920&gt; &gt; db.runCommand(&#123;serverStatus: 1, workingSet: 1&#125;).tcmalloc.formattedString------------------------------------------------MALLOC: 7614540648 ( 7261.8 MiB) Bytes in use by applicationMALLOC: + 236527616 ( 225.6 MiB) Bytes in page heap freelistMALLOC: + 657428112 ( 627.0 MiB) Bytes in central cache freelistMALLOC: + 53399376 ( 50.9 MiB) Bytes in transfer cache freelistMALLOC: + 17635000 ( 16.8 MiB) Bytes in thread cache freelistsMALLOC: + 27570336 ( 26.3 MiB) Bytes in malloc metadataMALLOC: ------------MALLOC: = 8607101088 ( 8208.4 MiB) Actual memory used (physical + swap)MALLOC: + 603160576 ( 575.2 MiB) Bytes released to OS (aka unmapped)MALLOC: ------------MALLOC: = 9210261664 ( 8783.6 MiB) Virtual address space usedMALLOC:MALLOC: 326169 Spans in useMALLOC: 56 Thread heaps in useMALLOC: 8192 Tcmalloc page size------------------------------------------------Call ReleaseFreeMemory() to release freelist memory to the OS (via madvise()).Bytes released to the OS take up virtual address space but no physical memory. 3. db.stats()12345678910111213&gt; db.stats()&#123; "db" : "xxxx", // this has been covered due to classification info "collections" : 4, "objects" : 39817003, "avgObjSize" : 113.20676571262784, "dataSize" : 4507554130, "storageSize" : 2112126976, "numExtents" : 0, "indexes" : 12, "indexSize" : 2265329664, "ok" : 1&#125;]]></content>
      <categories>
        <category>Database</category>
        <category>NoSQL</category>
        <category>Document</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Memory</tag>
        <tag>PageCache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CloudFlare doesn't support ETag]]></title>
    <url>%2F2017%2F10%2F20%2FCloudFlare-doesn-t-support-ETag%2F</url>
    <content type="text"><![CDATA[Because only Nignx &gt;= 1.3.3 have etag options.How stupid of this blog….]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>DevOps</category>
        <category>Nginx</category>
        <category>Cache</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Cache</tag>
        <tag>CloudFlare</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My conf]]></title>
    <url>%2F2017%2F10%2F19%2FMy-Fluentd-conf%2F</url>
    <content type="text"><![CDATA[Personal material, please leave. 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]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>DevOps</category>
        <category>Logging</category>
      </categories>
      <tags>
        <tag>Fluentd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup ElasticSearch, Fluentd, Kibana in Kubernetes]]></title>
    <url>%2F2017%2F10%2F18%2FSetup-ElasticSearch-Fluentd-Kibana%2F</url>
    <content type="text"><![CDATA[Just a post about what we need to setup the ElasticSearch/Fluentd/Kibana. For detailed and how do they work, please reference the official site. Here is my final Kibana screenshot: Beautiful, isn’t it? This post will setup EFK tool chain in Kubernets. 1. Setup ElasticSearch in Kubernets1.1. Setup ElasticSearch ReplicationControllerHere is ElasticSearch ReplicationController yaml, please note the volume is using hostPath because I’m using nodeSelector to deploy the ElasticSearch, which makes it sticky to the specific logging dedicated node.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051apiVersion: v1kind: ReplicationControllermetadata: name: elasticsearch-logging-v1 namespace: kube-system labels: k8s-app: elasticsearch-logging version: v1 kubernetes.io/cluster-service: "true"spec: replicas: 2 selector: k8s-app: elasticsearch-logging version: v1 template: metadata: labels: k8s-app: elasticsearch-logging version: v1 kubernetes.io/cluster-service: "true" spec: nodeSelector: logging: "true" containers: - image: gcr.io/google_containers/elasticsearch:v2.4.1 name: elasticsearch-logging resources: # need more cpu upon initialization, therefore burstable class limits: cpu: 1000m requests: cpu: 100m env: - name: "ES_MAX_MEM" value: "1500m" - name: "ES_MIN_MEM" value: "500m" ports: - containerPort: 9200 name: db protocol: TCP - containerPort: 9300 name: transport protocol: TCP volumeMounts: - name: es-persistent-storage mountPath: /data volumes: - name: es-persistent-storage hostPath: path: /mnt/volume-sfo2-03/logging_data 1.2. Setup ElasticSearch ServiceIt’s the plain service yaml file in Kubernetes.123456789101112131415161718apiVersion: v1kind: Servicemetadata: name: elasticsearch-logging namespace: kube-system labels: k8s-app: elasticsearch-logging kubernetes.io/cluster-service: "true" kubernetes.io/name: "Elasticsearch"spec: type: NodePort ports: - port: 9200 protocol: TCP targetPort: db nodePort: 31001 selector: k8s-app: elasticsearch-logging 1.3. Accessing ElasticSearch RequestJust for test, use curl command to issue a request:1234567891011121314[root@kubernetes-master logging]# curl 127.0.0.1:31001&#123; "name" : "Ogress", "cluster_name" : "kubernetes-logging", "cluster_uuid" : "fOjPK7t2TqeR-GlhqGhzag", "version" : &#123; "number" : "2.4.1", "build_hash" : "c67dc32e24162035d18d6fe1e952c4cbcbe79d16", "build_timestamp" : "2016-09-27T18:57:55Z", "build_snapshot" : false, "lucene_version" : "5.5.2" &#125;, "tagline" : "You Know, for Search"&#125; 2. Setup Kibana in Kubernets2.1. Setup Kibana DeploymentHere is Kibana Deployment yaml file, we also make it sticky to logging node with nodeSelector. Make sure KIBANA_BASE_URL environment value is set to emtpy if you’re going to use NodePort to access Kibana. Also, Kibana need to talk to ElasticSearch by using http://elasticsearch-logging:9200, so please make sure kube-dns works correctly before setting up the Kibana Service. I will write another post about how kube-dns works. 1234567891011121314151617181920212223242526272829303132333435363738394041apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: kibana-logging namespace: kube-system labels: k8s-app: kibana-logging kubernetes.io/cluster-service: "true"spec: replicas: 1 selector: matchLabels: k8s-app: kibana-logging template: metadata: labels: k8s-app: kibana-logging spec: nodeSelector: logging: "true" containers: - name: kibana-logging image: gcr.io/google_containers/kibana:v4.6.1 resources: # keep request = limit to keep this container in guaranteed class limits: cpu: 100m requests: cpu: 100m env: - name: "NODE_OPTIONS" # use this to control Kibana memory usage, and promote Kibana speed value: "--max-old-space-size=100" - name: "ELASTICSEARCH_URL" value: "http://elasticsearch-logging:9200" - name: "KIBANA_BASE_URL" #value: "/api/v1/proxy/namespaces/kube-system/services/kibana-logging" value: "" ports: - containerPort: 5601 name: ui protocol: TCP 2.2. Setup Kibana Service123456789101112131415161718apiVersion: v1kind: Servicemetadata: name: kibana-logging namespace: kube-system labels: k8s-app: kibana-logging kubernetes.io/cluster-service: "true" kubernetes.io/name: "Kibana"spec: type: NodePort ports: - port: 5601 protocol: TCP targetPort: ui nodePort: 31000 selector: k8s-app: kibana-logging 2.3. Accessing Kibana ServiceJust for test, use curl command to issue a request:12345678910[root@kubernetes-master logging]# curl 127.0.0.1:31000&lt;script&gt;var hashRoute = '/app/kibana';var defaultRoute = '/app/kibana';var hash = window.location.hash;if (hash.length) &#123; window.location = hashRoute + hash;&#125; else &#123; window.location = defaultRoute;&#125;&lt;/script&gt; 3. Setup FluentdThis is the MOST complicated part. Before setting up fluentd, we need to test fluentd.conf locally. You can setup fluentd in a VM to test. 3.1. Install Fluentd Locally or in a VMFollow Installation Notes here. Please make sure you install the latest version, which is v0.12.40. If you can’t get version of v0.12.40 after your installation, please use embeded gem to install. Follow this post. Here is what I do have locally:123456morganwu@localhost:~$ /opt/td-agent/embedded/bin/gem list fluentd*** LOCAL GEMS ***fluentd (0.12.40)fluentd-ui (0.4.4) 3.2. Install Fluentd ElasticSearch PluginUse the embedded gem to install fluent-plugin-elasticsearch12sudo apt-get install build-essential/opt/td-agent/embedded/bin/gem install fluent-plugin-elasticsearch 3.3. Workout the fluentd.conf little by little Use a Ruby regular expression editor for testing the reqular expression. Use For a Good Strftime to test the time format. Use Fluetnd Documents carefully. Use stdout plugin to debug Fluentd conf. 3.4. Create ConfigMap in KubernetesAssume you do have a fluentd.conf now, let’s create one config map for fluentd to use.1234[root@kubernetes-master logging]# kubectl -n kube-system create cm cm-fluentd-conf --from-file=td-agent.conf=./cm-fluentd-conf[root@kubernetes-master logging]# kubectl -n kube-system get cmNAME DATA AGEcm-fluentd-conf 1 6d 3.5. Setup Fluentd DaemonSetPlease note, we are mounting the cm-fluentd-conf volume to /etc/fluent/config.d directory inside the container. When we create the config map above, we specify td-agent.conf=./cm-fluentd-conf, which means inside the container, there will be a file td-agent.conf and it’s content comes from ./cm-fluentd-conf provided above to create the config map. Please note, it has the permission to read every logs in the /var/log directory. To make it as DaemonSet to make sure it’s running on each server node. We should make sure the buffer_chunk_limit*buffer_chunk_size(buffer-plugin-overview) won’t exceed the limits of memory specified in the yaml file next.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748apiVersion: extensions/v1beta1kind: DaemonSetmetadata: name: fluentd-es-v2.0.1 namespace: kube-system labels: k8s-app: fluentd-es kubernetes.io/cluster-service: "true" version: v2.0.1spec: template: metadata: labels: k8s-app: fluentd-es kubernetes.io/cluster-service: "true" version: v2.0.1 spec: containers: - name: fluentd-es image: gcr.io/google_containers/fluentd-elasticsearch:v2.0.1 env: - name: FLUENTD_ARGS value: --no-supervisor -q resources: limits: memory: 512Mi requests: cpu: 100m memory: 200Mi volumeMounts: - name: cm-fluentd-conf mountPath: /etc/fluent/config.d - name: varlog mountPath: /var/log - name: varlibdockercontainers mountPath: /var/lib/docker/containers readOnly: true terminationGracePeriodSeconds: 30 volumes: - name: cm-fluentd-conf configMap: name: cm-fluentd-conf - name: varlog hostPath: path: /var/log - name: varlibdockercontainers hostPath: path: /var/lib/docker/containers 4. Overview the deployed components in Kubernetes123456789101112131415161718192021222324[root@kubernetes-master logging]# kubectl -n kube-system get rc,svc,cm,poNAME DESIRED CURRENT READY AGErc/elasticsearch-logging-v1 2 2 2 17dNAME CLUSTER-IP EXTERNAL-IP PORT(S) AGEsvc/elasticsearch-logging 10.254.59.190 &lt;nodes&gt; 9200:31001/TCP 20dsvc/kibana-logging 10.254.148.174 &lt;nodes&gt; 5601:31000/TCP 25dsvc/kube-dns 10.254.0.10 &lt;none&gt; 53/UDP,53/TCP 25dsvc/kubernetes-dashboard 10.254.151.70 &lt;none&gt; 9090/TCP 26dNAME DATA AGEcm/cm-fluentd-conf 1 6dNAME READY STATUS RESTARTS AGEpo/elasticsearch-logging-v1-19r6r 1/1 Running 0 17dpo/elasticsearch-logging-v1-7xcq4 1/1 Running 1 17dpo/fluentd-es-v2.0.1-79350 1/1 Running 0 6dpo/fluentd-es-v2.0.1-kbhq2 1/1 Running 0 6dpo/fluentd-es-v2.0.1-rbmsv 1/1 Running 0 6dpo/fluentd-es-v2.0.1-rxvg2 1/1 Running 4 6dpo/fluentd-es-v2.0.1-sb8gc 1/1 Running 1 6dpo/kibana-logging-1532071719-69rd2 1/1 Running 0 3dpo/kube-dns-v10-244463722-vmnr2 3/3 Running 0 7dpo/kubernetes-dashboard-1786549131-m9r9r 1/1 Running 4 17d]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>DevOps</category>
        <category>Logging</category>
      </categories>
      <tags>
        <tag>Fluentd</tag>
        <tag>ElasticSearch</tag>
        <tag>Kibana</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作の思考]]></title>
    <url>%2F2017%2F07%2F16%2F%E5%B7%A5%E4%BD%9C%E3%81%AE%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[No pain, no gain. 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]]></content>
      <categories>
        <category>职场</category>
        <category>合作</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>为人处事</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis Scan Too Slow in Django Application]]></title>
    <url>%2F2017%2F07%2F16%2FDjango-Redis-Scan-Too-Long%2F</url>
    <content type="text"><![CDATA[Recently I met an issue that one of our APIs of the online production servers is very slow due to redis scan. From next graph generated by NewRelic, we found AVERAGE response time is 2930ms while redis scan could take 2680ms, which is 2680/2930 = 91.4% portion of the total time. Why redis scan cost this much? From our local environment, we never noticed such huge performance issue. 1. Locate the culprit1.1. PhenomenonAfter that I dug into the source code and found next code snippet in our Django Application and this is the only code of this API to access redis, so this must be the culprit of this issue. 12345from django.core.cache import cache// ...... more code is ommitted herecache.delete_pattern(CACHE_KEY) From the above code, we could know that redis is treated as a cache server here. So what does delete_pattern do on the earth? So I traced the code and in the end found next delete_pattern definition from django_redis.client.default.DefaultClient#delete_pattern. 1234567891011121314151617def delete_pattern(self, pattern, version=None, prefix=None, client=None): """ Remove all keys matching pattern. """ if client is None: client = self.get_client(write=True) pattern = self.make_key(pattern, version=version, prefix=prefix) try: count = 0 for key in client.scan_iter(pattern): // please note here client.delete(key) count += 1 return count except _main_exceptions as e: raise ConnectionInterrupted(connection=client, parent=e) The code calls client.scan_iter(pattern) to get next cursor and try to delete that key of the cursor. 1.2. Redis scanFrom the official site of redis scan, we can combine MATCH and COUNT in the SCAN command.123456789101112131415161718192021222324252627282930313233redis 127.0.0.1:6379&gt; scan 0 MATCH *11*1) "288"2) 1) "key:911"redis 127.0.0.1:6379&gt; scan 288 MATCH *11*1) "224"2) (empty list or set)redis 127.0.0.1:6379&gt; scan 224 MATCH *11*1) "80"2) (empty list or set)redis 127.0.0.1:6379&gt; scan 80 MATCH *11*1) "176"2) (empty list or set)redis 127.0.0.1:6379&gt; scan 176 MATCH *11* COUNT 10001) "0"2) 1) "key:611" 2) "key:711" 3) "key:118" 4) "key:117" 5) "key:311" 6) "key:112" 7) "key:111" 8) "key:110" 9) "key:113" 10) "key:211" 11) "key:411" 12) "key:115" 13) "key:116" 14) "key:114" 15) "key:119" 16) "key:811" 17) "key:511" 18) "key:11"redis 127.0.0.1:6379&gt; The above command returned me with a 0 means, in the first line of response, there is no more data to scan. If not 0, the number is next cursor to be used to scan. It is important to note that the MATCH filter is applied after elements are retrieved from the collection, just before returning data to the client. This means, firstly it will retrieve the data, and then will use a filter to match the retrieved data.Does this means there could be multiple back-and-forth between the client and server, and which will cost the huge latency of this redis scan? If that’s true, we just need an extra easy COUNT parameter. 2. Validation in local environment2.1. KEYS numberHow many keys are there in our online production redis server?123127.0.0.1:6379[10]&gt; INFO# more code is ommitted heredb10:keys=6986,expires=6986,avg_ttl=40118300 From above code, we can know there are nearly 7000 keys in our server. 2.2. Client-Server latencyI simply use the ping command to get the latency and it’s 3.5 ms. Due to classified cause, sensitive info is hidden.1234567[xxx@xxxx.xxx.xxx.xxx ~]$ ping xxxx.comPING xxxx.com (xx.xx.xx.xx) 56(84) bytes of data.64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=1 ttl=58 time=3.58 ms64 bytes from xxxx.com (xx.xx.xx.xx): icmp_seq=2 ttl=58 time=3.46 ms--- xxxx.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 3004msrtt min/avg/max/mdev = 3.461/3.498/3.585/0.050 ms 2.3. Simulate the Network Latency LocallyFrom this post, I successfully simulated the network latency.1234567(venv) vagrant@localhost:~ $ sudo tc qdisc add dev lo root netem delay 2ms (venv) vagrant@localhost:~ $ ping 127.0.0.1PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=4.34 ms--- 127.0.0.1 ping statistics ---1 packets transmitted, 1 received, 0% packet loss, time 0msrtt min/avg/max/mdev = 4.348/4.348/4.348/0.000 ms So I made the lo NIC as slow as around 4.3 ms. 2.4. Measure the time of cleaning the cache before and after setting the delaySince this is a Django application, so I can use Django Shell to try to execute the clean cache statement, which as a result operate the local redis server.12345(venv) vagrant@localhost:~ $ time python manage.py shell -c 'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all")'real 0m8.404suser 0m0.944ssys 0m0.696s What if we don’t set the delay option, what’s would the timing metric be?12345(venv) vagrant@lcoalhost:~ $ time python manage.py shell -c 'from django.core.cache import cache; cache.delete("view_cache:dispatch:123456789:category_slug:all")'real 0m4.366suser 0m0.800ssys 0m0.648s From the above test, we can see that before and after will make a huge difference as large as 4 seconds !!! And this is under the network latency of 4.3 ms. If the network latency is around 3.5 ms, the total time of cleaning cache could be as large as 3 seconds, which is very close the above phenomenon! Now, we can get a conclusion: network latency will influence too much on the redis scan performance. SCAN will call the redis multiple times back-and-forth, which in the end, cause a large redis scan time. How to solve the problem? Use the COUNT parameter! 3. Solve the problem3.1. Estimation of deleting time againFrom the definition of delete_pattern method, we can see it just scan_iter the redis using the default COUNT which is 10. Let’s give an estimation here: The Redis Scan use a sequential scan with COUNT as 10, there will be 6986/10 = 700 times to scan. Each scan costs at least 1 ping time, which is 3.5 ms. In total, 3.5*700 = 2450 ms, which is close to the 2680 ms of the phenomenon above. Interesting. From above estimation, we are more confident of our guess now, and using the COUNT must be the solution! But the delete_pattern method provided by the default client doesn’t use COUNT parameter, so what I can do is to create a new Redis Client which is inherited from the default Client and override this delete_pattern method to use the COUNT parameter. Here is my code:123456789101112131415161718192021222324252627282930313233import socket# Compatibility with redis-py 2.10.x+from redis.exceptions import ConnectionErrorfrom redis.exceptions import ResponseErrorfrom django_redis.exceptions import ConnectionInterrupted, CompressorErrorfrom django_redis.client import DefaultClienttry: from redis.exceptions import TimeoutError, ResponseError _main_exceptions = (TimeoutError, ResponseError, ConnectionError, socket.timeout)except ImportError: _main_exceptions = (ConnectionError, socket.timeout)class CacheClient(DefaultClient): def delete_pattern(self, pattern, itersize=None, version=None, prefix=None, client=None): """ Remove all keys matching pattern. """ if client is None: client = self.get_client(write=True) pattern = self.make_key(pattern, version=version, prefix=prefix) try: count = 0 for key in client.scan_iter(pattern, count=itersize): // have a itersize here client.delete(key) count += 1 return count except _main_exceptions as e: raise ConnectionInterrupted(connection=client, parent=e) When I call the code, I make sure to pass the itersize very large, say, 10,000 to eliminate too many back-and-forth RPC calls. 3.2. Enable the customized redis client classOf course we need to enable this client in our settings/local.py123456789101112CACHES = &#123; 'default': &#123; 'BACKEND': 'django_redis.cache.RedisCache', # redis server 'LOCATION': os.environ.get('NOJ_REDIS_CACHE_URL', 'redis://localhost:6379/10'), 'OPTIONS': &#123; 'PARSER_CLASS': 'redis.connection.HiredisParser', 'CLIENT_CLASS': 'common.cache_client.CacheClient' // enable the customized redis client class &#125; &#125;&#125; 3.3. Test after fixingI added a 10000 after my delete_pattern call.12345(venv) vagrant@localhost:~ $ time python manage.py shell -c 'from django.core.cache import cache; cache.delete_pattern("view_cache:dispatch:123456789:category_slug:all",10000)' real 0m4.021suser 0m0.784ssys 0m0.612s The time now is very close to the time before setting the network latency, which means, delete_pattern won’t be a performance issue anymore, since it only has one RPC call now. Cheers, bro! 4. Conclusion Don’t be afraid of the library source code, just dig into it. Use tc command to simulate the network latency. MATCH inRedis Scan is to filter on top of the retrieved data. Default COUNT of Redis Scan is 10. Use python manage.py shell to execute ad-hoc test. Use ping to get network latency. Use INFO to get redis statistical information. References Redis Scan tc: Adding simulated network latency to your Linux server]]></content>
      <categories>
        <category>Database</category>
        <category>NoSQL</category>
        <category>In-Memory</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Redis</tag>
        <tag>Scan</tag>
        <tag>Performance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debug Ansible and Tiny Introduction of PlayBook]]></title>
    <url>%2F2017%2F06%2F29%2FDebug-Ansible%2F</url>
    <content type="text"><![CDATA[Ansible is a popular dev-ops tools for us to execute ad-hoc commands immediately on large mounts of machines in parallel which accelerate our working speed. It’s simple but powerful and compatible with different OS platforms. Even more, it has lots of pre-defined modules for us to use, which significantly make the dream of reusing Dev-Ops scripts come true. However, when you’re goging to use this fantastic tool, how to debug when you’re executing the ansible play-book with flow of commands? It looks like a unstoppable flow. So we need two things for debugging ansible playbook: Stoppable Print Debug Message This article will also give some tiny intro about play-book. For more info, please review the official documents. 1. StoppableSo, here we have a trick, using the fail module to stop the execution process. Add next code snippet at wherever you want to stop. 12345# more is here- name: "STOP ME" fail: msg="This is the debugging stop" when: 1==1 After that, you could see the message like below:1234567891011121314# more is here ... TASK [pre-ansible : STOP ME] ******************************************************fatal: [node-1-master]: FAILED! =&gt; &#123;"changed": false, "failed": true, "msg": "This is the debugging stop"&#125;fatal: [node-2-slave-1]: FAILED! =&gt; &#123;"changed": false, "failed": true, "msg": "This is the debugging stop"&#125;fatal: [lcoj-judger]: FAILED! =&gt; &#123;"changed": false, "failed": true, "msg": "This is the debugging stop"&#125;NO MORE HOSTS LEFT ************************************************************* to retry, use: --limit @cluster.retryPLAY RECAP *********************************************************************lcoj-judger : ok=5 changed=1 unreachable=0 failed=1 node-1-master : ok=5 changed=1 unreachable=0 failed=1 node-2-slave-1 : ok=5 changed=1 unreachable=0 failed=1 2. Dry Run with --checkNext won’t execute the whole playbook, but will give a run through.1ansible-playbook foo.yml --check 3. Print Debugging Message with VarOf course you can print debug message with the fail module. However, it has a born behavior: stop the process, which maybe unexpected. Here we use the debug module to print statements during execution. Next is an example of printing the eth1 address of each nodes in the inventory file. 12345# more is here...- debug: msg: "hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4.address &#125;&#125; &#123;&#123;item&#125;&#125;" with_items: "&#123;&#123; groups['all'] &#125;&#125;" Here is the output of such debug msg:12345678910111213141516171819202122232425262728293031323334353637TASK [pre-ansible : debug] *****************************************************ok: [node-2-slave-1] =&gt; (item=node-1-master) =&gt; &#123; "item": "node-1-master", "msg": "hosts mapping is: 192.168.33.10 node-1-master"&#125;ok: [node-2-slave-1] =&gt; (item=node-2-slave-1) =&gt; &#123; "item": "node-2-slave-1", "msg": "hosts mapping is: 192.168.33.11 node-2-slave-1"&#125;ok: [node-2-slave-1] =&gt; (item=lcoj-judger) =&gt; &#123; "item": "lcoj-judger", "msg": "hosts mapping is: 192.168.33.12 lcoj-judger"&#125;ok: [node-1-master] =&gt; (item=node-1-master) =&gt; &#123; "item": "node-1-master", "msg": "hosts mapping is: 192.168.33.10 node-1-master"&#125;ok: [node-1-master] =&gt; (item=node-2-slave-1) =&gt; &#123; "item": "node-2-slave-1", "msg": "hosts mapping is: 192.168.33.11 node-2-slave-1"&#125;ok: [node-1-master] =&gt; (item=lcoj-judger) =&gt; &#123; "item": "lcoj-judger", "msg": "hosts mapping is: 192.168.33.12 lcoj-judger"&#125;ok: [lcoj-judger] =&gt; (item=node-1-master) =&gt; &#123; "item": "node-1-master", "msg": "hosts mapping is: 192.168.33.10 node-1-master"&#125;ok: [lcoj-judger] =&gt; (item=node-2-slave-1) =&gt; &#123; "item": "node-2-slave-1", "msg": "hosts mapping is: 192.168.33.11 node-2-slave-1"&#125;ok: [lcoj-judger] =&gt; (item=lcoj-judger) =&gt; &#123; "item": "lcoj-judger", "msg": "hosts mapping is: 192.168.33.12 lcoj-judger"&#125; In your play-book, please setup the gather_facts to be true. In this way, we can print the ipv4.adderss of this host.And the pre-ansible is the role where the above code snippet lies in. 1234567- hosts: all gather_facts: true sudo: yes roles: - pre-ansible tags: - pre-ansible Also, this debug module with msg can print an object with all its field values. So if our msg above changes to1"hosts mapping is: &#123;&#123; hostvars[item]['ansible_eth1'].ipv4 &#125;&#125; &#123;&#123;item&#125;&#125;" it will print more message. 4. Intro about Play-BookIn the section of Print Debugging Message with Var, we already saw one easy play, here is another playbook with only one play. Please remember we do have --- at the first line. 123456789101112131415161718192021---- hosts: webservers vars: http_port: 80 max_clients: 200 remote_user: root tasks: - name: ensure apache is at the latest version yum: name=httpd state=latest - name: write the apache config file template: src=/srv/httpd.j2 dest=/etc/httpd.conf notify: - restart apache - name: ensure apache is running (and enable it at boot) service: name=httpd state=started enabled=yes handlers: - name: restart apache service: name=httpd state=restarted 4.1. RolesWith Roles, we can reuse the tasks commands. For example, next play, we will execute the play with roles pre-ansible. Of course, we can execute more roles, just append the role directory name under roles field.12345- hosts: all gather_facts: true sudo: yes roles: - pre-ansible Here is a glance of directory structure, we can see pre-ansible directory in the roles directory.123456789101112131415161718192021222324[03:38 PM morganwu@promote noj-deploy]$ tree -L 2.├── ansible.cfg├── cluster.yml├── group_vars│ └── all.yml├── inventory.me├── roles│ ├── common│ ├── docker│ ├── etcd│ ├── flannel│ ├── kubernetes│ ├── kubernetes-addons│ ├── leetcode│ ├── leetcode-backend│ ├── master│ ├── nginx│ ├── node│ ├── opencontrail│ ├── opencontrail-provision│ └── pre-ansible├── setup.sh└── setup_leetcode.sh 4.1.1. Use Condition when Choosing RolesWe even can use condition expression when choosing specific roles,123456789- hosts: - etcd - masters - nodes sudo: yes roles: - &#123; role: flannel, when: networking == 'flannel' &#125; tags: - network-service-install This will only execute the roles of flannel when the networking varialbe is flannel. 4.2. TagsWith Tags, we can run specific play and it makes our dev-ops work more flexible, in a non-linear style. We will still using the example above. Here we have defined a tag pre-ansible1234567- hosts: all gather_facts: true sudo: yes roles: - pre-ansible tags: - pre-ansible When we execute playbook with --tags, it will only execute this play and skip all other plays without this specific tag.1[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags=pre-ansible 4.2.1. Execute Multiple TagsIf you want to execute multiple tags once, just append with more tag name at the --tags, eg. 1[03:44 PM morganwu@promote noj-deploy]$ ansible-playbook -i inventory.me cluster.yml --tags="pre-ansible,etcd,docker" This will execute the pre-ansible, etcd, docker tags. 4.3. Var/String in a conditionHere is an example inventory_hostname is a varaible, but “codential” and “node-1-master” are all strings. The most important here is: the condition in the when, we use &#39; to wrap up. 12345678910111213141516- include: frontend.yml when: '(inventory_hostname in groups["codential"]) or (inventory_hostname == groups["nodes"][0])' vars: service_port: 8001 node_port: '&#123;&#123; cfg[env].node_port_frontend &#125;&#125;'- name: register nginx proxy become: true when: 'inventory_hostname == "node-1-master"' include: roles/leetcode/tasks/register-nginx-proxy.yml vars: service_port: 8001 node_port: '&#123;&#123; cfg[env].node_port_frontend &#125;&#125;' nginx_template: "frontend/&#123;&#123; env &#125;&#125;-nginx-conf.j2" nginx_conf: "/etc/nginx/conf.d/&#123;&#123; namespace &#125;&#125;-&#123;&#123; env &#125;&#125;.conf" iptables_comment: "&#123;&#123; namespace &#125;&#125;-&#123;&#123; env &#125;&#125;-node-port" Extra to learn: iptables related diagram: From https://cesarti.files.wordpress.com/2012/02/iptables.gif 5. Execute SUDO commands, without NO_PASSWORD settingsLast but not the least, however sometimes very useful. Is for Ad-Hoc command in Ansible. We all know it’s possible to execute ad-hoc ansible command for bunch of servers. But problems will come when you need to execute sudo command, the command from the server side will always be waiting for inputing the password to be continued. We can use --sudo to solve this. However, you have to make sure all the users in the nodes server list has the same password here. 123456789101112131415161718192021222324252627282930# This is the command[05:16 PM morganwu@morgan-yinnut my-deploy]$ ansible -i inventory.me nodes -m shell -a 'curl -L https://toolbelt.treasuredata.com/sh/install-ubuntu-xenial-td-agent2.sh | sh' --sudoSUDO password: node1 | SUCCESS | rc=0 &gt;&gt;============================== td-agent Installation Script ==============================This script requires superuser access to install apt packages.You will be prompted for your password by sudo.OKIgn:1 http://apt.newrelic.com/debian newrelic InReleaseHit:2 http://apt.newrelic.com/debian newrelic ReleaseHit:3 http://mirrors.linode.com/ubuntu xenial InReleaseGet:4 http://mirrors.linode.com/ubuntu xenial-updates InRelease [102 kB]Get:5 http://mirrors.linode.com/ubuntu xenial-backports InRelease [102 kB]Get:6 http://packages.treasuredata.com/2/ubuntu/xenial xenial InRelease [2,578 B]Get:8 http://security.ubuntu.com/ubuntu xenial-security InRelease [102 kB]Get:9 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib amd64 Packages [399 B]Get:10 http://packages.treasuredata.com/2/ubuntu/xenial xenial/contrib i386 Packages [399 B]Ign:11 https://get.docker.com/ubuntu docker InReleaseHit:12 https://get.docker.com/ubuntu docker ReleaseFetched 310 kB in 0s (381 kB/s)Reading package lists...Reading package lists...Building dependency tree...Reading state information...The following NEW packages will be installed: td-agent0 upgraded, 1 newly installed, 0 to remove and 137 not upgraded.# More output comes here 6. ConclusionAnsible is easy but powerful with lots of pre-defined modules. We can use fail module to stop execution process ann use debug module to print message with variables. Roles are designed for task reuuse. Tags are designed to execute the specific Play(s) in one playbook. Use --sudo to execute sudo commands in ad-hoc style.]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>DevOps</category>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>Ansible</tag>
        <tag>Debug</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode Exercises]]></title>
    <url>%2F2017%2F06%2F13%2FLeetcode-Exercise%2F</url>
    <content type="text"><![CDATA[This is a leetcode algorithm list for me to track my thought and solutions. 1. Two-SumProblem Description: 1. Two-Sum 1.1. Golang123456789101112131415func twoSum(nums []int, target int) []int &#123; size := len(nums) for i := 0; i &lt; size; i++ &#123; for j := i + 1; j &lt; size; j++ &#123; if nums[i] + nums[j] == target &#123; result := []int&#123;i, j&#125; sort.Slice(result, func(i, j int) bool &#123; return result[i] &lt;= result[j] &#125;) return result &#125; &#125; &#125; return []int&#123;0, 0&#125;&#125; 1.2. Java123456789101112131415161718class Solution &#123; public int[] twoSum(int[] numbers, int target) &#123; int [] res = new int[2]; if(numbers==null||numbers.length&lt;2) return res; HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;Integer,Integer&gt;(); for(int i = 0; i &lt; numbers.length; i++)&#123; if(!map.containsKey(target-numbers[i]))&#123; map.put(numbers[i],i); &#125;else&#123; res[0]= map.get(target-numbers[i]); res[1]= i; break; &#125; &#125; return res; &#125;&#125; 2. Path SumProblem Description: 112. Path Sum 2.1. Java1234567891011121314151617181920212223/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */public class Solution &#123; /* Test if there is a path from current node to leaf node */ public boolean hasPathSum(TreeNode root, int sum) &#123; if(root == null) return false; if(root.left == null &amp;&amp; root.right == null) &#123; if (sum == root.val) return true; else return false; &#125; sum = sum - root.val; // take value from current root node return hasPathSum(root.left, sum) || hasPathSum(root.right, sum); &#125;&#125; 3. Reverse Words in a StringProblem Description: 151. Reverse Words in a String 3.1. Java1234567891011121314public class Solution &#123; public String reverseWords(String s) &#123; s = s.trim(); if(s.equals("")) return ""; String[] str_arr = s.split("\\s+"); StringBuilder sb = new StringBuilder(""); for(int i = str_arr.length-1; i&gt;0; i--) &#123; sb.append(str_arr[i] + " "); &#125; sb.append(str_arr[0]); return sb.toString(); &#125;&#125; 4. Combine Two TablesProblem Description: 175. Combine Two Tables 4.1. MySQL12345# Write your MySQL query statement belowselect p.FirstName, p.LastName, a.City, a.State from Person as p left join Address as a on p.PersonId = a.PersonId; 5. Fizz BuzzProblem Description: 412. Fizz Buzz 5.1. Java12345678910111213141516171819202122232425public class Solution &#123; private boolean multiple(int i, int modValue)&#123; return i%modValue==0; &#125; public List&lt;String&gt; fizzBuzz(int n) &#123; List&lt;String&gt; list = new ArrayList(); for(int i = 1;i &lt;= n;i++) &#123; String str = String.valueOf(i); if(multiple(i,3) &amp;&amp; multiple(i,5)) &#123; list.add("FizzBuzz"); &#125; else if(multiple(i,3) &amp;&amp; !multiple(i,5)) &#123; list.add("Fizz"); &#125; else if(!multiple(i,3) &amp;&amp; multiple(i,5)) &#123; list.add("Buzz"); &#125; else &#123; list.add(str); &#125; &#125; return list; &#125;&#125;]]></content>
      <categories>
        <category>Read &amp; Think</category>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Simple Swift Intro]]></title>
    <url>%2F2017%2F06%2F12%2FSimple-Swift-Intro%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Emoji File Name under MacOSX]]></title>
    <url>%2F2017%2F06%2F09%2FEmoji-File-Name-under-MacOSX%2F</url>
    <content type="text"><![CDATA[Recently was too busy on small stuff that I can’t focus on myself on the real thing I need to tackle. Annoying… Anyway, I still find something fun which also stimulate my mind! Interesting! Ah! Here is my code of generating this:12345678910111213#!/bin/bash set -e for i in &#123;1..20&#125;do filename='👍 ' for (( j=1;j&lt;=$i;j++ )) do filename+='👍 ' done echo $filename touch "$filename"done More about Emoji…]]></content>
      <categories>
        <category>Fun</category>
        <category>Code</category>
        <category>Mac OSX</category>
      </categories>
      <tags>
        <tag>Emoji</tag>
        <tag>Mac OSX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Transfer 15TB of Tiny Files]]></title>
    <url>%2F2017%2F06%2F05%2FTransfer-15TB-of-Tiny-Files%2F</url>
    <content type="text"><![CDATA[Days ago, when I was setting up an Internet Cafe System, I met a problem of transferring 600+ GB gaming files from one machine to another. Most of them are small files, I have two options: Compress and then transfer, which will cost lots of CPU, and of course time. Directly transfer these files, which will be very slow since too many tiny files. In the End, I used the rsync method. Relax time, here is the Windows start animation. 1. So, How?1.1. The Rsync methodMy scenario was transferring files from Windows XP to a Linux Server. About how to setup Cygwin in Windows XP/2003, please review Setup Cygwin in Windows XP/2003 12$ rsync -a -z -vvv -S -e 'ssh -o "ServerAliveInterval 7200"' \ /path/of/source_dir root@destination_server:/path/of/destination_dir This will transfer /path/of/source_dir to /path/of/destination_dir by using SSH tunnel and keep alive for 2 hours, using Rsync algorithm. 1.2. Compress &amp; Package &amp; TransferAs above, we mentioned that we would like to compress these files and then transfer. Here is how we implement it by using tar and pigz(parallel gzip) command which wins over the rsync method. Source Machine1$ tar -cf - -C /path/of/small/files . | pigz | nc -l 9876 Destination Machine (Download)1$ nc source_machine_ip 9876 | pigz -d | tar -xf - -C /put/stuff/here Destination Machine (Archive)1$ nc source_machine_ip 9876 &gt; smallstuff.tar.gz 2. But which one is better?The result is nc + pigz solution always win for the first time transfer, no matters for large files or small files. My laptop has 4 CPU cores built-in, so the rsync solution is about 3-4 times slower than the nc + pigz solution for the first-time transfer. However, for incremental files update, of course, rsync wins over another since it only compute the changes by using modification timestamp and size . Here is the script I used to generate 640,000 files with each as size of 8 kb. 1234567891011#!/bin/bashfor i in &#123;1..10&#125;; do for j in &#123;1..10&#125;; do mkdir -p "test_$i/test_$j" cd "test_$i/test_$j" for k in &#123;1..6400&#125;; do dd if=/dev/zero of=test_"$k" bs=1024 count=8 &gt; /dev/null 2&gt;&amp;1 &amp; done cd - donedone 3. Conclusion First Time Transfer, use pigz + nc Incremental Files Update, use rsync References: Transfer 15 TB of Tiny Files]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>DevOps</category>
        <category>Backup</category>
      </categories>
      <tags>
        <tag>Rsync</tag>
        <tag>transfer</tag>
        <tag>copy</tag>
        <tag>nc</tag>
        <tag>many</tag>
        <tag>tiny</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup Cygwin in Windows XP/2003]]></title>
    <url>%2F2017%2F06%2F04%2FSetup-Cygwin-in-Windows-XP-2003%2F</url>
    <content type="text"><![CDATA[Everyone should know how to setup Cygwin under Windows 7/10, however, if you do it in Windows XP/2003, it will failed.Why? Because the latest packages are only compatible with Windows 7 or higher.In other words, the Cygwin respository doesn’t have a mechanism to maintain different version of these binaries. So, how to setup Cygwin under Windows XP then? The good news is that someone keeps it. 1. Download the setup.exe32-bit: setup-x86-2.874.exe64-bit: setup-x86_64-2.874.exe 2. Run the setup.exe with -X optionPlease open the cmd to run with -X option setup-x86-2.874.exe -X 3. Use the legacy repositories32-bit: http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/2016/08/30/10422364-bit: http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/2016/08/30/104235 Here are the full list of Cygwin Time Machine Repository, please use the corresponding respository as the version of setup.exe32-bit: http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/index.html64-bit: http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/index.html Then always use this repository instead of others to install packages. Engjoy!!! References: Cygwin Time Machine, TL;DR]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Cygwin</tag>
        <tag>Windows XP</tag>
        <tag>Windows 2003</tag>
        <tag>Package</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Useful Links]]></title>
    <url>%2F2017%2F06%2F03%2FUseful-Links%2F</url>
    <content type="text"><![CDATA[This is an assembly of useful links. Those Linux Command Example Explain Shell]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>Knowledge Base</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Straight Through and Crossover Cable]]></title>
    <url>%2F2017%2F05%2F27%2FStraight-Through-and-Crossover-Cable%2F</url>
    <content type="text"><![CDATA[Recently I went Halifax to help a friend to setup Internet Cafe System, including the hardware and software. And I met the problem of make Internet Cables, i.e, Straight Through and Crossover and T568A/B color orders. There are two kinds of network cable that we already know, Straight Through and Crossover Cable. This article will give an summary of the differences and how to setup a connection in real by giving photos. 1. Straight Through and Crossover1.1. T568A and T568B StandardsPlease note the only differences are the sequences order of different lines with different colors. 1.2. Straight Through and CrossoverThe Straight Through cable will use the same sequence order in both side of a cable, either use the same T568A or T568B order.Normally, T568B order has a better performance. Next picture is the Straight Through with T568B order. The Crossover cable will use the opposite sequence order in different sides, i.e., one side use T568A and another use T568A, or vice versa.Next shows a crossover example. 1.3. When to use which cable?Straight Through cable is primarily used for connecting unlike devices, and Crossover cable is used for connecting alike devices.Use straight through cable for the following cabling: Switch to router Switch to PC or server Hub to PC or server Home Router to PC (a Home Router normally contains a switch and a router) Use crossover cables for the following cabling: Switch to switch Switch to hub Hub to hub (Switch and Hub are alike devices) Router to router Router Ethernet port to PC NIC PC to PC 2. How to Setup?2.1. Things You Need 2.2. Take off the Skin of the Cable 2.3. Places the Lines as T568A/T568B Order 2.4. Cut Cable to Make Lines Neat 2.5. Push Lines into RJ45 Port 2.6. Use Piller to Hold Down the Metel Sheets on RJ45 References: Difference Between Straight Through and Crossover Cable How to make Network Cable]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>Gaming Club Ops</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>Cable</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH Tricks]]></title>
    <url>%2F2017%2F05%2F18%2FSSH-Tricks%2F</url>
    <content type="text"><![CDATA[You sometimes would see somebody doing something cool with SSH(Secure Shell), like without password, or even without key, or even more, port forwarding to break the firewall restrictions. This post will discuss ssh tricks of authentications methods and port forwarding approaches. Three kinds of SSH authentication methods: Password Public/private key pair Host-based authentication There are three kinds of SSH Forwarding: Local Port Forwarding Remote Reverse Forwarding Dynamic Port Forwarding This post will make these stuff more clear. 1. SSH Authentication MethodsWe won’t talk about the password methods since it’s too easy. 1.1. Public/Private Keypair, free password Step 1: Genrate Keys by typing ssh-keygen from you server1. It will generate ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub key pairs which are private key/public keys of your server1 of the user whom you’re currently logged as. private key should be kept secret public key is meant to be shared Step 2: Copy the content of public key to remote server’s ~/.ssh/authorized_keys, by appending this file. Step 3: Login from server1 to remote server, you don’t need password now! 1.2. Host-based Authentication Doesn’t need user credentials(password or key), actually we just write it in a configuration file, it’s kind of alias Provides trust based on hostname and userid Userid on both system has to be the same Here is an example that login into server1 vagrant box:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# Here we list the hostname and its config[09:51 PM morganwu@morgan-yinnut ~]$ cat ~/.ssh/config |grep -A6 srv1 Host srv1 User vagrant Port 2222 Hostname 127.0.0.1 IdentityFile /Users/morganwu/Developer/workspace/ssh_port_forward/server1/.vagrant/machines/default/virtualbox/private_key StrictHostKeyChecking no# Here we just ssh with an alias without username and hostname[09:51 PM morganwu@morgan-yinnut ~]$ ssh srv1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the ECDSA key sent by the remote host isSHA256:jYEhZ8yXtOJFowmQnMyA+bHshrhX7H30vVQF9UyND48.Please contact your system administrator.Add correct host key in /Users/morganwu/.ssh/known_hosts to get rid of this message.Offending ECDSA key in /Users/morganwu/.ssh/known_hosts:247Password authentication is disabled to avoid man-in-the-middle attacks.Keyboard-interactive authentication is disabled to avoid man-in-the-middle attacks.Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-112-generic x86_64) * Documentation: https://help.ubuntu.com/ System information as of Fri May 19 01:50:52 UTC 2017 System load: 0.28 Processes: 78 Usage of /: 3.6% of 39.34GB Users logged in: 0 Memory usage: 25% IP address for eth0: 10.0.2.15 Swap usage: 0% Graph this data and manage this system at: https://landscape.canonical.com/ Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud0 packages can be updated.0 updates are security updates.New release '16.04.2 LTS' available.Run 'do-release-upgrade' to upgrade to it.Last login: Fri May 19 01:50:53 2017 from 10.0.2.2vagrant@vagrant-ubuntu-trusty-64:~$ 2. SSH Forwarding2.1. SSH Local Normal Port ForwardingHere is the scenario why we need Port Forwarding: bypass the private network, or using the Jumpbox. Now we want to access web server on box2 via box1. Here is how we create a local port forward. Now we can type localhost:8000 from your-box, this will forward the request to box-2:80 via box-1 ssh tunnel created above!If we have multiple box-2 here, this is the load balancing model. We call this as local port forwarding instead of remote port forwarding, since the setup direction is the same as the resource access direction. This is also called the normal tunnel instead of the reverse tunnel via ssh. This can be done by following three steps: setup ssh connection from your-box to box-1 box-1 forward the requets to box-2 so you can access box-2 from your-box now even box-2 is in the internal network Run the command ssh -L localport:DEST_HOST:DEST_PORT VIA_HOST locally and then access local localport to get the DEST_HOST:DEST_PORT content.This will open a localport listened locally, to serve all requests from local and then forward them to DEST_HOST:DEST_PORT by using the ssh tunnel from local to the VIA_HOST. 2.1.1. Share Your SSH Local ForwardingWe could enable localport to be accessed by other machines by appending the -g switch. Next we enable local port forwarding from localhost:8000 to ece.uwaterloo.ca:80 via ecelinux4.uwaterloo.ca:22 12345678910111213141516171819[11:23 PM morganwu@morgan-yinnut proxies]$ ssh -L 8000:ece.uwaterloo.ca:80 -g m92wu@ecelinux4.uwaterloo.caLast login: Thu May 18 23:23:43 2017 from cpebc4dfb93ed53-cmbc4dfb93ed50.cpe.net.cable.rogers.comECE Department Linux NoMachine ServerThis server is ONLY to be used to access other Linux servers.Course software should NOT be run on this server.PLEASE USE ssh -X eceLinuxN TO LOG INTO OTHER LINUX SERVERS SUCH AS eceLinux1, eceLinux2, eceLinux3, eceLinux5 .. eceLinux11 and run course software there.*** THANK YOU TO WEEF for purchasing this server! ***This machine is a NoMachine server with a 4-core 3.8GHz AMD FX CPU with 32G of ECC RAMThe login password is synchronized with Nexus.Forward any questions to Eric in E2-2357 or sysadmins@ecemail.uwaterloo.ca[m92wu@ecelinux4 ~]$ Here lists the port information, we can see 8080 is bound to all inet interfaces. 123[11:23 PM morganwu@morgan-yinnut proxies]$ netstat -na|grep tcp|grep 8000tcp4 0 0 *.8000 *.* LISTEN tcp6 0 0 *.8000 *.* LISTEN Now let’s access the ece.uwaterloo.ca:80 page from another private virtual machine on my local computer. We can see it could have access to that page now. 12345678vagrant@vagrant-ubuntu-trusty-64:~$ curl 192.168.0.12:8000&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;302 Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Found&lt;/h1&gt;&lt;p&gt;The document has moved &lt;a href="https://ece.uwaterloo.ca/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Here is an image for demonstrating this: 2.1.2. Use Compression via this tunnelBy using -C together with -L option. 2.2. SSH Remote Reverse Port ForwardingLocal Port Forwarding has the same direction of SSH tunnel as the request forwarding, while Remote Reverse Forwarding does the opposite direction. So you setup a ssh tunnel from your-box to box-1 which has a public address while your-box doesn’t. But you would like to access your-box from box-2 which is outside. Now you can only do this via box-1. If we have multiple your-box here, this is the so-called reverse proxy load balancing model. So our command format is ssh -R VIA_LISTEN_PORT:DEST_HOST:DEST_PORT VIA_HOST,This command will: open a ssh tunnel from DEST_HOST to VIA_HOST listen a VIA_LISTEN_PORT on the VIA_HOST forward all requests from VIA_HOST:VIA_LISTEN_PORT to DEST_HOST:DEST_PORT Also, the -C option will work here. 2.3. SSH Dynamic Port ForwardingIn the SSH-Local-Normal-Port-Forwarding, we already know we can forward localhost:8000 request to remote_server:port via a remote public server, but this is only for specific port. What if we want to forward every kind of requests? This is the idea of dynamic port forwarding, which is also be called as a proxy. 1$ ssh -D 9999 -C m92wu@ecelinux4.uwaterloo.ca The above command will forward every requests from localhost if you setup this socks proxy as the proxy of your client. References: https://www.slideshare.net/zdennis/ssh-9115832]]></content>
      <categories>
        <category>Tool &amp; Skill</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>port forwarding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Read List]]></title>
    <url>%2F2017%2F05%2F16%2FRead-List%2F</url>
    <content type="text"><![CDATA[Keep Updating to add new articles and papers to read categories methodology style https://stephenholiday.com/notes/ https://cs.stanford.edu/~matei/courses/2015/6.S897 Distributed SystemIf can’t find something new to read, consider these sites: https://cs.stanford.edu/~matei/courses/2015/6.S897/ https://pdos.csail.mit.edu/6.824/schedule.html https://dancres.github.io/Pages/ 1. Language1.1. JavaJava 8 Labmda, Streams https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html http://www.oracle.com/technetwork/articles/java/architect-lambdas-part1-2080972.html http://www.oracle.com/technetwork/articles/java/architect-lambdas-part2-2081439.html https://www.ibm.com/developerworks/java/library/j-java-streams-1-brian-goetz/index.html http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html http://www.oracle.com/technetwork/articles/java/architect-streams-pt2-2227132.html 2. NetworkBBR http://queue.acm.org/detail.cfm?id=3022184 https://www.ietf.org/proceedings/97/slides/slides-97-iccrg-bbr-congestion-control-02.pdf https://www.zhihu.com/question/53559433 https://www.zhihu.com/question/53858229 3. RecoveryBookKeeper and HedWig http://dl.acm.org/citation.cfm?id=2433144 https://cwiki.apache.org/confluence/display/BOOKKEEPER/BookKeeper http://bookkeeper.apache.org/ http://blog.csdn.net/liuhong1123/article/details/8945456 http://dockone.io/article/78 4. StreamingKafka: a Distributed Messaging System for Log Processing - LinkedIn 2011, notes http://people.csail.mit.edu/matei/courses/2015/6.S897/readings/kafka.pdf 5. Container &amp; DevOpsBorg, Omega, and Kubernets http://www.e-wilkes.com/john/papers/2016-Queue-Kubernetes.pdf 6. Consistency and Locks基于Redis的分布式锁到底安全么？ http://zhangtielei.com/posts/blog-redlock-reasoning.html Consistency: From Chubby to Paxos and Raft 7. CacheGuava Cache 8. OLTP, OLAP, DatabaseHybrid Transactional/Analytical Processing: A Survey http://delivery.acm.org/10.1145/3060000/3054784/p1771-ozcan.pdf Kudu: Storage for Fast Analytics on Fast Data https://kudu.apache.org/kudu.pdf 9. Time Series DatabaseTSDB, OpenTSDB http://btw2017.informatik.uni-stuttgart.de/slidesandpapers/E4-14-109/paper_web.pdf ftp://ftp.informatik.uni-stuttgart.de/pub/library/medoc.ustuttgart_fi/DIP-3729/DIP-3729.pdf]]></content>
      <categories>
        <category>Read &amp; Think</category>
        <category>Knowledge Base</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Kafka: a Distributed Messaging System for Log Processing - LinkedIn 2011]]></title>
    <url>%2F2017%2F05%2F14%2FKafka-a-Distributed-Messaging-System-for-Log-Processing-LinkedIn-2011%2F</url>
    <content type="text"><![CDATA[Not complete yet. Kafka is a Distributed Streaming platform. Kafka™ is used for building real-time data pipelines and streaming apps. It is horizontally scalable, fault-tolerant, wicked fast, and runs in production in thousands of companies. The Kafka site said it has three main functionalities: PUBLISH &amp; SUBSCRIBE to streams of data like a messaging system PROCESS streams of data efficiently and in real time STORE streams of data safely in a distributed replicated cluster References: http://people.csail.mit.edu/matei/courses/2015/6.S897/readings/kafka.pdf]]></content>
      <categories>
        <category>Read &amp; Think</category>
        <category>Message Passing</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>Message Queue</tag>
        <tag>Streaming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F04%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 1. Quick Start1.1. Create a new post1$ hexo new "My New Post" More info: Writing 1.2. Run server1$ hexo server More info: Server 1.3. Generate static files1$ hexo generate More info: Generating 1.4. Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>